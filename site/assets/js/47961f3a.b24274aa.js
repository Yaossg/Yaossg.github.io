"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[8],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>b});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=c(t),b=i,f=u["".concat(s,".").concat(b)]||u[b]||d[b]||l;return t?r.createElement(f,o(o({ref:n},p),{},{components:t})):r.createElement(f,o({ref:n},p))}));function b(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,o=new Array(l);o[0]=u;var a={};for(var s in n)hasOwnProperty.call(n,s)&&(a[s]=n[s]);a.originalType=e,a.mdxType="string"==typeof e?e:i,o[1]=a;for(var c=2;c<l;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2047:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>a,toc:()=>c});var r=t(7462),i=(t(7294),t(3905));const l={},o="\ud83c\udd95 malloc \u600e\u4e48\u662f\u4e2a\u51fd\u6570\u554a",a={unversionedId:"cnss/8",id:"cnss/8",title:"\ud83c\udd95 malloc \u600e\u4e48\u662f\u4e2a\u51fd\u6570\u554a",description:"\u9898\u76ee",source:"@site/docs/cnss/8.md",sourceDirName:"cnss",slug:"/cnss/8",permalink:"/site/docs/cnss/8",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83c\udff4 \u81ea\u4e0b\u800c\u4e0a\u7684\u7a83\u542c\u653b\u51fb",permalink:"/site/docs/cnss/7"},next:{title:"\ud83d\udef0\ufe0f [A] \u6811\u72b6\u56fe\u8bbe\u8ba1\u8005",permalink:"/site/docs/cnss/A"}},s={},c=[{value:"\u9898\u76ee",id:"\u9898\u76ee",level:2},{value:"\u9898\u89e3",id:"\u9898\u89e3",level:2},{value:"Windows \u5b9e\u73b0",id:"windows-\u5b9e\u73b0",level:3},{value:"Linux \u5b9e\u73b0",id:"linux-\u5b9e\u73b0",level:3}],p={toc:c};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"-malloc-\u600e\u4e48\u662f\u4e2a\u51fd\u6570\u554a"},"\ud83c\udd95 malloc \u600e\u4e48\u662f\u4e2a\u51fd\u6570\u554a"),(0,i.kt)("h2",{id:"\u9898\u76ee"},"\u9898\u76ee"),(0,i.kt)("p",null,"\u4e0d\u5141\u8bb8\u4f7f\u7528\u5185\u7f6e\u7684 ",(0,i.kt)("inlineCode",{parentName:"p"},"malloc")," \u548c ",(0,i.kt)("inlineCode",{parentName:"p"},"free"),"\uff0c\u7528 C \u8bed\u8a00\u5b9e\u73b0 ",(0,i.kt)("inlineCode",{parentName:"p"},"mymalloc")," \u548c ",(0,i.kt)("inlineCode",{parentName:"p"},"myfree"),"\u3002"),(0,i.kt)("h2",{id:"\u9898\u89e3"},"\u9898\u89e3"),(0,i.kt)("h3",{id:"windows-\u5b9e\u73b0"},"Windows \u5b9e\u73b0"),(0,i.kt)("p",null,"\u6ca1\u9519\u3002\u4f60\u6ca1\u8bf4\u4e0d\u80fd\u7528 Windows \u5427\uff01"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"#include <windows.h>\n\nvoid* mymalloc(size_t size) {\n    return HeapAlloc(GetProcessHeap(), 0, size);\n}\n\nvoid myfree(void* ptr) {\n    HeapFree(GetProcessHeap(), 0, ptr);\n}\n")),(0,i.kt)("p",null,(0,i.kt)("del",{parentName:"p"},"\u6253\u6211\u65f6\u4e0b\u624b\u8f7b\u70b9")),(0,i.kt)("h3",{id:"linux-\u5b9e\u73b0"},"Linux \u5b9e\u73b0"),(0,i.kt)("p",null,"\u54b3\u54b3\uff0c\u4e0d\u5f00\u73a9\u7b11\u4e86\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"#include <unistd.h>\n#include <stddef.h>\n#include <stdbool.h>\n#include <stdlib.h>\n\nint brk(void *addr);\nvoid *sbrk(intptr_t increment);\n\n\ntypedef struct block block, *pblock;\nstruct block {\n    pblock next;\n    pblock prev;\n    size_t size;\n    size_t isFree;\n    char* ptr;\n    char data[];\n};\n\npblock head = NULL, tail = NULL;\n\nint fit(pblock b, size_t size) {\n    return b->isFree && b->size >= size;\n}\n\npblock find(size_t size) {\n    pblock b = head;\n    while (b && !fit(b, size)) {\n        b = b->next;\n    }\n    return b;\n}\n\npblock append(size_t size) {\n    pblock b = sbrk(0);\n    if (sbrk(sizeof(block) + size) == (void*)-1)\n        return NULL;\n    b->size = size;\n    b->next = NULL;\n    if (tail) {\n        tail->next = b;\n    } else {\n        head = b;\n    }\n    b->prev = tail;\n    b->isFree = false;\n    b->ptr = b->data;\n    return tail = b;\n}\n\nsize_t align8(size_t size) {\n    return ((size + 7) >> 3) << 3;\n}\n\nvoid* mymalloc(size_t size) {\n    size = align8(size);\n    pblock b = find(size);\n    if (b == NULL) {\n        b = append(size);\n        if (b == NULL) return NULL;\n    } else {\n        b->isFree = false;\n    }\n    return b->ptr;\n}\n\nbool inRange(void* ptr) {\n    return head < ptr && ptr < sbrk(0);\n}\n\npblock blockOf(void* ptr) {\n    return (pblock)((char*)ptr - sizeof(block));\n}\n\nbool isValid(void* ptr) {\n    return head && inRange(ptr) && blockOf(ptr)->ptr == ptr;\n}\n\nvoid myfree(void* ptr) {\n    if (isValid(ptr)) {\n        pblock b = blockOf(ptr);\n        b->isFree = true;\n        if (b->next == NULL) {\n            tail = b->prev;\n            if (tail) {\n                tail->next = NULL;\n            } else {\n                head = NULL;\n            }\n            brk(b);\n        }\n    }\n}\n")))}d.isMDXComponent=!0}}]);