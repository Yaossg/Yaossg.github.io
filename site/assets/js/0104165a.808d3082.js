"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[684],{3905:(t,n,e)=>{e.d(n,{Zo:()=>c,kt:()=>d});var i=e(7294);function a(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function r(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,i)}return e}function m(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?r(Object(e),!0).forEach((function(n){a(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):r(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function s(t,n){if(null==t)return{};var e,i,a=function(t,n){if(null==t)return{};var e,i,a={},r=Object.keys(t);for(i=0;i<r.length;i++)e=r[i],n.indexOf(e)>=0||(a[e]=t[e]);return a}(t,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(i=0;i<r.length;i++)e=r[i],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(a[e]=t[e])}return a}var o=i.createContext({}),l=function(t){var n=i.useContext(o),e=n;return t&&(e="function"==typeof t?t(n):m(m({},n),t)),e},c=function(t){var n=l(t.components);return i.createElement(o.Provider,{value:n},t.children)},u={inlineCode:"code",wrapper:function(t){var n=t.children;return i.createElement(i.Fragment,{},n)}},p=i.forwardRef((function(t,n){var e=t.components,a=t.mdxType,r=t.originalType,o=t.parentName,c=s(t,["components","mdxType","originalType","parentName"]),p=l(e),d=a,x=p["".concat(o,".").concat(d)]||p[d]||u[d]||r;return e?i.createElement(x,m(m({ref:n},c),{},{components:e})):i.createElement(x,m({ref:n},c))}));function d(t,n){var e=arguments,a=n&&n.mdxType;if("string"==typeof t||a){var r=e.length,m=new Array(r);m[0]=p;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=t,s.mdxType="string"==typeof t?t:a,m[1]=s;for(var l=2;l<r;l++)m[l]=e[l];return i.createElement.apply(null,m)}return i.createElement.apply(null,e)}p.displayName="MDXCreateElement"},5702:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>o,contentTitle:()=>m,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>l});var i=e(7462),a=(e(7294),e(3905));const r={},m="\u23e9 \u7ebf\u6027\u4ee3\u6570\u4e0e\u7a7a\u95f4\u89e3\u6790\u51e0\u4f55 \u4e0a",s={unversionedId:"cnss/2",id:"cnss/2",title:"\u23e9 \u7ebf\u6027\u4ee3\u6570\u4e0e\u7a7a\u95f4\u89e3\u6790\u51e0\u4f55 \u4e0a",description:"\u9898\u76ee",source:"@site/docs/cnss/2.md",sourceDirName:"cnss",slug:"/cnss/2",permalink:"/site/docs/cnss/2",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83c\udf0f \u68a6\u5f00\u59cb\u7684\u5730\u65b9",permalink:"/site/docs/cnss/1"},next:{title:"\ud83d\uddf3 \u6559\u6211\u5531\u7968",permalink:"/site/docs/cnss/3"}},o={},l=[{value:"\u9898\u76ee",id:"\u9898\u76ee",level:2},{value:"\u9898\u89e3",id:"\u9898\u89e3",level:2},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u5411\u91cf\u5316",id:"\u5411\u91cf\u5316",level:3}],c={toc:l};function u(t){let{components:n,...e}=t;return(0,a.kt)("wrapper",(0,i.Z)({},c,e,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"-\u7ebf\u6027\u4ee3\u6570\u4e0e\u7a7a\u95f4\u89e3\u6790\u51e0\u4f55-\u4e0a"},"\u23e9 \u7ebf\u6027\u4ee3\u6570\u4e0e\u7a7a\u95f4\u89e3\u6790\u51e0\u4f55 \u4e0a"),(0,a.kt)("h2",{id:"\u9898\u76ee"},"\u9898\u76ee"),(0,a.kt)("p",null,"\u5728",(0,a.kt)("strong",{parentName:"p"},"\u4e0d\u4f7f\u7528\u5e76\u884c\u8ba1\u7b97"),"\u7684\u524d\u63d0\u4e0b\uff0c\u4f7f\u77e9\u9635\u4e58\u6cd5\u7684\u8fd0\u7b97\u901f\u5ea6\u53d8\u5feb\u3002"),(0,a.kt)("h2",{id:"\u9898\u89e3"},"\u9898\u89e3"),(0,a.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-C++"},'#include <iostream>\n#include <string>\n#include <functional>\n#include <chrono>\n#include <vector>\nusing namespace std;\n\n\ndouble timeit(std::function<void()> test) {\n    auto start = std::chrono::system_clock::now();\n    test();\n    auto stop = std::chrono::system_clock::now();\n    std::chrono::duration<double, std::milli> time = stop - start;\n    return time.count();\n}\n\nclass matrix {\n    size_t m, n;\n    std::vector<int64_t> e;\npublic:\n    explicit matrix(size_t m, size_t n): m(m), n(n), e(m * n) {}\n    void random() {\n        for (size_t i = 0; i < m; ++i) \n            for (size_t j = 0; j < n; ++j) \n                at(i, j) = rand();\n    }\n    matrix(matrix const& that) = default;\n    matrix(matrix&&) = default;\n    matrix& operator=(matrix const& that) = default;\n    matrix& operator=(matrix&& that) = default;\n    int64_t& at(size_t i, size_t j) { return e[i * m + j]; }\n    int64_t const& at(size_t i, size_t j) const { return e[i * m + j]; }\n    \n    matrix const& operator+=(matrix const& that) {\n        assert(m == that.m && n == that.n);\n        for (size_t i = 0; i < m; ++i) for (size_t j = 0; j < n; ++j) at(i, j) += that.at(i, j);\n        return *this;\n    }\n\n    matrix operator+(matrix that) const { return that += *this; }\n    matrix const& operator-=(matrix const& that) {\n        assert(m == that.m && n == that.n);\n        for (size_t i = 0; i < m; ++i) for (size_t j = 0; j < n; ++j) at(i, j) -= that.at(i, j);\n        return *this;\n    }\n    matrix operator-(matrix const& that) const { matrix copy(*this); copy -= that; return copy; }\n\n    matrix submat(size_t z, size_t w, size_t u, size_t v) const {\n        matrix sub(u, v);\n        for (size_t i = 0; i < u; ++i) \n            for (size_t j = 0; j < v; ++j) \n                sub.at(i, j) = at(z + i, w + j);\n        return sub;\n    }\n\n    matrix mul_plain(matrix const& that) const {\n        size_t p = that.m;\n        assert(n == p);\n        matrix product(m, that.n);\n        for (size_t i = 0; i < m; ++i) \n            for (size_t j = 0; j < n; ++j) {\n                for (size_t k = 0; k < p; ++k) \n                    product.at(i, j) += at(i, k) * that.at(k, j);\n            }\n        return product;\n    }\n\n    matrix mul_constant(matrix const& that) const {\n        size_t p = that.m;\n        assert (n == p);\n        matrix product(m, that.n);\n        for (size_t i = 0; i < m; ++i) \n            for (size_t k = 0; k < p; ++k) {\n                int64_t r = at(i, k);\n                for (size_t j = 0; j < n; ++j) \n                    product.at(i, j) += r * that.at(k, j);\n            }\n        return product;\n    }\n\n    matrix mul_Strassen(matrix const& that) const {\n        assert(m == that.m && n == that.n);\n        if (m == 1 && n == 1) {\n            matrix m(1, 1);\n            m.at(0, 0) = at(0, 0) * that.at(0, 0);\n            return m;\n        }\n        matrix A11 = submat(0, 0, m / 2, n / 2);\n        matrix A12 = submat(0, n / 2, m / 2, n - n / 2);\n        matrix A21 = submat(m / 2, 0, m - m / 2, n / 2);\n        matrix A22 = submat(m / 2, n / 2, m - m / 2, n - n / 2);\n        matrix B11 = that.submat(0, 0, m / 2, n / 2);\n        matrix B12 = that.submat(0, n / 2, m / 2, n - n / 2);\n        matrix B21 = that.submat(m / 2, 0, m - m / 2, n / 2);\n        matrix B22 = that.submat(m / 2, n / 2, m - m / 2, n - n / 2);\n        matrix S1 = B12 - B22;\n        matrix S2 = A11 + A12;\n        matrix S3 = A21 + A22;\n        matrix S4 = B21 - B11;\n        matrix S5 = A11 + A22;\n        matrix S6 = B11 + B22;\n        matrix S7 = A12 - A22;\n        matrix S8 = B21 + B22;\n        matrix S9 = A11 - A21;\n        matrix S10= B11 + B12;\n        matrix P1 = A11.mul_Strassen(S1);\n        matrix P2 = S2.mul_Strassen(B22);\n        matrix P3 = S3.mul_Strassen(B11);\n        matrix P4 = A22.mul_Strassen(S4);\n        matrix P5 = S5.mul_Strassen(S6);\n        matrix P6 = S7.mul_Strassen(S8);\n        matrix P7 = S9.mul_Strassen(S10);\n        matrix C11 = P5 + P4 - P2 + P6;\n        matrix C12 = P1 + P2;\n        matrix C21 = P3 + P4;\n        matrix C22 = P5 + P1 - P3 - P7;\n        matrix r(m, n);\n        for (size_t i = 0; i < C11.m; ++i) \n            for (size_t j = 0; j < C11.n; ++j)\n                r.at(i, j) = C11.at(i, j);\n        for (size_t i = 0; i < C12.m; ++i) \n            for (size_t j = 0; j < C12.n; ++j)\n                r.at(i, C11.n + j) = C12.at(i, j);\n        for (size_t i = 0; i < C21.m; ++i) \n            for (size_t j = 0; j < C21.n; ++j)\n                r.at(C11.m + i, j) = C21.at(i, j);\n        for (size_t i = 0; i < C22.m; ++i) \n            for (size_t j = 0; j < C22.n; ++j)\n                r.at(C11.m + i, C11.n + j) = C22.at(i, j);\n        return r;\n    }\n\n    bool operator==(matrix const& that) const {\n        return m == that.m && n == that.n && e == that.e;\n    }\n};\n\nvoid verify(matrix (matrix::* std)(matrix const&) const, matrix (matrix::* test)(matrix const&) const, const char* impl) {\n    srand(1);\n    for (int i = 0; i < 1000; ++i) {\n        matrix m1(16, 16), m2(16, 16);\n        m1.random(); m2.random();\n        if ((m1.*std)(m2) != (m1.*test)(m2)) {\n            fprintf(stderr, "Invalid implementation: %s\\n", impl);\n            exit(-1);\n        }\n    }\n    fprintf(stdout, "Valid implementation: %s\\n", impl);\n}\n\ndouble timeit(matrix (matrix::* test)(matrix const&) const, int size, int times, const char* impl, double base = 0) {\n    double time = timeit([=] {\n        srand(1);\n        for (int i = 0; i < times; ++i) {\n            matrix m1(size, size), m2(size, size);\n            m1.random(); m2.random();\n            (m1.*test)(m2);\n        }\n    });\n    printf("\'%8s\' algorithm took %.2f ms to complete %d times %d x %d matrices multiplication", impl, time, times, size, size);\n    if (base && base != time) {\n        printf(", %.2f%% ", abs(base - time) / base * 100); \n        if (base > time) printf("faster");\n        else printf("slower");\n    }\n    puts("");\n    return time;\n}\n\n\nint main() {\n    \n    double base1 = timeit(&matrix::mul_plain, 16, 10000, "plain");\n    double base2 = timeit(&matrix::mul_plain, 1024, 1, "plain");\n\n    verify(&matrix::mul_plain, &matrix::mul_constant, "constant");\n    timeit(&matrix::mul_constant, 16, 10000, "constant", base1);\n    timeit(&matrix::mul_constant, 1024, 1, "constant", base2);\n\n    verify(&matrix::mul_plain, &matrix::mul_Strassen, "Strassen");\n    timeit(&matrix::mul_Strassen, 16, 10000, "Strassen", base1);\n    timeit(&matrix::mul_Strassen, 1024, 1, "Strassen", base2);\n}\n')),(0,a.kt)("p",null,"\u8f93\u51fa\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"'   plain' algorithm took 107.22 ms to complete 10000 times 16 x 16 matrices multiplication\n'   plain' algorithm took 3825.46 ms to complete 1 times 1024 x 1024 matrices multiplication\nValid implementation: constant\n'constant' algorithm took 116.40 ms to complete 10000 times 16 x 16 matrices multiplication, 8.55% slower\n'constant' algorithm took 487.24 ms to complete 1 times 1024 x 1024 matrices multiplication, 87.26% faster\nValid implementation: Strassen\n'Strassen' algorithm took 61000.17 ms to complete 10000 times 16 x 16 matrices multiplication, 56790.40% slower\n'Strassen' algorithm took 576375.25 ms to complete 1 times 1024 x 1024 matrices multiplication, 14966.81% slower\n")),(0,a.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"plain")," \u7b97\u6cd5\u5c31\u662f\u57fa\u7840\u7684\u77e9\u9635\u4e58\u6cd5\u3002")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"constant")," \u662f\u5e38\u6570\u4f18\u5316\u4e4b\u540e\u7684\u77e9\u9635\u4e58\u6cd5\u3002\u5728\u77e9\u9635\u8f83\u5c0f\u7684\u65f6\u5019\u4e0e\u524d\u8005\u901f\u5ea6\u5dee\u522b\u4e0d\u5927\uff0c\u4f46\u662f\u5f53\u77e9\u9635\u8f83\u5927\u65f6\u901f\u5ea6\u4f1a\u6709\u975e\u5e38\u660e\u663e\u5730\u63d0\u5347\u3002"))),(0,a.kt)("p",null,"\u5176\u539f\u7406\u5728\u4e8e\uff1a\u91cd\u65b0\u6392\u5217\u4e86\u5faa\u73af\u7684\u987a\u5e8f\uff0c\u6700\u5185\u5c42\u5faa\u73af"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-C++"},"for (size_t j = 0; j < n; ++j) \n    product.at(i, j) += r * that.at(k, j);\n")),(0,a.kt)("p",null,"\u53d8\u5316\u7684\u53d8\u91cf\u662f ",(0,a.kt)("inlineCode",{parentName:"p"},"j")," \uff0c\uff08\u7531\u4e8e\u6211\u7684\u77e9\u9635\u6309\u884c\u5c55\u5f00\u5b58\u50a8\uff09\u4f7f\u5f97\u6bcf\u6b21\u5bfb\u5740\u90fd\u4e0e\u4e0a\u6b21\u5bfb\u5740\u7684\u5185\u5b58\u975e\u5e38\u8fd1\uff0c\u5927\u5927\u63d0\u9ad8\u4e86\u7a7a\u95f4\u5c40\u90e8\u6027\uff0c\u4ece\u800c\u5b9e\u73b0\u5e38\u6570\u7684\u4f18\u5316\u3002"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Strassen")," \u662f\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3a $\\Theta(n^{\\log7})$ \u7684\u7b97\u6cd5\uff0c\u5b83\u628a\u4e00\u4e2a\u5927\u77e9\u9635\u7684\u4e58\u6cd5\u5206\u89e3\u6210\u4e86\u4e03\u4e2a\u5b50\u77e9\u9635\u7ebf\u6027\u7ec4\u5408\u7684\u4e58\u6cd5\u3002\u63a8\u5bfc\u8fc7\u7a0b\u548c\u590d\u6742\u5ea6\u5206\u6790\u5728",(0,a.kt)("a",{parentName:"li",href:"https://www.jianshu.com/p/4528565e3c64"},"\u8fd9\u91cc"),"\u3002")),(0,a.kt)("p",null,"\u6570\u5b66\u5bb6\u548c\u7b97\u6cd5\u5de5\u7a0b\u5e08\u770b\u4e86\u62cd\u6848\u53eb\u7edd\uff0c\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u770b\u4e86\u76f4\u6447\u5934\u2014\u2014\u8fd9\u4e2a\u5e38\u6570\u5b9e\u5728\u662f\u592a\u5927\u4e86\u3002\u5b9e\u9645\u4e0a\uff0c\u6bd4 $\\Theta(n^3)$ \u65f6\u95f4\u590d\u6742\u5ea6\u66f4\u4f18\u7684\u7b97\u6cd5\uff0c\u51e0\u4e4e\u90fd\u6ca1\u6709\u6734\u7d20\u7684 $\\Theta(n^3)$ \u8dd1\u5f97\u5feb\uff0c\u56e0\u6b64\u5b83\u4eec\u7684\u7814\u7a76\u4ec5\u4ec5\u53ea\u80fd\u505c\u7559\u5728\u6570\u5b66\u548c\u7b97\u6cd5\u7684\u7814\u7a76\u4e2d\uff0c\u4e0d\u80fd\u7528\u4e8e\u5b9e\u9645\u7684\u5de5\u7a0b\u4e2d\u3002"),(0,a.kt)("p",null,"\u4e0d\u8fc7\u8fd9\u4e2a\u7b97\u6cd5\u7684\u4f18\u52bf\u5176\u5b9e\u4e5f\u6709\u6240\u4f53\u73b0\u2014\u2014\u64c5\u957f\u5927\u77e9\u9635\u3002\u5b83\u7684\u6838\u5fc3\u5c31\u662f\u5206\u6cbb\u7684\u601d\u60f3\uff1a\u5927\u77e9\u9635\u5316\u4e3a\u5c0f\u77e9\u9635\u3002\u77e9\u9635\u5c0f\u65f6\uff0c\u76f8\u8f83\u4e8e\u6734\u7d20\u7b97\u6cd5\u6162\u4e86",(0,a.kt)("inlineCode",{parentName:"p"},"56790.40%"),"\uff0c\u4f46\u662f\u5f53\u77e9\u9635\u8f83\u5927\u65f6\uff0c\u5c31\u53ea\u6162\u4e86",(0,a.kt)("inlineCode",{parentName:"p"},"14966.81%"),"\uff0c\u53ef\u89c1\u77e9\u9635\u8db3\u591f\u5927\u7684\u65f6\u5019\uff0c\u540e\u8005\u4e5f\u8bb8\u80fd\u53cd\u8d85\u524d\u8005\u3002\uff08\u4e0d\u8fc7\u90a3\u53ef\u80fd\u592a\u5927\u4e86\uff0c\u81f3\u5c11\u5728\u4e2a\u4eba\u7535\u8111\u4e0a\u53ef\u4ee5\u5b9e\u9a8c\u7684\u6570\u636e\u8303\u56f4\u91cc\u662f\u770b\u4e0d\u5230\u8fd9\u4e00\u523b\u4e86\uff09"),(0,a.kt)("h3",{id:"\u5411\u91cf\u5316"},"\u5411\u91cf\u5316"),(0,a.kt)("p",null,"\u5148\u590d\u4e60\u4e00\u4e0b\u7ebf\u6027\u4ee3\u6570\u4e0e\u7a7a\u95f4\u89e3\u6790\u51e0\u4f55\uff1a"),(0,a.kt)("p",null,"$$\nA=\\left(\\begin{array}{}\\alpha",(0,a.kt)("em",{parentName:"p"},"1^T","\\","\\alpha_2^T","\\","\\vdots","\\","\\alpha_n^T\\end{array}\\right)","\\","\nB=(\\beta_1,\\beta_2,\\cdots,\\beta_n)","\\","\nC=(c"),"{ij})=AB=(\\alpha_i^T\\beta_j)\n$$\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u77e9\u9635\u7684\u4e58\u6cd5\u53ef\u4ee5\u770b\u6210\u5de6\u77e9\u9635\u7684\u884c\u5411\u91cf\u548c\u53f3\u77e9\u9635\u7684\u5217\u5411\u91cf\u7684\u5185\u79ef\uff01"),(0,a.kt)("p",null,"\u65e2\u7136\u8f6c\u6362\u4e3a\u4e86\u5411\u91cf\u7684\u95ee\u9898\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u5411\u91cf\u5316\u7684\u65b9\u6cd5\u53ef\u4ee5\u5927\u5927\u63d0\u9ad8\u8ba1\u7b97\u7684\u901f\u5ea6\u3002\u4e0b\u9762\u7528 1024 x 1024 \u7684 double \u77e9\u9635\u4e3a\u4f8b\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c++"},'#include <iostream>\n#include <string>\n#include <functional>\n#include <chrono>\n#include <vector>\n#include <cstring>\nusing namespace std;\n\n\ndouble timeit(std::function<void()> test) {\n    auto start = std::chrono::system_clock::now();\n    test();\n    auto stop = std::chrono::system_clock::now();\n    std::chrono::duration<double, std::milli> time = stop - start;\n    return time.count();\n}\n\n#pragma GCC target("sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,tune=native")\n#include <immintrin.h>\n#include <emmintrin.h>\n\nstruct vec {\n    constexpr static int N = 256;\n    __m256d a[N];\n    double& operator[](int x) {\n        return ((double*) a)[x];\n    }\n    const double& operator[](int x) const {\n        return ((double*) a)[x];\n    }\n    double dot(const vec& x) const {\n        __m256d sum = _mm256_set1_pd(0.0);\n        for (int i = 0; i < N; i++)\n            sum = _mm256_add_pd(sum, _mm256_mul_pd(a[i], x.a[i]));\n        sum = _mm256_hadd_pd(sum, sum);\n        __m128d sum_high = _mm256_extractf128_pd(sum, 1);\n        __m128d result = _mm_add_pd(sum_high, _mm256_castpd256_pd128(sum));\n        return ((double*) &result)[0];\n    }\n};\n\nclass matrix {\n    constexpr static size_t m = 1024, n = 1024;\n    vector<double> e;\npublic:\n    explicit matrix(): e(m * n) {}\n    void random() {\n        for (size_t i = 0; i < m; ++i) \n            for (size_t j = 0; j < n; ++j) \n                at(i, j) = rand();\n    }\n    matrix(matrix const& that) = default;\n    matrix(matrix&&) = default;\n    matrix& operator=(matrix const& that) = default;\n    matrix& operator=(matrix&& that) = default;\n    double& at(size_t i, size_t j) { return e[i * m + j]; }\n    double const& at(size_t i, size_t j) const { return e[i * m + j]; }\n    \n    matrix mul_plain(matrix const& that) const {\n        size_t p = that.m;\n        matrix product;\n        for (size_t i = 0; i < m; ++i) \n            for (size_t j = 0; j < n; ++j) {\n                for (size_t k = 0; k < p; ++k) \n                    product.at(i, j) += at(i, k) * that.at(k, j);\n            }\n        return product;\n    }\n\n    matrix mul_vectorized(matrix const& that) const {\n        vector<vec> lines(m), columns(n);\n        memcpy(lines.data(), e.data(), sizeof(double) * m * n);\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                columns[j][i] = that.at(i, j);\n            }\n        }\n        matrix r;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                r.at(i, j) = lines[i].dot(columns[j]);\n            }\n        }\n        return r;\n    }\n};\n\ndouble timeit(matrix (matrix::* test)(matrix const&) const, int times, const char* impl, double base = 0) {\n    double time = timeit([=] {\n        srand(1);\n        for (int i = 0; i < times; ++i) {\n            matrix m1, m2;\n            m1.random(); m2.random();\n            (m1.*test)(m2);\n        }\n    });\n    printf("\'%10s\' algorithm took %.2f ms to complete %d times 1024 x 1024 matrices multiplication", impl, time, times);\n    if (base && base != time) {\n        printf(", %.2f%% ", abs(base - time) / base * 100); \n        if (base > time) printf("faster");\n        else printf("slower");\n    }\n    puts("");\n    return time;\n}\n\n\nint main() {\n    double base = timeit(&matrix::mul_plain, 1, "plain");\n    timeit(&matrix::mul_vectorized, 1, "vectorized", base);\n}\n')),(0,a.kt)("p",null,"\u8f93\u51fa\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"'     plain' algorithm took 3405.35 ms to complete 1 times 1024 x 1024 matrices multiplication\n'vectorized' algorithm took 223.44 ms to complete 1 times 1024 x 1024 matrices multiplication, 93.44% faster\n")),(0,a.kt)("p",null,"\u5411\u91cf\u5316\u8ba9 CPU \u53ef\u4ee5\u5728\u4e00\u6761\u6307\u4ee4\u91cc\u5904\u7406\u591a\u4e2a\u6570\u636e\uff0c\u4ece\u800c\u5927\u5927\u63d0\u9ad8\u8ba1\u7b97\u6548\u7387\u3002"))}u.isMDXComponent=!0}}]);