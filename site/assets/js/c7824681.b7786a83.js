"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[316],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>h});var r=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function i(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var l=r.createContext({}),s=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},p=function(n){var e=s(n.components);return r.createElement(l.Provider,{value:e},n.children)},u={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,a=n.originalType,l=n.parentName,p=i(n,["components","mdxType","originalType","parentName"]),m=s(t),h=o,d=m["".concat(l,".").concat(h)]||m[h]||u[h]||a;return t?r.createElement(d,c(c({ref:e},p),{},{components:t})):r.createElement(d,c({ref:e},p))}));function h(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var a=t.length,c=new Array(a);c[0]=m;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=n,i.mdxType="string"==typeof n?n:o,c[1]=i;for(var s=2;s<a;s++)c[s]=t[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2954:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=t(7462),o=(t(7294),t(3905));const a={},c="\ud83d\udd0a [D]\u3010ECHO\u3011Re:Master 15",i={unversionedId:"cnss/D",id:"cnss/D",title:"\ud83d\udd0a [D]\u3010ECHO\u3011Re:Master 15",description:"\u9898\u76ee",source:"@site/docs/cnss/D.md",sourceDirName:"cnss",slug:"/cnss/D",permalink:"/site/docs/cnss/D",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83d\uddbc\ufe0f [C] \u7985\u4e0e\u8ba1\u7b97\u673a\u7ef4\u4fee\u827a\u672f",permalink:"/site/docs/cnss/C"},next:{title:"\ud83e\udd9c [E] \u65e0\u9053\u7ffb\u8bd1\u5b98",permalink:"/site/docs/cnss/E"}},l={},s=[{value:"\u9898\u76ee",id:"\u9898\u76ee",level:2},{value:"\u9898\u89e3",id:"\u9898\u89e3",level:2}],p={toc:s};function u(n){let{components:e,...t}=n;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"-dechoremaster-15"},"\ud83d\udd0a ","[D]","\u3010ECHO\u3011Re:Master 15"),(0,o.kt)("h2",{id:"\u9898\u76ee"},"\u9898\u76ee"),(0,o.kt)("p",null,"XuKaFy \u5e0c\u671b\u4f60\u5b9e\u73b0\u7684\u7cfb\u7edf\u6709\u4ee5\u4e0b\u529f\u80fd\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u7c7b\u4f3c\u4e8e\u6587\u672c\u7f16\u8f91\u5668\uff0c\u5728\u5c4f\u5e55\u4e2d\u6253\u5370\u8f93\u5165\u7684\u5b57\u7b26\uff0c\u6309\u4e0b\u56de\u8f66\u80fd\u6362\u884c\uff0c\u6309\u4e0b\u9000\u683c\u80fd\u5220\u9664\uff08\u800c\u4e14\u8981\u80fd\u56de\u5230\u4e0a\u4e00\u884c\uff09")),(0,o.kt)("p",null,"\u6ce8\u610f\uff0c\u6240\u6709\u529f\u80fd\u90fd\u4e0d\u80fd\u4f9d\u8d56\u64cd\u4f5c\u7cfb\u7edf\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f60\u5f97\u81ea\u5df1\u5199\u4e00\u4e2a\u3002"),(0,o.kt)("h2",{id:"\u9898\u89e3"},"\u9898\u89e3"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-nasm"},"org 07c00h \nmov ax, cs\nmov ds, ax \nmov es, ax \ncall main \njmp $  \n\nmain:\n    mov dh, 0\n    mov dl, 0\n    call gets\n    \ngets:\n    mov ah, 0\n    int 16h    ; keyboard input\n    \n    cmp al, 20h\n    jb control ; control character if ASCII <= 0x20\n    \n    mov ah, 0eh\n    int 10h\n    \n    jmp gets\n    \ncontrol:\n    cmp ah, 0eh\n    je backspace\n    cmp ah, 1ch\n    je newline\n    jmp gets\n\nbackspace:\n    ; get cursor\n    mov ah, 3h\n    mov bh, 0h\n    int 10h\n    \n    cmp dl, 0h\n    je backline\n    \n    ; unwind cursor\n    mov ah, 2h\n    dec dl\n    int 10h\n    ; blank character\n    mov ah, 0eh\n    mov al, ' '\n    int 10h\n    ; rewind cursor\n    mov ah, 2h\n    int 10h\n    \n    jmp gets\n    \nbackline:\n    ; do nothing if first line\n    cmp dh, 0\n    je gets\n    \n    ; unwind cursor\n    mov ah, 2h\n    pop dx    ; load last line\n    int 10h\n    \n    jmp gets\n    \nnewline:\n    ; get cursor\n    mov ah, 3h\n    mov bh, 0h\n    int 10h\n    ; move cursor to newline\n    mov ah, 2h\n    push dx   ; store this line\n    inc dh    ; line feed\n    mov dl, 0 ; carriage return\n    int 10h\n    \n    jmp gets\n\n\n\ntimes 510-($-$$) db 0\ndw 0xaa55\n")))}u.isMDXComponent=!0}}]);