"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[247],{3905:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>d});var r=n(67294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var m=r.createContext({}),c=function(t){var e=r.useContext(m),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},l=function(t){var e=c(t.components);return r.createElement(m.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var n=t.components,i=t.mdxType,a=t.originalType,m=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),u=c(n),d=i,f=u["".concat(m,".").concat(d)]||u[d]||p[d]||a;return n?r.createElement(f,o(o({ref:e},l),{},{components:n})):r.createElement(f,o({ref:e},l))}));function d(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var a=n.length,o=new Array(a);o[0]=u;var s={};for(var m in e)hasOwnProperty.call(e,m)&&(s[m]=e[m]);s.originalType=t,s.mdxType="string"==typeof t?t:i,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},58118:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>m,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(87462),i=(n(67294),n(3905));const a={title:"<experimental/simd> \u521d\u4f53\u9a8c",date:new Date("2023-05-09T15:42:00.000Z"),tags:["cpp"]},o=void 0,s={permalink:"/site/blog/simd",source:"@site/blog/simd.md",title:"<experimental/simd> \u521d\u4f53\u9a8c",description:"\u4e4b\u524d\u7528\u975e\u6807\u51c6\u7684 simd \u5199\u8fc7\u77e9\u9635\u4e58\u6cd5\u52a0\u901f\uff0c\u8fd1\u671f\u6ce8\u610f\u5230 C++ \u65b0\u7684 Technical specifications\u2014\u2014Parallelism library extensions v2 \u52a0\u5165\u4e86 ``\u3002\u4e8e\u662f\u6211\u5c1d\u8bd5\u7528\u5b83\u91cd\u5199\u4e86\u4e00\u4e0b\u3002",date:"2023-05-09T15:42:00.000Z",formattedDate:"May 9, 2023",tags:[{label:"cpp",permalink:"/site/blog/tags/cpp"}],readingTime:2.52,hasTruncateMarker:!1,authors:[],frontMatter:{title:"<experimental/simd> \u521d\u4f53\u9a8c",date:"2023-05-09T15:42:00.000Z",tags:["cpp"]},prevItem:{title:"\u901f\u901a\u6570\u636e\u5e93",permalink:"/site/blog/db-speedrun"},nextItem:{title:"\u901f\u901a\u7edf\u8ba1\u5b66",permalink:"/site/blog/statistics"}},m={authorsImageUrls:[]},c=[],l={toc:c};function p(t){let{components:e,...n}=t;return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://yaossg.com/site/docs/cnss/2#%E5%90%91%E9%87%8F%E5%8C%96"},"\u4e4b\u524d\u7528\u975e\u6807\u51c6\u7684 simd \u5199\u8fc7\u77e9\u9635\u4e58\u6cd5\u52a0\u901f"),"\uff0c\u8fd1\u671f\u6ce8\u610f\u5230 C++ \u65b0\u7684 Technical specifications\u2014\u2014",(0,i.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/experimental/parallelism_2"},"Parallelism library extensions v2")," \u52a0\u5165\u4e86 ",(0,i.kt)("a",{parentName:"p",href:"https://en.cppreference.com/w/cpp/experimental/simd"},(0,i.kt)("inlineCode",{parentName:"a"},"<experimental/simd>")),"\u3002\u4e8e\u662f\u6211\u5c1d\u8bd5\u7528\u5b83\u91cd\u5199\u4e86\u4e00\u4e0b\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <iostream>\n#include <string>\n#include <functional>\n#include <chrono>\n#include <vector>\n#include <cstring>\nusing namespace std;\n\n\ndouble timeit(std::function<void()> test) {\n    auto start = std::chrono::system_clock::now();\n    test();\n    auto stop = std::chrono::system_clock::now();\n    std::chrono::duration<double, std::milli> time = stop - start;\n    return time.count();\n}\n\n#include <experimental/simd>\nnamespace stdx = std::experimental;\n\nstruct vec {\n    constexpr static int N = 256;\n\n    stdx::fixed_size_simd<double, 4> a[N];\n    double& operator[](int x) {\n        return ((double*) a)[x];\n    }\n    const double& operator[](int x) const {\n        return ((double*) a)[x];\n    }\n    double dot(const vec& x) const {\n        stdx::fixed_size_simd<double, 4> sum = 0;\n        for (int i = 0; i < N; i++)\n            sum += a[i] * x.a[i];\n        return stdx::reduce(sum);\n    }\n};\n\nclass matrix {\n    constexpr static size_t m = 1024, n = 1024;\n    vector<double> e;\npublic:\n    explicit matrix(): e(m * n) {}\n    void random() {\n        for (size_t i = 0; i < m; ++i)\n            for (size_t j = 0; j < n; ++j)\n                at(i, j) = rand();\n    }\n    matrix(matrix const& that) = default;\n    matrix(matrix&&) = default;\n    matrix& operator=(matrix const& that) = default;\n    matrix& operator=(matrix&& that) = default;\n    double& at(size_t i, size_t j) { return e[i * m + j]; }\n    double const& at(size_t i, size_t j) const { return e[i * m + j]; }\n\n    matrix mul_plain(matrix const& that) const {\n        size_t p = that.m;\n        matrix product;\n        for (size_t i = 0; i < m; ++i)\n            for (size_t j = 0; j < n; ++j) {\n                for (size_t k = 0; k < p; ++k)\n                    product.at(i, j) += at(i, k) * that.at(k, j);\n            }\n        return product;\n    }\n\n    matrix mul_simd(matrix const& that) const {\n        vector<vec> lines(m), columns(n);\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                lines[i][j] = at(i, j);\n                columns[j][i] = that.at(i, j);\n            }\n        }\n        matrix r;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                r.at(i, j) = lines[i].dot(columns[j]);\n            }\n        }\n        return r;\n    }\n};\n\ndouble timeit(matrix (matrix::* test)(matrix const&) const, int times, const char* impl, double base = 0) {\n    double time = timeit([=] {\n        srand(1);\n        for (int i = 0; i < times; ++i) {\n            matrix m1, m2;\n            m1.random(); m2.random();\n            (m1.*test)(m2);\n        }\n    });\n    printf("\'%5s\' took %.2f ms to complete %d times 1024 x 1024 matrices multiplication", impl, time, times);\n    if (base && base != time) {\n        printf(", %.2f%% ", abs(base - time) / base * 100);\n        if (base > time) printf("faster");\n        else printf("slower");\n    }\n    puts("");\n    return time;\n}\n\n\nint main() {\n    double base = timeit(&matrix::mul_plain, 1, "plain");\n    timeit(&matrix::mul_simd, 1, "simd", base);\n}\n')),(0,i.kt)("p",null,"\u8f93\u51fa\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"'plain' took 5458.48 ms to complete 1 times 1024 x 1024 matrices multiplication\n' simd' took 232.27 ms to complete 1 times 1024 x 1024 matrices multiplication, 95.74% faster\n")))}p.isMDXComponent=!0}}]);