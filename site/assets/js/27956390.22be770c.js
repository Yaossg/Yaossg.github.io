"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[8070],{3842:n=>{n.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/rust","metadata":{"permalink":"/site/blog/rust","source":"@site/blog/rust.md","title":"[\u7ffb\u8bd1] Rust in Perspective","description":"\u539f\u6587\uff1ahttps://people.kernel.org/linusw/rust-in-perspective","date":"2025-03-30T00:00:00.000Z","tags":[{"inline":true,"label":"pl","permalink":"/site/blog/tags/pl"},{"inline":true,"label":"fp","permalink":"/site/blog/tags/fp"},{"inline":true,"label":"type","permalink":"/site/blog/tags/type"}],"readingTime":51.995,"hasTruncateMarker":true,"authors":[],"frontMatter":{"date":"2025-3-30","tags":["pl","fp","type"]},"unlisted":false,"nextItem":{"title":"RAII \u5bf9\u6bd4","permalink":"/site/blog/raii"}},"content":"\x3c!--truncate--\x3e\\n\\n# Rust \u8d70\u5728\u6b63\u786e\u7684\u9053\u8def\u4e0a[^title]\\n\\n[^title]: in perspective \u672c\u610f\u662f\u201c\u7b26\u5408\u900f\u89c6\u6cd5\u7684\u3001\u5728\u6b63\u786e\u7684\u6bd4\u4f8b\u5173\u7cfb\u4e2d\u201d\uff0c\u5f15\u7533\u542b\u4e49\u4e3a\u201c\u6070\u5f53\u7684\u3001\u5408\u7406\u7684\u3001\u6b63\u786e\u7684\u201d\u3002\u7ed3\u5408\u672c\u6587\u7684\u4e3b\u65e8\uff08\u8d5e\u7f8e Rust\uff09\u548c\u8bb0\u53d9\u65b9\u5f0f\uff08\u5386\u53f2\u56de\u987e\uff09\uff0c\u6545\u4f5c\u6b64\u7ffb\u8bd1\u3002\\n\\n:::info\\n\\n\u539f\u6587\uff1ahttps://people.kernel.org/linusw/rust-in-perspective\\n\\n\u539f\u4f5c\u8005\uff1aLinus Walleij\\n\\n\u539f\u6587\u53d1\u5e03\u65f6\u95f4\uff1a2022 \u5e74 7 \u6708 14 \u65e5\\n\\n:::\\n\\n\\n:::note\\n\\n\u6240\u6709\u811a\u6ce8\u90fd\u662f\u8bd1\u8005\u6ce8\u3002\\n\\n\u51fa\u4e8e\u4e00\u81f4\u6027\u8003\u8651\uff0c\u6240\u6709\u7684\u4eba\u540d\u90fd\u4fdd\u7559\u82f1\u6587\u539f\u540d\u3002\u4f46\u5bf9\u4e8e\u4e00\u4e9b\u4e2d\u6587\u540d\u7279\u522b\u6709\u8fa8\u8bc6\u5ea6\u7684\u540d\u4eba\uff0c\u4f1a\u5728\u811a\u6ce8\u4e2d\u8fdb\u884c\u6807\u6ce8\u548c\u8bf4\u660e\u3002\\n\\n:::\\n\\n\u6211\u4eec\u6b63\u5728\u8ba8\u8bba\u5e76\u63a8\u52a8 Rust \u6210\u4e3a Linux \u5185\u6838\u5f00\u53d1\u7684\u7b2c\u4e8c\u79cd\u8bed\u8a00\u3002\u4e00\u5e74\u524d\uff0cJake Edge \u4e3a\u5f53\u65f6\u5173\u4e8e Rust for Linux \u5185\u6838\u7684\u8ba8\u8bba\u4f5c\u4e86\u4e00\u4e2a[\u5f88\u597d\u7684\u603b\u7ed3](https://lwn.net/Articles/862018/)\u3002\u6211\u4eec\uff08\u786e\u5207\u5730\u8bf4\u662f Miguel \u548c Wedson\uff09\u5728\u6b64\u57fa\u7840\u4e0a\u53d6\u5f97\u4e86\u66f4\u5927\u7684\u8fdb\u5c55\u3002\u53ef\u4ee5\u660e\u786e\u5730\u8bf4\uff0c\u6211\u8ba4\u4e3a\u8fd9\u4e2a\u65b9\u5411\u603b\u4f53\u4e0a\u662f\u6b63\u786e\u7684\uff0c\u503c\u5f97\u5c1d\u8bd5\u3002\u6211\u60f3\u4e3a\u6b64\u8865\u5145\u4e00\u4e9b\u4ece[\u5185\u6838\u5cf0\u4f1a\u7684\u90ae\u7bb1\u8ba8\u8bba\u4e2d](https://lore.kernel.org/ksummit/CANiq72nNKvFqQs9Euy=_McfcHf0-dC_oPB3r8ZJii2L3sfVjaw@mail.gmail.com/)\u52fe\u52d2\u51fa\u7684\u80cc\u666f\u6545\u4e8b\u3002\\n\\n[^rust-for-linux]: \u53c2\u89c1 [https://github.com/Rust-for-Linux](https://github.com/Rust-for-Linux)\u3002\\n\\n\u592a\u957f\u4e0d\u770b\uff1a\u6211\u65ad\u8a00\uff0cRust \u662f\u60f3\u8981**\u63d0\u5347**\u7f16\u7a0b\u8bed\u8a00\u7684**\u62bd\u8c61**\uff0c\u4f7f\u4e4b\u6700\u7ec8\u5c06**\u8ba1\u7b97\u673a\u79d1\u5b66**\u548c**\u8f6f\u4ef6\u5de5\u7a0b**\u5b66\u79d1\u5408\u4e8c\u4e3a\u4e00\uff0c\u8fd9\u662f\u4e00\u4e2a\u81ea\u8fd9\u4e24\u4e2a\u5b66\u79d1\u88ab\u521b\u9020\u4ee5\u6765\u4e00\u76f4\u6709\u4eba\u60f3\u8981\u8ffd\u6c42\u7684\u76ee\u6807\u3002\\n\\n## \u4ece ALGOL \u8bf4\u8d77\\n\\n\u7b2c\u4e00\u4e2a\u901a\u7528\u9ad8\u7ea7\u8bed\u8a00\u662f FORTRAN\uff0c\u73b0\u5728\u4ecd\u5728\u4e00\u4e9b\u6570\u503c\u5206\u6790\u7684\u4efb\u52a1\u4e2d\u53d1\u6325\u4f5c\u7528\u3002\u7136\u540e\u5c31\u662f ALGOL\uff0c\u5b83\u62e5\u6709\u66f4\u5e7f\u7684\u53d7\u4f17\u3002\\n\\n\u636e\u6211\u6240\u77e5\uff0c\u7b2c\u4e00\u4e2a\u201c\u771f\u6b63\u7684\u201d\u64cd\u4f5c\u7cfb\u7edf\uff08\u4f7f\u7528[\u865a\u62df\u5185\u5b58](https://en.wikipedia.org/wiki/Virtual_memory)\u7b49\uff09\u662f 1962 \u5e74\u4e3a [the Atlas Machine](https://en.wikipedia.org/wiki/Atlas_(computer)) \u7f16\u5199\u7684\u76d1\u7763\u7a0b\u5e8f\u3002\u8be5\u7a0b\u5e8f\u7528 **ALGOL** \u7684\u4e00\u4e2a\u65b9\u8a00 *Atlas autocode* \u7f16\u5199\u3002\u5728\u5f53\u65f6\uff0cALGOL \u53ef\u4ee5\u8bf4\u662f\u4e00\u95e8\u901a\u7528\u8bed\u8a00[^lingua-franca]\u3002\u6807\u51c6\u7684 ALGOL \u6ca1\u6cd5\u7528\uff0c\u56e0\u4e3a ALGOL 60 \u6ca1\u6709\u5b9a\u4e49\u8f93\u5165\u8f93\u51fa\u539f\u8bed\uff0c\u6240\u4ee5\u6bcf\u4e2a\u7528\u4e8e\u771f\u5b9e\u4e16\u754c\u7684 ALGOL \u5e94\u7528\u7a0b\u5e8f\uff08\u5373\u4e0d\u4ec5\u4f9d\u8d56\u4e8e\u7f16\u8bd1\u65f6\u5c31\u56fa\u5b9a\u7684\u5e38\u91cf\u7684\u5e94\u7528\u7a0b\u5e8f\uff09\u90fd\u9700\u8981\u6dfb\u52a0\u81ea\u5b9a\u4e49\u7684\u8f93\u5165\u8f93\u51fa\u539f\u8bed\u3002\\n\\n[^lingua-franca]: \u901a\u7528\u8bed\uff08lingua franca\uff09\uff0c\u672c\u610f\u662f\u6307\u5728\u8de8\u8d8a\u4e0d\u540c\u8bed\u8a00\u548c\u6587\u5316\u7684\u4ea4\u6d41\u4e2d\uff0c\u4f5c\u4e3a\u4e00\u79cd\u5171\u540c\u8bed\u8a00\u4f7f\u7528\u7684\u8bed\u8a00\u3002\u8fd9\u91cc\u6bd4\u55bb\u51e0\u4e4e\u6240\u6709\u7a0b\u5e8f\u5458\u90fd\u80fd\u8bfb\u5199\u7684\u8bed\u8a00\u3002Unix \u5174\u8d77\u4e4b\u540e\uff0cC \u8bed\u8a00\u51ed\u501f\u5176\u5e7f\u6cdb\u5f71\u54cd\u529b\uff0c\u5df2\u7ecf\u6210\u4e3a\u4e86\u65b0\u4e00\u4ee3\u7684\u901a\u7528\u8bed\u8a00\u3002\\n\\n:::note[\u63d2\u56fe]\\n\\n![](https://dflund.se/~triad/images/Algol-first-copies.jpg)\\n\\n*ALGOL 60 \u7b2c\u4e00\u7248\u89c4\u8303\u7684\u526f\u672c\u3002\u66fe\u5f52\u9686\u5fb7\u5927\u5b66\u7684 Carl-Erik Fr\xf6berg \u6240\u6709\u3002*\\n\\n:::\\n\\n[ALGOL](https://en.wikipedia.org/wiki/ALGOL) \u542f\u53d1\u4e86 [CPL \u8bed\u8a00](https://en.wikipedia.org/wiki/CPL_(programming_language)) \u542f\u53d1\u4e86 [BCPL \u8bed\u8a00](https://en.wikipedia.org/wiki/BCPL) \u542f\u53d1\u4e86 [B \u8bed\u8a00](https://en.wikipedia.org/wiki/B_(programming_language)) \u542f\u53d1\u4e86 [C \u8bed\u8a00](https://en.wikipedia.org/wiki/C_(programming_language))\uff0c\u6700\u7ec8\u6211\u4eec\u7528 C \u8bed\u8a00\u5b9e\u73b0\u4e86 Linux \u5185\u6838\u3002\\n\\n\u5728 1958 \u5230 1968 \u5e74\u95f4\uff0c\u6709\u8bb8\u591a\u5c06\u8ba1\u7b97\u673a\u8bed\u8a00\u4e0e\u5f62\u5f0f\u903b\u8f91\u7ed3\u5408\u8d77\u6765\u7684\u5c1d\u8bd5\uff0c\u800c ALGOL \u6b63\u662f\u8fd9\u4e00\u63a2\u7d22\u7684\u7ebd\u5e26\u3002\u5341\u5e74\u95f4\uff0c\u6211\u4eec\u89c1\u8bc1\u4e86 ALGOL 58\u3001ALGOL 60\u3001ALGOL 68 \u7684\u7248\u672c\u8fed\u4ee3\u3002\u4e0e\u6b64\u540c\u65f6\uff0c**\u8ba1\u7b97\u673a\u79d1\u5b66\uff08computer science\uff09** \u4f5c\u4e3a\u4e00\u95e8\u5b66\u79d1\u88ab\u5efa\u7acb\u8d77\u6765\uff0c\u5b66\u8005\u4eec\u5f97\u4ee5\u4ee5\u6b64\u4e3a\u4e1a\uff0c\u5f00\u542f\u5b66\u672f\u751f\u6daf\u3002\u8fd9\u4e00\u65f6\u671f\u7684\u91cd\u8981\u7a81\u7834\u662f\uff0c\u4eba\u4eec\u5f00\u59cb\u7528 [BNF \u8303\u5f0f](https://en.wikipedia.org/wiki/Backus\u2013Naur_form)\u6765\u63cf\u8ff0\u8bed\u8a00\u7684\u8bed\u6cd5\u3002\u4e5f\u6b63\u662f\u5728\u8fd9\u4e9b\u4e8b\u4ef6\u524d\u540e\uff0cDonald Knuths[^knuths] \u6240\u8457\u7684\u300a\u8ba1\u7b97\u673a\u7a0b\u5e8f\u8bbe\u8ba1\u827a\u672f\u300b\u524d\u4e09\u5377\u51fa\u7248\u2014\u2014\u4ece\u5404\u79cd\u610f\u4e49\u4e0a\u6765\u8bf4\uff0c\u8fd9\u90e8\u5de8\u8457\u90fd\u5bf9\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u53d1\u5c55\u4ea7\u751f\u4e86\u6df1\u8fdc\u7684\u5f71\u54cd\u3002\\n\\n[^knuths]: \u9ad8\u5fb7\u7eb3\uff08[Donald Ervin Knuth](https://en.wikipedia.org/wiki/Donald_Knuth)\uff09\uff0c\u73b0\u4ee3\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5148\u9a71\u4eba\u7269\uff0c\u521b\u9020\u4e86\u7b97\u6cd5\u5206\u6790\u7684\u9886\u57df\uff0c\u662f\u591a\u4e2a\u7406\u8bba\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u5206\u652f\u7684\u5960\u57fa\u4eba\uff1b\u53d1\u8868\u4e86\u591a\u90e8\u5177\u5e7f\u6cdb\u5f71\u54cd\u7684\u8bba\u6587\u548c\u8457\u4f5c\uff0c\u5982\u300a\u8ba1\u7b97\u673a\u7a0b\u5e8f\u8bbe\u8ba1\u827a\u672f\u300b\uff08The Art of Computer Programming\uff09\u3002\\n\\n\u5728 Unix \u8bde\u751f\u4e4b\u521d\uff0cALGOL \u4ecd\u5360\u636e\u4e3b\u5bfc\u5730\u4f4d\u800c C \u8fd8\u672a\u5f97\u5230\u666e\u53ca\u3002\u4e3a\u4e86\u8ba9\u4f60\u5145\u5206\u4e86\u89e3\u8fd9\u4e00\u70b9\uff0c\u4e0d\u59a8\u6765\u770b\u770b\u8fd9\u6bb5 [Bourne Shell](https://en.wikipedia.org/wiki/Bourne_shell) \u7684\u65e9\u671f[\u6e90\u7801\u7247\u6bb5](https://minnie.tuhs.org/cgi-bin/utree.pl?file=V7/usr/src/cmd/sh)\u3002\\n\\n```c\\nsetlist(arg,xp)\\n\\tREG ARGPTR\\targ;\\n\\tINT\\t\\txp;\\n{\\n\\tWHILE arg\\n\\tDO REG STRING\\ts=mactrim(arg->argval);\\n\\t   setname(s, xp);\\n\\t   arg=arg->argnxt;\\n\\t   IF flags&execpr\\n\\t   THEN prs(s);\\n\\t\\tIF arg THEN blank(); ELSE newline(); FI\\n\\t   FI\\n\\tOD\\n}\\n```\\n\\n\u8fd9\u770b\u4e0a\u53bb\u4e0d\u592a\u50cf\u6211\u4eec\u8ba4\u8bc6\u7684\u90a3\u4e2a C \u8bed\u8a00\uff0c\u53cd\u800c\u662f\u66f4\u50cf ALGOL 68\u3002ALGOL 68 \u76f8\u6bd4 ALGOL 60 \u589e\u52a0\u4e86\u8bf8\u5982 IF/FI\uff0cDO/OD \u4e4b\u7c7b\u7684\u6784\u9020\u3002\u5199\u6210\u8fd9\u6837\u7684\u539f\u56e0\u662f\uff0cStephen Bourne \u662f\u4e00\u4f4d\u5f88\u6709\u5f71\u54cd\u529b\u7684 ALGOL 68 \u8d21\u732e\u8005\u3002\u4ed6\u521b\u9020\u4e86[\u4e00\u5957\u5b8f](https://minnie.tuhs.org/cgi-bin/utree.pl?file=V7/usr/src/cmd/sh/mac.h)\uff0c\u8fd9\u6837 C \u9884\u5904\u7406\u5668\u5c31\u53ef\u4ee5\u628a\u4ed6\u81ea\u5236\u7684 ALGOL \u65b9\u8a00\u8f6c\u6362\u6210 C\u3002\u6211\u60f3\u8fd9\u5c31\u662f\u6709\u4eba\u5728 Reddit \u4e0a\u5efa\u8bae\u63d0\u540d *bash*[^bash] \u53c2\u52a0\u6df7\u4e71 C \u8bed\u8a00\u5927\u8d5b[^ioccc]\u7684\u539f\u56e0\u3002\\n\\n[^bash]: \u539f\u6587\u6709\u8bef\uff0c*bash* \u662f Bourne Again Shell \u7684\u7f29\u5199\uff0c*sh* \u624d\u662f\u524d\u6587\u63d0\u5230\u7684 Bourne Shell \u7684\u7f29\u5199\u3002\\n\\n[^ioccc]: \u56fd\u9645\uff23\u8bed\u8a00\u6df7\u4e71\u4ee3\u7801\u5927\u8d5b\uff08IOCCC, The International Obfuscated C Code Contest\uff09\u662f\u4e00\u9879\u56fd\u9645\u7a0b\u5e8f\u8bbe\u8ba1\u8d5b\u4e8b\uff0c\u76ee\u6807\u662f\u5199\u51fa\u6700\u6709\u521b\u610f\u548c\u6700\u8ba9\u4eba\u96be\u4ee5\u7406\u89e3\u7684 C \u8bed\u8a00\u4ee3\u7801\u3002\\n\\nC \u8bed\u8a00\u5728\u5f53\u65f6\u8fd8\u672a\u88ab\u5e7f\u6cdb\u63a5\u53d7\uff0c\u8fd9\u4ec5\u662f\u8bf8\u591a\u4f8b\u5b50\u4e2d\u7684\u4e00\u4e2a\u3002\u6211\u4eec\u5982\u4eca\u90fd\u559c\u6b22\u7528\u7684 Bourne Shell \u811a\u672c\u8bed\u8a00\uff0c\u5176\u5b9e\u4e5f\u4e0e ALGOL 68 \u975e\u5e38\u63a5\u8fd1\u3002\u56e0\u6b64 ALGOL \u7684\u540e\u7ee7\u8005\u5728\u5f53\u4eca\u7684\u5e94\u7528\u6bd4\u6211\u4eec\u60f3\u8c61\u7684\u66f4\u52a0\u5e7f\u6cdb\u3002\\n\\n\u5728 1970 \u5e74\u524d\u540e\uff0cNiklaus Wirth \u81f4\u529b\u4e8e\u6539\u8fdb ALGOL 68 \u5e76\u79f0\u6539\u7248\u4e3a ALGOL W\u3002\u540e\u6765\u4ed6\u538c\u5026\u4e86\u8bed\u8a00\u59d4\u5458\u4f1a\u8fdb\u7a0b\u7684\u8fdf\u7f13\uff0cfork \u4e86 ALGOL \u5e76\u521b\u9020\u4e86 [Pascal \u7f16\u7a0b\u8bed\u8a00](https://en.wikipedia.org/wiki/Pascal_(programming_language))\uff0c\u5e76\u5927\u83b7\u6210\u529f\u3002Wirth \u6559\u6388\u5728\u4ed6\u6240\u8457\u7684 IEEE \u6587\u7ae0[\u300a\u8f6f\u4ef6\u5de5\u7a0b\u7b80\u53f2\u300b](https://people.inf.ethz.ch/wirth/Miscellaneous/IEEE-Annals.pdf)\u4e2d\u53d1\u8868\u4e86\u5bf9\u5f53\u65f6\u65f6\u4e8b\u7684\u770b\u6cd5\uff1a\u4e3e\u4e16\u95fb\u540d\u7684[1968 \u5e74\u5317\u7ea6\u8f6f\u4ef6\u5de5\u7a0b\u5927\u4f1a](http://homepages.cs.ncl.ac.uk/brian.randell/NATO/nato1968.PDF)[^conference]\u5728\u5fb7\u56fd\u52a0\u7c73\u65bd\u80dc\u5229\u53ec\u5f00\uff0c\u6807\u5fd7\u7740**\u8f6f\u4ef6\u5de5\u7a0b\uff08software engineering\uff09** \u6210\u4e3a\u4e00\u95e8\u72ec\u7acb\u7684\u5b66\u79d1\u3002\u800c\u4e3a\u4e86\u89e3\u51b3\u6240\u8c13\u7684[*\u8f6f\u4ef6\u5371\u673a*](https://en.wikipedia.org/wiki/Software_crisis)\uff08software crisis\uff09\u2014\u2014\u7531\u65b0\u5174\u7684\u5de8\u5927\u590d\u6742\u7cfb\u7edf\u5e26\u6765\u7684\u95ee\u9898\u2014\u2014\u4ed6\u5efa\u8bae**\u63d0\u5347**\u65b0\u8bed\u8a00\u7684**\u62bd\u8c61**\u3002\\n\\n[^conference]: \u539f\u6587\u4e2d\uff0c\u540e\u6587\u5bf9\u6b64\u6709\u8bb8\u591a\u522b\u79f0\uff0c\u5982\u52a0\u7c73\u65bd\u5927\u4f1a\u3001\u52a0\u7c73\u65bd\u5317\u7ea6\u5927\u4f1a\u7b49\uff1b\u8bd1\u6587\u4e2d\uff0c\u540e\u6587\u7edf\u4e00\u8bd1\u4f5c\u4e3a\u5317\u7ea6\u8f6f\u4ef6\u5de5\u7a0b\u5927\u4f1a\u3002\\n\\n\u6240\u8c13**\u63d0\u5347\u62bd\u8c61\uff08raise the abstraction\uff09**\uff0c\u5c31\u662f\u8981\u5728\u8bed\u8a00\u4e2d\u4f7f\u7528\u66f4\u6570\u5b66\uff0c\u66f4\u673a\u5668\u65e0\u5173\u7684\u6784\u9020\u3002\u9996\u5148\u8981\u8003\u8651\u7684\u662f\u4f4e\u7ea7\u548c\u9ad8\u7ea7\u8bed\u8a00\u4e4b\u95f4\u7684\u5dee\u522b\uff1a\u4f8b\u5982 `x = x + 1` \u8fd9\u6837\u7b80\u5355\u7684\u64cd\u4f5c\u5c31\u7b97\u4e0d\u4e0a\u9ad8\u7ea7\uff0c\u5b83\u5c31\u662f\u4e00\u4e2a\u82b1\u54e8\u7684\u6c47\u7f16\u6307\u4ee4\u800c\u5df2\u3002\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u786e\u4fe1\u5728\u7f16\u8bd1\u540e\u76ee\u6807\u4ee3\u7801\u91cc\uff0c\u5b83\u4f1a\u53d8\u6210\u67d0\u79cd *ADD* \u6307\u4ee4\u3002\u7136\u800c `a[i] = x + 1` \u5c31\u628a\u62bd\u8c61\u63d0\u5347\u5230\u4e86*\u9ad8\u7ea7\u8bed\u8a00*\u7684\u6c34\u5e73\u3002\u8fd9\u662f\u56e0\u4e3a\u7d22\u5f15\u6570\u7ec4\u9700\u8981\u76ee\u6807\u673a\u5668\u7684\u7279\u5b9a\u77e5\u8bc6\uff1a\u5982\u57fa\u5730\u5740\u3001\u5185\u5b58\u5e03\u5c40\u7b49\u7b49\u3002\u8fd9\u8ba9\u8fd9\u6761\u6307\u4ee4\u66f4\u52a0\u9ad8\u7ea7\uff0c\u4ece\u800c\u63d0\u5347\u4e86\u8bed\u8a00\u7684\u62bd\u8c61\u3002\u8fd9\u91cc\u6211\u4eec\u4e0d\u59a8\u5047\u8bbe\u6709\u8bb8\u591a\u66f4\u9ad8\u7ea7\u7684\u62bd\u8c61\u5b58\u5728\uff0c\u6211\u4eec\u4f1a\u5728\u540e\u9762\u7684\u5c0f\u8282\u4e2d\u7814\u7a76\u8fd9\u4e9b\u8bed\u8a00\u3002\\n\\n\u5317\u7ea6\u8f6f\u4ef6\u5de5\u7a0b\u5927\u4f1a\u5728 Unix \u5708\u5b50\u91cc\u5f88\u51fa\u540d\uff0c\u56e0\u4e3a [Douglas McIlroy](https://en.wikipedia.org/wiki/Douglas_McIlroy) \u51fa\u5e2d\u5e76\u63d0\u51fa\u4e86\u628a\u8f6f\u4ef6\u7ec4\u4ef6\u5316\u6765\u7f13\u89e3\u5176\u65e5\u76ca\u589e\u957f\u7684\u590d\u6742\u6027\u3002\u8fd9\u4e2a\u60f3\u6cd5\u540e\u6765\u901a\u8fc7 Unix \u7684\u7ba1\u9053\u548c\u8fc7\u6ee4\u5668\u673a\u5236\u5f97\u4ee5\u5b9e\u73b0\u3002D-Bus \u548c\u7c7b\u4f3c\u7684\u7ec4\u4ef6\u4e4b\u95f4\u7684\u5408\u4f5c\u673a\u5236\u90fd\u662f\u8f6f\u4ef6\u7ec4\u4ef6\u5316\u7684\u73b0\u4ee3\u6848\u4f8b\u2014\u2014\u800c\u53e6\u4e00\u79cd\u89e3\u51b3\u590d\u6742\u6027\u7684\u65b9\u5f0f\u662f\u8ba9\u8f6f\u4ef6\u4e0d\u90a3\u4e48\u8106\u5f31\uff0c\u4f46\u8fd9\u4e0d\u662f\u672c\u6587\u7684\u91cd\u70b9\u3002\\n\\n\u5173\u4e8e\u5317\u7ea6\u8f6f\u4ef6\u5de5\u7a0b\u5927\u4f1a\uff0cWirth \u6709\u4e00\u4e2a\u975e\u5e38\u5177\u4f53\u53c8\u975e\u5e38\u91cd\u8981\u7684\u770b\u6cd5\uff1a\\n\\n> \u5206\u6790\u9a8c\u8bc1\u548c\u6b63\u786e\u6027\u8bc1\u660e\u7ec8\u5c06\u66ff\u4ee3\u6d4b\u8bd5\u3002\\n\\n\u8fd9\u5c31\u662f\u8bf4\uff1a\u7ecf\u8fc7\u5f62\u5f0f\u9a8c\u8bc1\u7f16\u7a0b\u8bed\u8a00\uff0c\u6240\u6709\u7684\u7279\u6027\u548c\u6784\u9020\u5e94\u8be5\u88ab\u5f62\u5f0f\u5316\u7684\u8bc1\u660e\u4e3a\u65e0\u987b\u6d4b\u8bd5\u7684\u3002\u8f6f\u4ef6\u5de5\u7a0b\u56e0\u5ba3\u4f20[\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1\uff08TDD\uff09](https://en.wikipedia.org/wiki/Test-driven_development) \u800c\u95fb\u540d\uff0c\u800c\u4ed6\u60f3\u8ffd\u6c42\u7684\u76ee\u6807\u662f\u8ba9\u5927\u6bb5\u5927\u6bb5\u7684 TDD \u4e0d\u518d\u5fc5\u8981\u3002\u8f6f\u4ef6\u6d4b\u8bd5\u5728\u5317\u7ea6\u8f6f\u4ef6\u5de5\u7a0b\u5927\u4f1a\u7684\u62a5\u544a\u4e2d\u6709\u4e13\u95e8\u4e00\u7ae0\uff0c\u4f5c\u8005 A.I. Llewelyn \u548c R.F. Wickens \u603b\u7ed3\u9053\uff1a\\n\\n> \u6709\u4e24\u79cd\u6700\u57fa\u672c\u7684\u65b9\u6cd5\u5224\u65ad\u4e00\u4e2a\u4ea7\u54c1\u662f\u5426\u7b26\u5408\u89c4\u8303\u3002\u4e00\u79cd\u65b9\u6cd5\u8be6\u5c3d\u5730\u5206\u6790\u4ea7\u54c1\u5e76\u68c0\u67e5\u5b83\u4e0e\u89c4\u8303\u662f\u5426\u4e00\u81f4\u3002\u53e6\u4e00\u79cd\u65b9\u6cd5\u901a\u8fc7\u5b9e\u9a8c\u6d4b\u91cf\u4ed6\u7684\u6027\u80fd\uff0c\u770b\u7ed3\u679c\u662f\u5426\u7b26\u5408\u89c4\u8303\u3002\u7ed3\u679c\u7684\u7f6e\u4fe1\u5ea6\u56e0\u5b9e\u9a8c\u7684\u6570\u91cf\u548c\u590d\u6742\u5ea6\u800c\u5f02\u3002\\n\\n\u8fd9\u6bb5\u8bdd\u7684\u524d\u534a\u90e8\u5206\uff0c\u4e5f\u5c31\u662f\u201c\u8be6\u5c3d\u5730\u5206\u6790\u201d\uff0c\u4e5f\u5c31\u662f Wirth \u6240\u8bf4\u7684\u5206\u6790\u9a8c\u8bc1\uff0c\u73b0\u5728\u88ab\u53eb\u505a\u5f62\u5f0f\u9a8c\u8bc1\u3002\u800c\u540e\u534a\u90e8\u5206\u5c31\u662f\u6211\u4eec\u6240\u8c13\u7684\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1\uff0cTDD\u3002\u540c\u65f6\uff0c\u524d\u8005\u662f\u4e00\u4e2a\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u95ee\u9898\uff0c\u800c\u540e\u8005\u662f\u4e00\u4e2a\u8f6f\u4ef6\u5de5\u7a0b\u95ee\u9898\u3002\u6240\u4ee5\u8fd9\u5c31\u6210\u4e86\u4e00\u4e2a\u5c94\u8def\u53e3\u3002\\n\\nWirth \u4e5f\u8868\u793a\u5728\u5317\u7ea6\u8f6f\u4ef6\u5de5\u7a0b\u5927\u4f1a\u4e0a\u7684\u8ba8\u8bba\u5bf9 Pascal \u6709\u6df1\u523b\u7684\u5f71\u54cd\u3002\u8fd9\u4e00\u70b9\u4ece Pascal \u7684\u5b57\u7b26\u4e32\u4e2d\u4fbf\u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u662f Pascal \u76f8\u8f83\u4e8e ALGOL \u6700\u91cd\u8981\u7684\u63d0\u5347\u4e4b\u4e00\uff1aPascal \u7684\u5b57\u7b26\u4e32\u662f*\u5b57\u7b26*\u7684\u6570\u7ec4\uff0c\u4f46\u4e0d\u50cf *C \u8bed\u8a00\u7684\u5b57\u7b26*\uff0c*Pascal \u7684\u5b57\u7b26*\u4e0d\u7b49\u4e8e\u4e00\u4e2a\u5b57\u8282\u3002\u76f8\u53cd\uff0c\u5b83\u88ab\u5b9a\u4e49\u4e3a\u5c5e\u4e8e\u4e00\u4e2a\u201c\u6709\u5e8f\u5b57\u7b26\u96c6\u201d\uff0c\u53ef\u4ee5\u662f ISO 8859-1[^ascii] \u6216\u8005 Unicode\uff0c\u53ef\u4ee5\u5bb9\u7eb3\u5c0f\u4e8e\uff0c\u5927\u4e8e\u6216\u7b49\u4e8e 255 \u4e2a\u5b57\u7b26\u3002\u5185\u5b58\u4e2d\uff0c\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u6709\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u8868\u793a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002\u4f46\u7a0b\u5e8f\u5458\u65e0\u987b\u81ea\u5df1\u7ba1\u7406\uff0c\u957f\u5ea6\u5b57\u6bb5\u662f\u7531\u8bed\u8a00\u7684\u8fd0\u884c\u65f6\u800c\u4e0d\u662f\u624b\u5199\u7684\u4ee3\u7801\u6765\u5904\u7406\u7684\u3002\u56e0\u6b64\uff0c\u5b57\u7b26\u4e32\u7d22\u5f15\u8d8a\u754c\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u5b83\u4eec\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u548c\u8fd0\u884c\u65f6\u8f7b\u677e\u7981\u6b62\u3002\u8fd9\u63d0\u5347\u4e86\u5b57\u7b26\u4e32\u7684\u62bd\u8c61\uff1a\u5b83\u4eec\u4e00\u4e2a\u4e2a\u6574\u4f53\uff0c\u5b83\u4eec\u6709\u660e\u786e\u7684\u8fb9\u754c\uff0c\u5b83\u4eec\u9700\u8981\u7279\u6b8a\u7684\u652f\u6301\u4ee3\u7801\u6765\u5904\u7406\u5185\u5b58\u4e2d\u7684\u957f\u5ea6\u5b57\u6bb5\u3002\u8fdb\u4e00\u6b65\u8bf4\uff0cPascal \u8fd8\u6709**\u96c6\u5408**\u7c7b\u578b\uff0c\u4f8b\u5982\uff1a\\n\\n[^ascii]: \u4e00\u79cd ASCII \u7801\u7684\u62d3\u5c55\uff0c\u53c2\u52a0\u6211\u7684[\u53e6\u4e00\u7bc7\u535a\u5ba2](./ascii.md)\u3002\\n\\n```pascal\\nvar\\n    JanuaryDays : set of 1..31;\\n```\\n\\n\u4e5f\u8bb8 Pascal \u5728\u771f\u5b9e\u4e16\u754c\u4e2d\u7684\u5e94\u7528\u6ca1\u6709\u5982\u9884\u671f\u822c\u6210\u529f\u3002\u56e0\u800c\u5b83\u540e\u6765\u4e5f\u5b9a\u4e49\u4e86 *PChar*\uff0c\u5373\u4e00\u4e2a\u4ee5 NULL \u7ed3\u5c3e[^NULL]\u7684\u6307\u5411\u5b57\u7b26\u5e8f\u5217\u7684\u6307\u9488\uff0c\u7c7b\u4f3c\u4e8e C \u5b57\u7b26\u4e32\u3002\u7136\u800c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cPascal \u7684\u6307\u9488\u7c7b\u578b\u662f\u6c38\u6052\u4e0d\u53d8\u3001\u4e0d\u80fd\u88ab\u8f6c\u6362\u7684\uff1a\u5728 Pascal \u4e2d\uff0c\u6307\u5411\u6574\u6570\u7684\u6307\u9488*\u603b\u662f*\u6307\u5411\u6574\u6570\u7684\u6307\u9488\u3002\\n\\n[^NULL]: \u539f\u6587\u6709\u8bef\uff0c\u5e94\u8be5\u662f\u4ee5 NUL \u7ed3\u5c3e\uff08NUL-terminated\uff09\u800c\u4e0d\u662f NULL\u3002NUL \u662f\u7a7a\u5b57\u7b26\uff08\u5373 `\'\\\\0\'`\uff09\uff0c\u800c NULL \u662f\u7a7a\u6307\u9488\u3002\\n\\n\u4ece Wirth \u7684\u89d2\u5ea6\u6765\u770b\uff0cC \u8bed\u8a00 \u201c\u662f\u4e00\u6b21\u5de8\u5927\u7684\u5012\u9000\u201d[^leap]\uff0c\u4ed6\u8868\u793a\u201c\u5b83\u63ed\u793a\u4e86\u5927\u90e8\u5206\u4eba\u51e0\u4e4e\u6ca1\u6709\u638c\u63e1\u2018\u9ad8\u7ea7\u8bed\u8a00\u2019\u8fd9\u4e2a\u672f\u8bed\u7684\u771f\u6b63\u542b\u4e49\uff0c\u4f7f\u4e4b\u53d8\u6210\u4e86\u4e00\u4e2a\u88ab\u8bef\u89e3\u7684\u9ed1\u8bdd\u201d\u3002\u4ed6\u5c06\u95ee\u9898\u5f52\u548e\u4e8e Unix\uff0c\u4ed6\u8bf4 Unix \u201c\u50cf\u4e00\u4e2a\u7279\u6d1b\u4f0a\u6728\u9a6c[^trojan]\u4e00\u6837\u5f15\u5165\u4e86 C \u8bed\u8a00\u201d\u3002\u4ed6\u8fdb\u4e00\u6b65\u8be6\u7ec6\u8bf4\u660e\u4e86 C \u7684\u5b9e\u9645\u6280\u672f\u95ee\u9898\uff1a\\n\\n[^leap]: \u539f\u6587\u662f great leap backward\uff0c\u76f4\u8bd1\u4e3a\u201c\u5927\u8dc3\u9000\u201d\uff0cGoogle \u53ef\u77e5\u8be5\u8bcd\u6709\u7279\u6b8a\u542b\u4e49\u672c\u8be5\u76f4\u8bd1\uff0c\u4f46\u8fd9\u91cc\u4e3a\u4e86\u548c\u8c10\u4ecd\u7136\u610f\u8bd1\u3002\\n\\n[^trojan]: \u7279\u6d1b\u4f0a\u6728\u9a6c\u662f\u8457\u540d\u7684\u5e0c\u814a\u795e\u8bdd\u6545\u4e8b\u3002\u5927\u81f4\u4e3a\u5185\u5bb9\u4e3a\uff0c\u5e0c\u814a\u4eba\u6253\u9020\u4e86\u4e00\u53ea\u5de8\u5927\u7684\u6728\u9a6c\uff0c\u91cc\u9762\u8eb2\u8457\u4f0f\u5175\u5e76\u4f6f\u88c5\u6492\u9000\uff0c\u8ba9\u7279\u6d1b\u4f0a\u4eba\u5c06\u5176\u5f53\u4f5c\u6218\u5229\u54c1\u5e26\u56de\u57ce\u5185\uff0c\u501f\u6b64\u653b\u5165\u7279\u6d1b\u4f0a\u57ce\u3002\u8fd9\u91cc\u662f\u6bd4\u55bb C \u8bed\u8a00\u662f\u85cf\u8eab\u5728 Unix \u8fd9\u4e2a\u7279\u6d1b\u4f0a\u6728\u9a6c\u4e2d\u7684\u5e0c\u814a\u4eba\uff0c\u201c\u653b\u9677\u201d\u4e86\u9ad8\u7ea7\u8bed\u8a00\u8fd9\u5ea7\u201c\u57ce\u6c60\u201d\u3002\\n\\n> C \u8bed\u8a00\u770b\u4e0a\u53bb\u63d0\u4f9b\u4e86\u4e00\u4e9b\u62bd\u8c61\uff0c\u5b9e\u9645\u4e0a\u5374\u5e76\u6ca1\u6709\uff1a\u6570\u7ec4\u6ca1\u6709\u7d22\u5f15\u68c0\u67e5\uff0c\u6570\u636e\u7c7b\u578b\u6ca1\u6709\u4e00\u81f4\u6027\u68c0\u67e5\uff0c\u6307\u9488\u4ec5\u4ec5\u662f\u53ef\u4ee5\u8fdb\u884c\u52a0\u6cd5\u548c\u51cf\u6cd5\u7684\u5730\u5740\u3002\u4eba\u4eec\u6216\u8bb8\u4f1a\u628a C \u8bed\u8a00\u5f52\u7c7b\u4e3a\u8bef\u5bfc\u6027\u7684\uff0c\u751a\u81f3\u662f\u5371\u9669\u7684\u8bed\u8a00\u3002\\n\\n\u4ed6\u7684\u6709\u5173 C \u8bed\u8a00\u7f3a\u4e4f\u7d22\u5f15\u68c0\u67e5\u7684\u89c2\u70b9\u5c24\u5176\u91cd\u8981\uff1a\u8fd9\u53ef\u4ee5\u4e0a\u5347\u5230 C \u8bed\u8a00\u662f\u5426\u771f\u7684\u662f\u4e00\u95e8\u9ad8\u7ea7\u8bed\u8a00\u7684\u95ee\u9898\u4e0a\u6765\u3002\u5b83\u5e76\u6ca1\u6709\u5b8c\u5168\u62bd\u8c61\u6389\u5904\u7406\u6570\u7ec4\u7684\u673a\u5668\u7ec6\u8282\u3002\u8bed\u8a00\u7406\u8bba\u5bb6\u6709\u65f6\u4f1a\u628a C \u79f0\u4e3a\u201c\u4e00\u4e2a\u5de8\u5927\u7684\u5b8f\u6c47\u7f16\u5668\u201d\uff0c\u552f\u4e00\u62bd\u8c61\u6389\u7684\u5c31\u662f\u539f\u59cb\u6307\u4ee4\u96c6\u800c\u5df2\u3002\\n\\n\u7136\u800c Wirth \u4e5f\u627f\u8ba4 C \u8bed\u8a00\u5438\u5f15\u4eba\u7684\u65b9\u9762\uff1a\\n\\n> \u5927\u591a\u6570\u4eba\u2014\u2014\u5c24\u5176\u662f\u5b66\u672f\u754c\u2014\u2014\u8ba4\u4e3a C \u8bed\u8a00\u65e2\u5f15\u4eba\u5165\u80dc\uff0c\u53c8\u201c\u6bd4\u6c47\u7f16\u4ee3\u7801\u66f4\u80dc\u4e00\u7b79\u201d[^better]\u3002\uff08...\uff09\u5b83\u7684\u89c4\u5219\u53ef\u4ee5\u88ab\u8f7b\u6613\u5730\u6253\u7834\uff0c\u800c\u8fd9\u6b63\u662f\u8bb8\u591a\u7a0b\u5e8f\u5458\u6240\u73cd\u89c6\u7684\u3002\u901a\u8fc7\u5b83\uff0c\u7a0b\u5e8f\u5458\u80fd\u64cd\u63a7\u8ba1\u7b97\u673a\u7684\u6240\u6709\u5e95\u5c42\u7279\u6027\uff0c\u5c24\u5176\u662f\u90a3\u4e9b\u88ab\u9ad8\u7ea7\u8bed\u8a00\u59a5\u5584\u9690\u85cf\u8d77\u6765\u7684\u7ec6\u8282\u3002C \u8bed\u8a00\u8d4b\u4e88\u7a0b\u5e8f\u5458\u81ea\u7531\uff0c\u800c\u9ad8\u7ea7\u8bed\u8a00\u7684\u6559\u6761\u5219\u88ab\u89c6\u4e3a\u5f3a\u52a0\u4e14\u591a\u4f59\u7684\u201c\u7d27\u8eab\u8863\u201d\u3002\u8fd9\u65e0\u5f02\u4e8e\u662f\u5728\u9f13\u52b1\u5f00\u53d1\u8005\u6cbf\u7528\u65e9\u671f\u8ba1\u7b97\u673a\u65f6\u4ee3\u4e3a\u8ffd\u6c42\u6548\u7387\u800c\u4e0d\u5f97\u4e0d\u91c7\u7528\u7684\u5e95\u5c42\u6280\u5de7\u3002\\n\\n[^better]: \u539f\u6587\u662f found it intriguing and \u201cbetter than assembly code\u201d\uff0c\u6839\u636e\u4e0a\u4e0b\u6587\uff0c\u6211\u63a8\u6d4b\u662f\u6307 C \u8bed\u8a00\u80fd\u8ba9\u4eba\u63a5\u8fd1\u5e95\u5c42\uff0c\u4f46\u662f\u53c8\u6ca1\u6709\u6c47\u7f16\u8bed\u8a00\u90a3\u4e48\u5e95\u5c42\u3002\\n\\n\u6211\u4eec\u80fd\u7406\u89e3\u4e3a\u4f55\u9762\u5411\u6548\u7387\u7684\u64cd\u4f5c\u7cfb\u7edf\u5185\u6838\uff08\u5982 Linux\uff09\u4f1a\u503e\u5411\u4e8e\u4f7f\u7528 C \u8bed\u8a00\u3002\\n\\n\u7136\u800c\u8fd9\u4e9b\u6280\u5de7\u5e76\u6ca1\u6709\u968f\u7740\u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u6210\u719f\u800c\u6d88\u5931\u3002\u5c31\u5728\u524d\u51e0\u5929\uff0c\u6211\u4e3a Linux \u5199[\u8865\u4e01](https://lore.kernel.org/lkml/20220725085822.2360234-1-linus.walleij@linaro.org/)\u65f6\u5199\u51fa\u4e86\u4e24\u6bb5\u76f8\u4f3c\u7684\u4ee3\u7801\u2014\u2014\u5176\u5b9e\u53ea\u9700\u8981\u628a\u5176\u4e2d\u4e00\u4e2a `(const void *)` \u5f3a\u5236\u8f6c\u6362\u4e3a `(void *)` \u5c31\u80fd\u6d88\u9664\u3002\u540e\u6765\u6211\u5728[\u4fee\u8ba2\u7248\u7684\u8865\u4e01](https://lore.kernel.org/lkml/20220725141036.2399822-1-linus.walleij@linaro.org/)\u7684\u63d0\u4ea4\u6d88\u606f\u4e2d\u8fd8\u8c03\u4f83\u4e86\u6b64\u4e8b\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4e4b\u6240\u4ee5\u8981\u8fdd\u53cd\u89c4\u5219\uff0c\u5176\u5b9e\u662f\u8fd9\u662f\u4e24\u5bb3\u76f8\u6743\u53d6\u5176\u8f7b\u2014\u2014\u5230\u5e95\u662f\u9009\u5f62\u5f0f\u6b63\u786e\u8fd8\u662f\u9009\u4ee3\u7801\u590d\u7528\uff1f\u6211\u9009\u62e9\u4e86\u4ee3\u7801\u590d\u7528\u3002C \u8bed\u8a00\u5141\u8bb8\u8fd9\u79cd\u9009\u62e9\u3002\u540e\u9762\u4ecb\u7ecd\u7684\u8bed\u8a00*\u7edd\u5bf9\u4e0d\u5141\u8bb8*\u8fd9\u79cd\u9009\u62e9\uff0c\u800c C \u8bed\u8a00\u7684\u5f3a\u5236\u8f6c\u6362\u5219\u88ab\u89c6\u4e3a\u4e00\u79cd\u53ef\u618e\u7684\u884c\u4e3a\u3002\\n\\n\u5305\u62ec C \u8bed\u8a00\u548c Pascal \u5728\u5185\u7684\u8bed\u8a00\u5bb6\u65cf\u88ab\u79f0\u4e3a[*\u547d\u4ee4\u5f0f\u7f16\u7a0b\u8bed\u8a00*](https://en.wikipedia.org/wiki/Imperative_programming)\uff08imperative programming language\uff09\u3002\u5b83\u4eec\u51b3\u5b9a\u6027\u7684\u7279\u5f81\u662f\u8ba9\u7a0b\u5e8f\u5458\u201c\u50cf\u8ba1\u7b97\u673a\u4e00\u6837\u601d\u8003\u201d\uff0c\u6216\u8005\u66f4\u786e\u5207\u5730\u8bf4\uff0c\u60f3\u8c61\u81ea\u5df1\u5c31\u662f\u7a0b\u5e8f\u8ba1\u6570\u5668\u3002\u201c\u9996\u5148\u6211\u505a\u8fd9\u4e2a\uff0c\u63a5\u7740\u6211\u505a\u8fd9\u4e2a\uff0c\u7136\u540e\u6211\u505a\u8fd9\u4e2a\u201d\u2014\u2014\u4e00\u7cfb\u5217\u987a\u5e8f\u6267\u884c\u7684\u8bed\u53e5\uff0c\u5728\u8111\u6d77\u4e2d\u4fdd\u6301\u7740\u8ba1\u7b97\u673a\u7684*\u72b6\u6001*\uff08\u4f8b\u5982\u5bc4\u5b58\u5668\u3001\u5185\u5b58\u4f4d\u7f6e\u548c\u5806\u6808\uff09\u3002\\n\\n\u8fd9\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u7a0b\u5e8f\u5458\u6700\u76f4\u63a5\u7684\u5438\u5f15\u529b\u4e0d\u8a00\u800c\u55bb\uff1a\u8fd9\u79cd\u8bed\u8a00\u51e0\u4e4e\u5b8c\u7f8e\u5951\u5408\u4e86\u7cfb\u7edf\u5f00\u53d1\u8005\u9700\u8981\u65f6\u523b\u5173\u6ce8\u7684\u6240\u6709\u8981\u7d20\u2014\u2014\u5bc4\u5b58\u5668\u3001\u5806\u6808\u3001\u7f13\u5b58\u5e27\u3001\u5185\u5b58\u7ba1\u7406\u5355\u5143\uff08MMU\uff09\u8868\u3001\u786c\u4ef6\u72b6\u6001\u8f6c\u6362\u7b49\u7b49\u3002\u6211\u4eec\u751a\u81f3\u53ef\u4ee5\u5c06\u6574\u4e2a\u547d\u4ee4\u5f0f\u8bed\u8a00\u5bb6\u65cf\u89c6\u4e3a\u4e13\u4e3a\u64cd\u4f5c\u7cfb\u7edf\u5f00\u53d1\u800c\u8bbe\u8ba1\u7684[*\u9886\u57df\u7279\u5b9a\u8bed\u8a00*](https://en.wikipedia.org/wiki/Domain-specific_language)\uff08DSL\uff09\uff0c\u5c31\u50cf OpenGL \u4e4b\u4e8e\u8ba1\u7b97\u673a\u56fe\u5f62\u8f6f\u4ef6\u5f00\u53d1\u8005\u7684\u5730\u4f4d\u4e00\u822c\u3002\\n\\n## \u7528 Lambda \u6f14\u7b97[^lambda]\u5b9a\u4e49\u8bed\u8a00\\n\\n[^lambda]: \u53c2\u89c1\u6211\u7684[\u53e6\u4e00\u7bc7\u535a\u5ba2](https://yaossg.com/site/docs/lambda)\u3002\\n\\n1966 \u5e74\uff0cALGOL \u6700\u65e9\u7684\u4f7f\u7528\u8005\u548c\u8d21\u732e\u8005\u4e4b\u4e00\uff08\u4e0e Peter Naur\u3001Tony Hoare\u3001Niklaus Wirth \u6709\u76f8\u540c\u5730\u4f4d\u7684\uff09[Peter Landin](https://en.wikipedia.org/wiki/Peter_Landin)\uff0c\u53d1\u5e03\u4e86\u4e24\u7bc7 ACM \u671f\u520a\u7684\u6587\u7ae0\uff0c\u9898\u4e3a\u300aALGOL 60 \u4e0e Church \u7684 Lambda \u8bb0\u53f7\u4e4b\u95f4\u7684\u5173\u8054\u300b [\u7b2c\u4e00\u90e8\u5206](https://fi.ort.edu.uy/innovaportal/file/20124/1/22-landin_correspondence-between-algol-60-and-churchs-lambda-notation.pdf) \u548c [\u7b2c\u4e8c\u90e8\u5206](https://dl.acm.org/doi/10.1145/363791.363804)\u3002\u5176\u4e2d\u7b2c\u4e00\u7bc7\u6587\u7ae0\u4ee5\u98ce\u8da3\u7684\u51b7\u7b11\u8bdd\u5f00\u5934\uff1a\\n\\n> \u4efb\u4f55\u540c\u65f6\u719f\u6089 ALGOL 60 \u548c Church \u7684 \u03bb \u8bb0\u53f7\u7684\u4eba\u90fd\u4f1a\u6ce8\u610f\u5230\uff0c\\n>\\n> \u5728\u4e00\u5806 \u03bb \u8868\u8fbe\u5f0f\u4e2d\uff0c\u53d8\u91cf\u4e0e \u03bb \u7684\u7ed1\u5b9a\u65b9\u5f0f \\n>\\n> \u4e0e \\n> \\n> \u5728\u4e00\u5806\u8fc7\u7a0b\u548c\u4ee3\u7801\u5757\u4e2d\uff0c\u6807\u8bc6\u7b26\u4e0e\u6807\u9898\u7684\u7ed1\u5b9a\u65b9\u5f0f[^algol]\\n>\\n> \u6709\u7740\u6d45\u663e\u7684\u76f8\u4f3c\u4e4b\u5904\u3002\\n\\n[^algol]: ALGOL \u8bed\u8a00\u4e2d\u7684\u8fc7\u7a0b\uff08procedure\uff09\u548c\u6807\u9898\uff08heading\uff09\u76f8\u5f53\u4e8e\u73b0\u4ee3\u8bed\u8a00\u4e2d\u6240\u8bf4\u7684\u51fd\u6570\uff08function\uff09\u548c\u51fd\u6570\u58f0\u660e\uff08function declaration\uff09\u3002\\n\\n\u5f53\u7136\uff0c\u4ed6\u5fc3\u91cc\u5176\u5b9e\u5f88\u6e05\u695a\uff0c\u8fd9\u4e16\u4e0a\u9664\u4e86\u4ed6\u81ea\u5df1\uff0c\u518d\u6ca1\u4eba\u80fd\u770b\u900f\u8fd9\u4e00\u70b9\uff1a\u65e2\u7cbe\u901a [Alonzo Church](https://en.wikipedia.org/wiki/Alonzo_Church) \u7684 \u03bb \u6f14\u7b97*\u53c8*\u719f\u6089 ALGOL 60 \u7684\u4eba\uff0c\u5168\u7403*\u60ca\u4eba\u5730*\u4ec5\u6b64\u4e00\u4eba\u3002\u66f4\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u5c45\u7136\u771f\u7684\u5b58\u5728\u8fd9\u4e48\u4e2a\u4eba\u3002\\n\\nAlonzo Church \u662f\u4e00\u4e2a\u6570\u7406\u903b\u8f91\u548c\u53ef\u8ba1\u7b97\u6027\u65b9\u9762\u7684\u5b66\u8005\uff0c\u4ed6\u662f Alan Turing[^turing] \u535a\u58eb\u8bba\u6587\u7684\u5bfc\u5e08\uff0c\u5e76\u4e14\u4e0e Kurt G\xf6del[^godel] \u6d3b\u8dc3\u4e8e\u540c\u4e00\u9886\u57df\uff08\u8fd9\u51e0\u4f4d\u5927\u4f6c\u5728\u5404\u81ea\u7684\u6587\u7ae0\u4e2d\u4e92\u76f8\u5f15\u7528\uff09\u3002lambda \u6f14\u7b97\u4e0e Bertrand Russell[^russell] \u521b\u5efa\u7684\u7c7b\u578b\u96c6\u5408\u8bba\u4ee5\u53ca\u201c\u903b\u8f91\u2014\u6570\u5b66\u7eb2\u9886\u201d[^LMP]\u5bc6\u5207\u76f8\u5173\uff0c\u8fd9\u662f\u53e6\u4e00\u4e2a\u9886\u57df\u7684\u5386\u53f2\uff0c\u8fd9\u91cc\u6211\u4eec\u5c31\u4e0d\u5c55\u5f00\u8ba8\u8bba\u4e86\u3002\\n\\n[^turing]: \u963f\u5170\xb7\u56fe\u7075\uff08[Alan Turing](https://en.wikipedia.org/wiki/Alan_Turing)\uff09\u662f\u82f1\u56fd\u6570\u5b66\u5bb6\u3001\u903b\u8f91\u5b66\u5bb6\u548c\u5bc6\u7801\u5b66\u5bb6\uff0c\u88ab\u8a89\u4e3a\u8ba1\u7b97\u673a\u79d1\u5b66\u4e4b\u7236\u3002\u4ed6\u63d0\u51fa\u4e86\u56fe\u7075\u673a\u7684\u6982\u5ff5\uff0c\u5e76\u5728\u4e8c\u6218\u671f\u95f4\u6210\u529f\u7834\u89e3\u4e86\u5fb7\u56fd\u7684\u6069\u5c3c\u683c\u739b\u5bc6\u7801\u3002\u56fe\u7075\u6d4b\u8bd5\u662f\u4ed6\u63d0\u51fa\u7684\u4e00\u4e2a\u7528\u4e8e\u5224\u65ad\u673a\u5668\u662f\u5426\u5177\u6709\u4eba\u7c7b\u667a\u80fd\u7684\u6807\u51c6\u3002\\n\\n[^godel]: \u5e93\u5c14\u7279\xb7\u54e5\u5fb7\u5c14\uff08[Kurt G\xf6del](https://en.wikipedia.org/wiki/Kurt_G%C3%B6del)\uff09\u662f\u5965\u5730\u5229\u6570\u5b66\u5bb6\u548c\u903b\u8f91\u5b66\u5bb6\uff0c\u4ee5\u5176\u5728\u6570\u7406\u903b\u8f91\u548c\u96c6\u5408\u8bba\u65b9\u9762\u7684\u8d21\u732e\u800c\u95fb\u540d\u3002\u4ed6\u6700\u8457\u540d\u7684\u6210\u5c31\u662f\u54e5\u5fb7\u5c14\u4e0d\u5b8c\u5907\u6027\u5b9a\u7406\uff0c\u8bc1\u660e\u4e86\u5728\u4efb\u4f55\u8db3\u591f\u5f3a\u5927\u7684\u516c\u7406\u7cfb\u7edf\u4e2d\uff0c\u603b\u5b58\u5728\u65e0\u6cd5\u88ab\u8bc1\u660e\u6216\u53cd\u9a73\u7684\u547d\u9898\u3002\\n\\n[^russell]: \u4f2f\u7279\u5170\xb7\u7f57\u7d20\uff08[Bertrand Russell](https://en.wikipedia.org/wiki/Bertrand_Russell)\uff09\u662f\u82f1\u56fd\u8457\u540d\u7684\u54f2\u5b66\u5bb6\u3001\u903b\u8f91\u5b66\u5bb6\u548c\u6570\u5b66\u5bb6\uff0c\u56e0\u5176\u5728\u6570\u7406\u903b\u8f91\u548c\u96c6\u5408\u8bba\u65b9\u9762\u7684\u8d21\u732e\u800c\u95fb\u540d\u3002\u4ee5\u4ed6\u540d\u5b57\u547d\u540d\u7684\u7f57\u7d20\u6096\u8bba\u662f\u4ed6\u5728\u96c6\u5408\u8bba\u65b9\u9762\u7684\u4e00\u4e2a\u91cd\u8981\u8d21\u732e\uff0c\u63ed\u793a\u4e86\u67d0\u4e9b\u96c6\u5408\u7684\u81ea\u6307\u6027\u95ee\u9898\u3002\\n\\n[^LMP]: \u903b\u8f91\u2014\u6570\u5b66\u7eb2\u9886\uff08\u539f\u6587\uff1alogical-mathematical programme\uff09\uff0c\u662f\u6307\u4e00\u79cd\u8bd5\u56fe\u5c06\u6570\u5b66\u548c\u903b\u8f91\u7ed3\u5408\u8d77\u6765\u7684\u7406\u8bba\u6846\u67b6\uff0c\u65e8\u5728\u901a\u8fc7\u5f62\u5f0f\u5316\u7684\u65b9\u6cd5\u6765\u7406\u89e3\u548c\u89e3\u51b3\u6570\u5b66\u95ee\u9898\u3002\\n\\n\u03bb \u6f14\u7b97\uff08Lambda \u6f14\u7b97\uff09\u4e4b\u4e8e\u7f16\u7a0b\u8bed\u8a00\u5b9a\u4e49\uff0c\u5c31\u597d\u6bd4\u6b63\u5219\u8868\u8fbe\u5f0f\u4e4b\u4e8e\u8bed\u8a00*\u8bed\u6cd5*\uff08syntax\uff09\u4e00\u6837\uff0c\u4e0d\u8fc7\u5b9a\u4e49\u7684\u662f*\u8bed\u4e49*\uff08semantics\uff09\u3002\u6b63\u5219\u8868\u8fbe\u5f0f\u53ef\u4ee5\u7528\u6b63\u5219\u7684\u8bed\u6cd5\u8868\u8fbe\u5982\u4f55\u89e3\u6790\u4e00\u6bb5\u6587\u672c\uff0c\u03bb \u6f14\u7b97\u7684\u8868\u8fbe\u5f0f\u5728\u62bd\u8c61\u8bed\u6cd5\u6811\uff08AST\uff09\u7684\u57fa\u7840\u4e0a\u66f4\u8fdb\u4e00\u6b65\uff0c\u8868\u793a\u4ec0\u4e48\u662f\u52a0\u6cd5\u3001\u4ec0\u4e48\u662f\u51cf\u6cd5\uff0c\u6216\u4ec0\u4e48\u662f\u6309\u4f4d\u6216\u3002\u8fd9\u6837\u7684\u7ec3\u4e60\u5728\u8bf8\u5982\u7f16\u8bd1\u5668\u6784\u9020\u7684\u8bfe\u7a0b\u4e2d\u5f88\u5c11\u5f97\u5230\u5b9e\u8df5\uff0c\u4f46\u5176\u5b9e\u5b9a\u4e49\u8bed\u4e49\u624d\u662f\u7f16\u7a0b\u8bed\u8a00\u5b9a\u4e49\u7684\u5185\u5728\u90e8\u5206\u3002\\n\\n\u4e5f\u8bb8\u5728 Landin \u7684\u8bba\u6587\u4e2d\uff0c\u6700\u4e3a\u4eba\u6240\u719f\u77e5\u7684\u662f\u5e7d\u9ed8\u7684[*\u8bed\u6cd5\u7cd6*](https://en.wikipedia.org/wiki/Syntactic_sugar)\u4e00\u8bcd\u2014\u2014\u6307\u90a3\u4e9b\u4e0d\u63d0\u4f9b\u4efb\u4f55\u57fa\u7840\u7279\u6027\u65e0\u6cd5\u8868\u8fbe\u7684\u8bed\u4e49\uff0c\u5374\u53ef\u4ee5\u8ba9\u7a0b\u5e8f\u5458\u751f\u6d3b\u66f4\u8f7b\u677e\u7684\u8bed\u8a00\u7279\u6027\u3002\u8bdd\u53c8\u8bf4\u56de\u6765\uff0c\u8bed\u8a00\u6700\u57fa\u7840\u7684\u6570\u5b66\u7279\u6027\uff0c\u4e0d\u6b63\u662f \u03bb \u6f14\u7b97\u6700\u64c5\u957f\u8868\u8fbe\u7684\u5417\uff1f\\n\\n\u5728 Landin \u7684\u7b2c\u4e00\u7bc7\u7528 \u03bb \u6f14\u7b97\u6765\u5b9a\u4e49 ALGOL \u7684\u6587\u7ae0\u4e2d\uff0c\u6709\u4e00\u4e2a\u503c\u5f97\u6ce8\u610f\u7684\u53d1\u660e\uff0c\u90a3\u5c31\u662f `let` \u548c `where` \u5173\u952e\u5b57\uff0c\u5b83\u4eec\u7528\u6765\u8868\u793a \u03bb \u6f14\u7b97\u7684*\u5e94\u7528\u8868\u8fbe\u5f0f*[^applicable]\u3002\u8fd9\u4e24\u4e2a\u5173\u952e\u5b57\u5728 ALGOL \u4e2d\u5e76\u4e0d\u5b58\u5728\uff0c\u5b83\u4eec\u662f\u7528\u6765\u63cf\u8ff0\u8bed\u8a00\u7684\u8bed\u8a00\uff0c\u6216\u8005\u7528\u4e00\u4e2a\u66f4\u62fd\u7684\u8bcd\uff1a*\u5143\u8bed\u8a00\uff08meta-language\uff09*\u3002\u6211\u4eec\u89c1\u8bc1\u4e86\u4ece \u03bb \u6f14\u7b97\u884d\u751f\u51fa\u65b0\u8bed\u8a00\u7684\u7b2c\u4e00\u6b65\u3002Landin \u5728\u8fd9\u7bc7\u6587\u7ae0\u4e2d\u5e76\u6ca1\u6709\u7ed9\u8fd9\u4e2a\u8bed\u8a00\u8d77\u540d\u5b57\uff0c\u53ea\u662f\u79f0\u4e4b\u4e3a\u201cAE\u201d\u3002AE \u5728\u4e00\u4e2a\u53eb SECD \u7684\u7406\u8bba\u673a\u5668\u4e0a\u6267\u884c\uff0c\u8fd9\u53c8\u662f\u4e00\u4e2a\u50cf Alan Turing \u7684\u201c\u56fe\u7075\u673a\u201d\u4e00\u6837\u7684\u628a\u620f\uff1a\u5c31\u50cf\u6570\u5b66\u5bb6\u8bf4\u7684\u201c\u5047\u8bbe\u6211\u4eec\u6709...\u201d\u4e00\u6837\u3002\u7528 \u03bb \u6f14\u7b97\u5b9a\u4e49 ALGOL \u7684\u5b8c\u6574\u6846\u67b6\u53eb\u505a AE/SECD\u3002\\n\\n[^applicable]: *\u5e94\u7528\u8868\u8fbe\u5f0f*\uff08\u539f\u6587\uff1a*Applicable Expressions*\uff09\u5e94\u8be5\u6307\u7684\u662f \u03bb \u6f14\u7b97\u4e2d\u7684\u5e94\u7528\uff08Application\uff09\uff0c\u5373\u4e00\u4e2a\u51fd\u6570\u5e94\u7528\u4e8e\u4e00\u4e2a\u53c2\u6570\u7684\u8868\u8fbe\u5f0f\uff08\u53ef\u4ee5\u8fd1\u4f3c\u7406\u89e3\u4e3a\u50cf `f(x)` \u8fd9\u6837\u7684\u8868\u8fbe\u5f0f\uff09\u3002\\n\\n## \u51fd\u6570\u5f0f\u7f16\u7a0b[^fp]\\n\\n[^fp]: functional programming \u4e5f\u8bd1\u4f5c\u6cdb\u51fd\u7f16\u7a0b\uff0c\u8fd9\u91cc\u91c7\u7528\u66f4\u5e7f\u4e3a\u63a5\u53d7\u7684\u201c\u51fd\u6570\u5f0f\u7f16\u7a0b\u201d\u3002\\n\\n\u63a5\u7740\uff0c[\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00](https://en.wikipedia.org/wiki/Functional_programming)\uff08functional programming language\uff09*\u5b9e\u73b0*\u4e86 lambda \u6f14\u7b97\u3002\u603b\u7ed3\u4e86\u591a\u5e74\u6765\u4f7f\u7528 lambda \u6f14\u7b97\u6765\u5b9a\u4e49 ALGOL \u7b49\u8bed\u8a00\u7684\u7ecf\u9a8c\uff0c\u5f97\u51fa\u7684\u6838\u5fc3\u601d\u60f3\u662f\uff1a\u53ea\u8981\u8ba9\u8bed\u8a00\u7684\u8bed\u6cd5\u770b\u8d77\u6765\u50cf lambda \u6f14\u7b97\u8868\u8fbe\u5f0f\uff0c\u5c31\u7b97\u662f\u5f00\u4e86\u4e2a\u597d\u5934\uff0c\u8bed\u4e49\u7684\u9a8c\u8bc1\u5c31\u4f1a\u5f88\u7b80\u5355\u660e\u4e86\u3002\\n\\n1966 \u5e74\uff0cPeter Landin \u5728\u4ed6\u7684\u6587\u7ae0[\u300aThe Next 700 Programming Languages\u300b](https://www.cs.cmu.edu/~crary/819-f09/Landin66.pdf)\u4e2d\uff0c\u7ee7\u7eed\u4f7f\u7528 \u03bb \u6f14\u7b97\u6765\u63cf\u8ff0 ALGOL \u7684\u8bed\u6cd5\u548c\u8bed\u4e49\u3002\u6587\u4e2d\u4ed6\u501f\u7531\u4ed6\u63d0\u51fa\u7684\u4e00\u79cd\u540d\u4e3a ISWIM\uff08If You See What I Mean\uff09\u7684\u8bed\u8a00\uff0c\u53d1\u660e\u4e86\u51fd\u6570\u5f0f\u7f16\u7a0b\u7684\u6982\u5ff5\u3002\u5982\u4f60\u6240\u89c1\uff0c\u53c8\u662f\u7ecf\u5178\u7684\u51b7\u7b11\u8bdd\u3002ISWIM \u662f\u4e00\u79cd\u5e26\u6709\u4e00\u4e9b\u201c\u8bed\u6cd5\u7cd6\u201d\u7684 \u03bb \u6f14\u7b97\uff0c\u56e0\u6b64\u53ef\u4ee5\u5728\u8fd9\u4e2a\u6846\u67b6\u7684\u57fa\u7840\u4e0a\u521b\u5efa\u51fa\u8bb8\u591a\u4e0d\u540c\u7684\u8bed\u8a00\u3002Landin \u7684\u6587\u7ae0\u5f15\u8d77\u4e86\u5e7f\u6cdb\u5173\u6ce8\uff0c\u4eba\u4eec\u7684\u786e\u521b\u9020\u4e86\u8bb8\u591a\u8bed\u8a00\uff0c\u4e5f\u8bb8\u6ca1\u6709 700 \u79cd\uff0c\u81f3\u5c11\u76ee\u524d\u6ca1\u6709\u3002\\n\\n\u4ed6\u5728\u6587\u7ae0\u7684\u7b2c\u5341\u8282\u300a\u6d88\u9664\u663e\u5f0f\u5e8f\u5217\u5316\u300b\u4e2d\u5f00\u59cb\u63a8\u6d4b\uff0c\u79f0\u53ef\u4ee5\u7528 ALGOL \u8bed\u8a00\u73a9\u4e00\u79cd\u6e38\u620f\uff1a\u5220\u9664\u6240\u6709 `goto` \u8bed\u53e5\u548c\u6807\u7b7e\uff0c\u8ba9\u7a0b\u5e8f\u53d8\u5f97\u4e0d\u90a3\u4e48\u5e8f\u5217\u5316\uff0c\u5373\u7a0b\u5e8f\u8ba1\u6570\u5668\u53ea\u662f\u8fdb\u5165\u4e0b\u4e00\u884c\u6216\u8fed\u4ee3\u4e00\u4e2a\u5faa\u73af\u3002\u4ed6\u6253\u8da3\u9053\uff1a\\n\\n> \u8fd8\u6709\u4ec0\u4e48\u5176\u5b83\u7c7b\u4f3c\u7684\u7279\u5f81\uff1f\u4e4b\u6240\u4ee5\u8003\u8651\u8fd9\u4e2a\u95ee\u9898\uff0c\u662f\u56e0\u4e3a\u4e8b\u5b9e\u8bc1\u660e\uff0c\u5f3a\u8c03\u7528\u5176\u5b83\u4e8b\u7269\u6765\u63cf\u8ff0\u4e8b\u7269\uff0c\u4e0e\u5f3a\u8c03\u4e0d\u660e\u786e\u7684\u5e8f\u5217\u5316\uff0c\u4f1a\u6beb\u4e0d\u610f\u5916\u7684\u5bfc\u5411\u540c\u6837\u7684\u8981\u6c42\u3002\\n\\n\u4ed6\u63a5\u7740\u5c55\u793a\u4e86\u5982\u4f55\u5c06 ALGOL \u7a0b\u5e8f\u8f6c\u6362\u4e3a\u7eaf\u51fd\u6570\u5f0f\u7684 ISWIM \u7a0b\u5e8f\uff0c\u5e76\u603b\u7ed3\u9053\uff1a\\n\\n> ISWlM[^iswlm] \u7684\u7279\u6b8a\u4e4b\u5904\u5728\u4e8e\uff0c\u5b83\u5c06\u8fc7\u7a0b\u6027\u7684\u6982\u5ff5\u5ac1\u63a5\u5230\u4e00\u4e2a\u7eaf\u7cb9\u7684\u51fd\u6570\u5f0f\u57fa\u5e95\u4e0a\uff0c\u800c\u6ca1\u6709\u7834\u574f\u8bb8\u591a\u7406\u60f3\u7684\u6027\u8d28\u3002 (...) \u672c\u8bba\u6587\u80fd\u505a\u7684\u4e0d\u8fc7\u662f\u8fc8\u51fa\u89e3\u91ca\u5b83\u4eec\u5728\u5b9e\u8df5\u4e2d\u7684\u91cd\u8981\u6027\u7684\u7b2c\u4e00\u6b65\u3002\\n\\n[^iswlm]: \u539f\u6587\u6709\u8bef\uff0c\u5e94\u8be5\u662f ISWIM\u3002\\n\\n\u8fd9\u6bb5\u8bdd\u662f\u5728\u53d1\u8d77\u53f7\u53ec\uff1a\u6211\u4eec\u9700\u8981\u521b\u9020\u51fa\u7c7b\u4f3c\u4e8e ISWIM \u7684\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\uff0c\u5e76\u4e14\u6211\u4eec\u9700\u8981\u53bb\u6389 J \u64cd\u4f5c\u7b26\uff08\u7a0b\u5e8f\u63a7\u5236\u6d41\u64cd\u4f5c\u7b26\uff09[^jop]\u3002Landin \u6ca1\u80fd\u81ea\u5df1\u505a\u5230\u8fd9\u4e00\u70b9\u3002\\n\\n[^jop]: J \u64cd\u4f5c\u7b26\u5728 ALGOL \u8bed\u8a00\u4e2d\u7528\u4e8e\u63a7\u5236\u7a0b\u5e8f\u7684\u6267\u884c\u6d41\u3002\u5b83\u53ef\u4ee5\u6682\u5b58\u7a0b\u5e8f\u7684\u6267\u884c\u72b6\u6001\uff0c\u5e76\u5728\u9700\u8981\u65f6\u6062\u590d\u5230\u8be5\u72b6\u6001\uff08\u8fd9\u79cd\u72b6\u6001\u73b0\u5728\u4e00\u822c\u79f0\u4e3a\u5ef6\u7eed\u4f53 Continuation\uff09\u3002\\n\\n## \u5143\u8bed\u8a00 ML\\n\\n\u82e5\u5e72\u5e74\u540e\uff0c1974 \u5e74\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6 [Robin Milner](https://en.wikipedia.org/wiki/Robin_Milner)\uff0c\u53d7 ISWIM \u542f\u53d1\u5e76\u54cd\u5e94 Landin \u7684\u6311\u6218\uff0c\u521b\u5efa\u4e86\u8bed\u8a00 [**ML**](https://en.wikipedia.org/wiki/ML_(programming_language))\uff0c\u5373 **Meta Language**\uff08\u5143\u8bed\u8a00\uff09\u7684\u7f29\u5199\u3002\u8fd9\u662f 700 \u79cd\u540e\u7eed\u8bed\u8a00\u4e2d\u7684\u4e00\u79cd\uff0c\u5e76\u660e\u786e\u627f\u8ba4 Landin \u5173\u4e8e\u5b9a\u4e49\u8bed\u8a00\u7684\u8bed\u8a00\u3001\u5b9a\u4e49\u8bed\u6cd5\u7684\u8bed\u6cd5\u7684\u60f3\u6cd5\uff1a\u4e00\u4e2a\u6709\u7740*\u5143\u8bed\u6cd5*\u7684*\u5143\u8bed\u8a00*\u3002\\n\\n\u5728 Malcolm Newey\u3001Lockwood Morris\u3001Mike Gordon \u548c Chris Wadswort \u7684\u5e2e\u52a9\u4e0b\uff0c\u4ed6\u5728 DEC10 \u8ba1\u7b97\u673a\u4e0a\u5b9e\u73b0\u4e86\u8fd9\u4e2a\u8bed\u8a00\uff0c\u5e76\u5728\u540e\u6765\u79fb\u690d\u5230\u4e86 VAX \u67b6\u6784\u4e0a\u3002\\n\\n\u8fd9\u4e2a\u8bed\u8a00\u57fa\u4e8e ISWIM\uff0c\u4f46\u53bb\u6389\u4e86\u6240\u8c13\u7684[*J \u64cd\u4f5c\u7b26*](https://en.wikipedia.org/wiki/J_operator) \uff08\u7a0b\u5e8f\u70b9\u64cd\u4f5c\u7b26\uff09\u3002\u5b83\u662f\u4e00\u4e2a\u9886\u57df\u7279\u5b9a\uff08domain-specific\uff09\u8bed\u8a00\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u7f16\u5199[\u4e00\u4e2a\u53eb LCF \u7684\u5b9a\u7406\u8bc1\u660e\u5de5\u5177](https://en.wikipedia.org/wiki/Logic_for_Computable_Functions)\u3002\u6807\u51c6 ML \u5df2\u7ecf\u88ab[\u5b8c\u5168\u8bed\u4e49\u89c4\u8303\u5316](https://smlfamily.github.io/sml97-defn.pdf)\u5e76\u4e14\u7ecf\u8fc7\u5f62\u5f0f\u9a8c\u8bc1\uff0c\u5728\u5b66\u672f\u754c\u548c\u5de5\u4e1a\u754c\u90fd\u5f88\u6d41\u884c\u3002\\n\\n\u79fb\u9664 J \u64cd\u4f5c\u7b26\u8ba9 ML \u6210\u4e3a\u4e86\u4e00\u79cd[\u58f0\u660e\u5f0f\u8bed\u8a00](https://en.wikipedia.org/wiki/Declarative_programming)\uff08declerative programming language\uff09\uff0c\u5373\u5b83\u4e0d\u6307\u5b9a\u8bed\u53e5\u7684\u6267\u884c\u987a\u5e8f\uff0c\u800c\u662f\u6210\u4e3a\u4e86\u7c7b\u4f3c\u4e8e Prolog \u6216\u8005\u8bf4 Makefile \u4e00\u7c7b\u7684\u8bed\u8a00\uff1aMakefile \u4e2d\u6ca1\u6709\u63a7\u5236\u6d41\uff0c\u53ea\u6709\u4e00\u7cfb\u5217\u9700\u8981\u6c42\u89e3\u7684\u6761\u4ef6\uff0c\u4ee5\u5b9e\u73b0\u5230\u4e00\u4e2a\u5b8c\u6574\u7684\u76ee\u6807\u3002\\n\\nML \u4ecd\u7136\u6709\u4e00\u4e2a\u547d\u4ee4\u5f0f\u8bed\u8a00\u7684\u7279\u6027\uff1a\u8d4b\u503c\u3002\u6b64\u65f6\uff0c\u4e00\u4e9b\u5b66\u8005\u8ba4\u4e3a J \u64cd\u4f5c\u7b26\u548c\u8d4b\u503c\u90fd\u662f\u4e0d\u5fc5\u8981\u7684\uff0c\u5e76\u5f00\u59cb\u5b9a\u4e49[\u7eaf\u51fd\u6570\u5f0f\u8bed\u8a00](https://en.wikipedia.org/wiki/Purely_functional_programming)\uff0c\u4f8b\u5982 Haskell\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u4e0d\u8003\u8651\u5b83\u4eec\uff0c\u5b83\u4eec\u8d85\u51fa\u4e86\u672c\u6587\u7684\u8303\u56f4\u3002ML \u548c\u6211\u4eec\u8ba8\u8bba\u7684\u5176\u5b83\u8bed\u8a00\u90fd\u53ef\u4ee5\u6807\u8bb0\u4e3a*\u975e\u7eaf*\uff1a\u7531\u559c\u6b22\u7eaf\u51fd\u6570\u5f0f\u8bed\u8a00\u7684\u4eba\u53d1\u660e\u7684\u4e00\u4e2a\u8d2c\u4e49\u8bcd\u3002\u8fd9\u4e9b\u4eba\u4e0d\u4ec5\u4e0d\u559c\u6b22\u547d\u4ee4\u5f0f\u8bed\u8a00\u7684\u5e8f\u5217\u5316\u79c9\u6027\uff0c\u8fd8\u4e0d\u559c\u6b22\u8d4b\u503c\uff08\u4f8b\u5982\u4f7f\u7528\u5173\u952e\u5b57 `let`\uff09\uff0c\u503e\u5411\u4e8e\u7528\u6c42\u89e3\u62bd\u8c61\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u7684\u65b9\u5f0f\u6765\u601d\u8003\u3002\\n\\nML \u53ef\u4ee5\u51ed\u76f4\u89c9\u7406\u89e3\u3002\u4f8b\u5982\u4e0b\u9762\u7684\u8868\u8fbe\u5f0f\u5728 ML \u4e2d\u8ba1\u7b97\u51fa\u6574\u6570 64\uff1a\\n\\n```ocaml\\nlet\\n    val m : int = 4\\n    val n : int = m*m\\nin\\n    m*n\\nend\\n```\\n\\n\u8fd9\u91cc\u6211\u4eec\u4ecd\u80fd\u591f\u770b\u51fa\u5f88\u663e\u8457\u7684 AE/SECD\uff0cISIWM \u7279\u5f81\uff0c\u4f8b\u5982\u5173\u952e\u5b57 `let` \u7528\u4e8e\u7ed1\u5b9a\u53d8\u91cf\uff0c\u6216\u8005\u8bf4\u5c06\u540d\u79f0\u4e0e\u6574\u6570\u548c\u51fd\u6570\u7b49\u5143\u7d20\u5173\u8054\uff08\u7c7b\u4f3c\u4e8e\u67d0\u4e9b\u8bed\u8a00\u4e2d\u7684 `:=` \u8d4b\u503c\uff09\u3002\u63a5\u4e0b\u6765[^the]\u53ef\u4ee5\u770b\u5230 `in` \u5f15\u5bfc\u7684\u5b9e\u73b0\u533a\u57df\u3002\u6211\u4eec\u53ef\u4ee5\u5728 ML \u4e2d\u5b9a\u4e49\u51fd\u6570\uff0c\u4f8b\u5982\u8ba1\u7b97\u4e94\u500d `x` \u7684\u5e73\u65b9\u6839\uff1a\\n\\n[^the]: \u539f\u6587\u8fd9\u91cc\u662f the\uff0c\u5e94\u8be5\u662f\u4e2a\u7b14\u8bef\uff0c\u8fd9\u91cc\u6309 then \u7ffb\u8bd1\u3002\\n\\n```ocaml\\nval rootfivex : real -> real =\\n    fn x : real => Math.sqrt (5.0 * x)\\n```\\n\\n\u6ce8\u610f\u5230 ML \u6ca1\u6709\u4f7f\u7528 `BEGIN` \u548c `END` \u8fd9\u6837\u7684\u6784\u9020\uff0c\u6216\u8005\u5206\u53f7\uff0c\u8fd9\u4e0e Python \u7b49\u4f7f\u7528\u7a7a\u767d\u5b57\u7b26\u6765\u786e\u5b9a\u57fa\u672c\u5757\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u7684\u8bed\u8a00\u4e00\u81f4\u3002`real -> real` \u7684\u8bb0\u53f7\u6e05\u6670\u5730\u8bf4\u660e\u4e86\u8fd9\u4e2a\u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u5b9e\u6570\u4f5c\u4e3a\u8f93\u5165\uff0c\u5e76\u4ea7\u751f\u4e00\u4e2a\u5b9e\u6570\u4f5c\u4e3a\u8f93\u51fa\u3002`real` \u7684\u540d\u79f0\u53cd\u6620\u4e86\u4e00\u79cd\u6570\u5b66\u4e0a\u7684\u96c4\u5fc3\u3002\u8fd9\u4e2a\u8bed\u8a00\u4e0d\u80fd\u5904\u7406\u6570\u5b66\u610f\u4e49\u4e0a\u7684\u5b9e\u6570\u96c6\u2014\u2014ML \u7684 `real` \u5c31\u662f\u5176\u5b83\u8bed\u8a00\u6240\u79f0\u7684 `float`\u3002\\n\\nML \u6709\u66f4\u591a\u7684\u8bed\u6cd5\u7cd6\uff0c\u6240\u4ee5\u4e0b\u9762\u7684\u5199\u6cd5\u4e0e\u4e0a\u9762\u662f\u7b49\u4ef7\u7684\uff0c\u5176\u4e2d\u4f7f\u7528\u4e86 `fun` \u5173\u952e\u5b57\uff08fun-\u8bb0\u53f7[^fun]\uff09:\\n\\n```ocaml\\nfun rootfivex (x:real):real = Math.sqrt (5.0 * x)\\n```\\n\\n[^fun]: `fun` \u53ef\u4ee5\u8ba4\u4e3a\u662f\u4e00\u4e2a\u53cc\u5173\u8bed\uff0c\u65e2\u662f\u51fd\u6570\u7684\u610f\u601d\uff08\u53d6 function \u7684\u524d\u4e09\u4e2a\u5b57\u6bcd\uff09\uff0c\u53c8\u6709\u201c\u6709\u8da3\u201d\u7684\u610f\u601d\u3002\u5f88\u591a\u7f16\u7a0b\u8bed\u8a00\u90fd\u9009\u7528 `fun` \u4f5c\u4e3a\u51fd\u6570\u7684\u5173\u952e\u5b57\u53ef\u80fd\u90fd\u51fa\u4e8e\u8fd9\u4e2a\u539f\u56e0\u3002\\n\\nML \u7684\u8bed\u6cd5\u5e94\u8be5\u662f\u53ef\u4ee5\u76f4\u89c2\u7406\u89e3\u7684\u3002ML \u548c\u5176\u5b83\u51fd\u6570\u5f0f\u8bed\u8a00\u7684\u53e6\u4e00\u4e2a\u7279\u6027\u662f\u5b83\u4eec\u53ef\u4ee5\u8f7b\u677e\u5730\u64cd\u4f5c*\u5143\u7ec4*\uff0c\u5373\u6709\u5e8f\u7684\u53d8\u91cf\u5e8f\u5217\uff0c\u5143\u7ec4\u4e5f\u53ef\u4ee5\u4ece\u51fd\u6570\u8fd4\u56de\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u7528\u4e0b\u9762\u8fd9\u6837\u7684\u51fd\u6570\u6765\u8ba1\u7b97\u5e73\u9762\u4e2d\u539f\u70b9\u548c\u6307\u5b9a XY \u5750\u6807\u4e4b\u95f4\u7684\u8ddd\u79bb\uff1a\\n\\n```ocaml\\nfun dist (x:real, y:real):real = Math.sqrt (x*x + y*y)\\n```\\n\\n\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u5728\u5176\u5b83\u5730\u65b9\u88ab\u8fd9\u6837\u8c03\u7528\uff1a\\n\\n```ocaml\\nval coor (x:real, y:real)\\nval d = dist(coor)\\n```\\n\\n\u5176\u4e2d `d` \u7684\u7c7b\u578b\u662f `real`\uff0c\u8fd9\u4e00\u70b9\u4f1a\u4ece `dist()` \u51fd\u6570\u7684\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u662f `real` \u4e2d\u63a8\u65ad\u51fa\u6765\u3002\\n\\nML \u8fdc\u6bd4\u4e0a\u9762\u7684\u4f8b\u5b50\u590d\u6742\u5f97\u591a\u3002\\n\\nML \u8bed\u8a00\u6709\u4e00\u4e2a\u5e7f\u53d7\u8d5e\u8a89\u7684\u4f18\u70b9\uff0c\u90a3\u5c31\u662f\u5b83\u7f16\u5199\u7684\u7a0b\u5e8f\u50cf\u5927\u591a\u6570\u51fd\u6570\u5f0f\u8bed\u8a00\u7f16\u5199\u7684\u7a0b\u5e8f\u4e00\u6837\uff0c\u53ef\u4ee5\u5728\u8ba1\u7b97\u610f\u4e49\u4e0a*\u88ab\u8bc1\u660e\u6b63\u786e*\u3002\u8fd9\u53ef\u4ee5\u5728\u67d0\u4e9b\u9650\u5236\u6761\u4ef6\u4e0b\u5b8c\u6210\uff1a\u4f8b\u5982\u8f93\u5165/\u8f93\u51fa\u64cd\u4f5c\u9700\u8981\u88ab\u7cbe\u786e\u6307\u5b9a\uff0c\u54ea\u4e9b\u503c\u4f1a\u662f\u8f93\u5165\uff0c\u54ea\u4e9b\u503c\u4f1a\u5bfc\u81f4\u672a\u5b9a\u4e49\u884c\u4e3a\u53d1\u751f\u3002\\n\\n## CAML \u548c OCaml\\n\\n1987 \u5e74\uff0cAsc\xe1nder Su\xe1rez \u5728\u6cd5\u56fd\u56fd\u5bb6\u4fe1\u606f\u4e0e\u81ea\u52a8\u5316\u7814\u7a76\u6240\uff08INRIA\uff09[\u7528 LISP \u91cd\u65b0\u5b9e\u73b0\u4e86\u4e00\u4e2a ML \u7684\u7f16\u8bd1\u5668\u548c\u8fd0\u884c\u65f6\u7cfb\u7edf](https://caml.inria.fr/about/history.en.html)\uff0c\u5e76\u79f0\u4e4b\u4e3a **CAML**\uff0c\u5373 *Categorical Abstract Machine Language*\uff0c\u8fd9\u662f\u4e00\u4e2a\u53cc\u5173\u8bed\uff0c\u56e0\u4e3a\u5b83\u8fd0\u884c\u5728\u4e00\u4e2a\u865a\u62df\u673a\uff08Category Abstract Machine\uff09\u4e0a\uff0c\u5e76\u4e14\u662f ML \u7684\u540e\u88d4\u3002\u5b83\u4f7f\u7528\u7684\u62bd\u8c61\u673a\u5668\u662f LLM3 \u62bd\u8c61 LISP \u673a\u5668[^machine]\uff0c\u800c\u5b83\u672c\u8eab\u53c8\u8fd0\u884c\u5728\u53e6\u4e00\u53f0\u8ba1\u7b97\u673a\u4e0a\u3002\u5b83\u7684\u901f\u5ea6\u4e0d\u5feb\u3002\\n\\n[^machine]: \u8fd9\u91cc\u63d0\u5230\u7684\u201cLLM3 \u62bd\u8c61 LISP \u673a\u5668\u201d\u662f\u4e00\u79cd\u865a\u62df\u673a\uff0c\u7528\u4e8e\u6267\u884c Lisp \u65b9\u8a00 Le_Lisp \u7528 LLM3 \u7f16\u8bd1\u5668\u751f\u6210\u7684\u7a0b\u5e8f\uff08[\u53c2\u8003\u8d44\u6599](https://www.dreamsongs.com/Files/HOPL2-Uncut.pdf)\uff09\u3002\u8fd9\u91cc\u7684 LLM \u4e0e\u5927\u8bed\u8a00\u6a21\u578b\u65e0\u5173\u3002\\n\\n\u4ece 1990 \u5230 1991 \u5e74\uff0cXavier Leroy \u7528 C \u8bed\u8a00\u91cd\u65b0\u5b9e\u73b0\u4e86 CAML\uff0c\u5e76\u79f0\u4e4b\u4e3a *Caml Light*\u3002\u5b83\u6bd4 CAML \u5feb\uff0c\u56e0\u4e3a\u5b83\u4e0d\u662f\u5728\u8fd0\u884c\u865a\u62df\u673a\u7684\u865a\u62df\u673a\u4e2d\u7f16\u5199\u7684[^vv]\u3002Caml Light \u66f4\u50cf Java\uff0c\u4f7f\u7528\u4e00\u4e2a[\u5b57\u8282\u7801\u89e3\u91ca\u5668](https://en.wikipedia.org/wiki/Bytecode)\u4f5c\u4e3a\u5b83\u7684\u865a\u62df\u673a\u3002\\n\\n[^vv]: \u539f\u6587\u5982\u6b64\uff08because it was not written in a virtual machine running a virtual machine\uff09\u3002\u5408\u7406\u63a8\u65ad\u4f5c\u8005\u672c\u610f\u662f\u6307 CAML \u7684\u865a\u62df\u673a\u8fd0\u884c\u5728 LLM3 \u62bd\u8c61 LISP \u673a\u5668\u4e0a\uff0c\u6709\u4e24\u5c42\u865a\u62df\u673a\uff1b\u800c Caml Light \u7684\u865a\u62df\u673a\u76f4\u63a5\u8fd0\u884c\u5728 C \u8bed\u8a00\u7f16\u5199\u7684\u865a\u62df\u673a\u4e0a\uff0c\u53ea\u6709\u4e00\u5c42\u865a\u62df\u673a\u3002\\n\\n1995 \u5e74\uff0cnative \u7f16\u8bd1\u5668 Caml Special Light \u6a2a\u7a7a\u51fa\u4e16\uff0c\u4ece\u6b64 Caml \u7f16\u8bd1\u5668\u751f\u6210\u7684\u5b57\u8282\u7801\u53ef\u4ee5\u88ab\u7f16\u8bd1\u4e3a\u76ee\u6807\u4ee3\u7801\uff0c\u501f\u52a9 [native *\u8fd0\u884c\u65f6\u73af\u5883*](http://github.com/ocaml/ocaml/tree/trunk/runtime)\uff0c\u5728\u6ca1\u6709\u865a\u62df\u673a\u5f00\u9500\u7684\u60c5\u51b5\u4e0b\u6267\u884c\u3002Didier R\xe9my\u3001J\xe9r\xf4me Vouillon \u548c Jacques Garrigue \u7ee7\u7eed\u7ef4\u62a4 Caml \u7684\u5f00\u53d1\u3002\\n\\n1996 \u5e74\uff0cObjective Caml \u4e3a Caml \u589e\u52a0\u4e86\u4e00\u4e9b\u9762\u5411\u5bf9\u8c61\u7684\u7279\u6027\u30022011 \u5e74\uff0c\u6269\u5c55 Caml Special Light \u7f16\u8bd1\u5668\u548c ML \u7684\u884d\u751f\u8bed\u8a00\uff08\u65b9\u8a00\uff09\u88ab\u91cd\u65b0\u547d\u540d\u4e3a **OCaml**\u3002\u4ece\u672c\u8d28\u4e0a\u8bb2\uff0c\u7f16\u8bd1\u5668\u548c\u8bed\u8a00\u6709\u7740\u5171\u751f\u5173\u7cfb\u3002OCaml \u6ca1\u6709\u7b2c\u4e8c\u4e2a\u5b9e\u73b0\u3002\\n\\n1990 \u5e74\u4ee3\u8d77\uff0c\u73b0\u4ee3\u610f\u4e49\u4e0a\u7684 [OCaml \u8bed\u8a00\u548c\u5b9e\u73b0](https://github.com/ocaml/ocaml)\u5f00\u59cb\u83b7\u5f97\u5173\u6ce8\u3002\u5b83\u662f\u4e00\u79cd\u975e\u5e38\u6d41\u884c\u7684\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\uff0c\u6216\u8005\u8bf4\uff0c\u5728\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7b97\u5f88\u6d41\u884c\u7684\u90a3\u79cd\u3002\u5b83\u6709\u9488\u5bf9\u5927\u591a\u6570\u67b6\u6784\u7684[\u4f18\u5316\u5b9e\u73b0](https://github.com/ocaml/ocaml/tree/trunk/asmcomp)\u3002\u7f16\u8bd1\u5668\u672c\u8eab\u73b0\u5728\u4e3b\u8981\u662f\u7528 OCaml \u7f16\u5199\u7684\uff0c\u4f46\u8fd0\u884c\u65f6\u4ecd\u7136\u4f7f\u7528 C \u8bed\u8a00\uff0c\u4ee5\u4fbf\u4e0e\u6700\u7ec8\u8fd0\u884c\u7a0b\u5e8f\u7684\u5404\u4e2a\u64cd\u4f5c\u7cfb\u7edf\u8fde\u63a5\u3002OCaml \u8bed\u8a00\u548c\u7f16\u8bd1\u5668\u5df2\u7ecf\u88ab\u7528\u4e8e\u5404\u79cd\u5e94\u7528\u7a0b\u5e8f\u3002\u6bcf\u4e2a\u4e3b\u8981\u7684 Linux \u53d1\u884c\u7248\u90fd\u643a\u5e26 OCaml \u7f16\u8bd1\u5668\u548c\u5e93\u7684\u5305\u3002\u751a\u81f3\u8fd8\u6709[\u4e00\u4e2a GTK+ 3 \u7684 OCaml \u5e93\u7ed1\u5b9a](https://garrigue.github.io/lablgtk/)\uff0c\u6240\u4ee5\u53ef\u4ee5\u521b\u5efa OCaml GUI \u7a0b\u5e8f\u3002\\n\\nOCaml \u7b80\u5316\u4e86\u7ed1\u5b9a\u6807\u7b7e\u5230\u6570\u5b57\u7b49\u64cd\u4f5c\uff0c\u8fd9\u662f\u7528 OCaml \u5b9e\u73b0\u7684\u5192\u6ce1\u6392\u5e8f\uff1a\\n\\n```ocaml\\n(* Bubblesort in OCaml, Linus Walleij 2022 *)\\nlet sort v =\\n  let newv = Array.make (Array.length v) 0 in\\n  for i = 1 to (Array.length v) - 1 do\\n    if v.(i - 1) > v.(i) then begin\\n      newv.(i - 1) <- v.(i);\\n      newv.(i) <- v.(i - 1);\\n      (* Copy back so we are working on the same thing *)\\n      v.(i - 1) <- newv.(i - 1);\\n      v.(i) <- newv.(i);\\n    end else begin\\n      newv.(i - 1) <- v.(i - 1);\\n      newv.(i) <- v.(i);\\n    end\\n  done;\\n  newv\\n\\nlet rec ordered v =\\n  if Array.length v = 0 then true\\n  else if Array.length v = 1 then true\\n  (* ... or if the rest of the array is ordered *)\\n  else if v.(0) < v.(1) && ordered (Array.sub v 1 (Array.length v - 1)) then true\\n  else false;;\\n\\nlet plist v =\\n  print_string \\"V = \\";\\n  for i = 0 to (Array.length v) - 1 do begin\\n    print_int v.(i);\\n    if i < (Array.length v - 1) then print_string \\",\\";\\n    end\\n  done;\\n  print_endline \\"\\";;\\n\\nlet rec sortme v =\\n  if ordered v then v\\n  else sortme (sort v);;\\n\\nlet v = [| 14 ; 4 ; 55 ; 100 ; 11 ; 29 ; 76 ; 19 ; 6 ; 82 ; 99 ; 0 ; 57 ; 36 ; 61 ; 30 |];;\\nplist v;;\\nplist (sortme v);;\\n```\\n\\n\u6211\u7f16\u5199\u8fd9\u4e2a\u4f8b\u5b50\u5e26\u6765\u7684\u611f\u53d7\u662f\uff0cOCaml \u5bf9\u4e8e\u901a\u8fc7\u7d22\u5f15\u6765\u4fee\u6539\u6570\u7ec4\u5185\u5bb9\u6709\u70b9\u201c\u62b5\u89e6\u201d\u3002\u5b83\u201c\u4e0d\u559c\u6b22\u201d\u4efb\u4f55\u547d\u4ee4\u5f0f\u7684\u6784\u9020\uff0c\u5e76\u4e14\u6709\u70b9\u50cf\u5728\u8098\u4f60[^nudge]\u5411\u7740\u7eaf\u903b\u8f91\u7684\u6784\u9020\u65b9\u5411\u524d\u8fdb\uff0c\u6bd4\u5982\u4e0a\u9762\u7684 `ordered` \u51fd\u6570\u3002\u8fd9\u53ea\u662f\u6211\u4e2a\u4eba\u7684\u770b\u6cd5\u3002\\n\\n[^nudge]: \u539f\u6587\u662f nudge\uff0c\u610f\u4e3a\u201c\u8f7b\u63a8\u3001\u8098\u51fb\u201d\u3002\\n\\nOCaml \u4ecd\u7136\u662f ML \u7684\u4e00\u4e2a\u65b9\u8a00\u3002\u6240\u6709\u6587\u4ef6\u7684\u540e\u7f00\u540d\u90fd\u662f `.ml`\u3002OCaml \u548c Python \u7684 *pip* \u6216 Perl \u7684 *CPAN* \u4e00\u6837\uff0c\u6709\u81ea\u5df1\u7684\u5305\u7ba1\u7406\u7cfb\u7edf\u548c\u5e93\uff0c\u53eb\u505a [**opam**](https://opam.ocaml.org/)\u3002OCaml \u7684\u4e3b\u8981\u5e94\u7528\u4ecd\u7136\u662f [OCaml Ergo Library](https://opam.ocaml.org/packages/alt-ergo-lib-free/)\uff0c\u4e00\u4e2a\u81ea\u52a8\u5b9a\u7406\u8bc1\u660e\u7684\u5e93\u3002\u5982\u679c\u4f60\u4f7f\u7528\u8ba1\u7b97\u673a\u7684\u9996\u8981\u76ee\u7684\u5c31\u662f\u5b9a\u7406\u8bc1\u660e\uff0c\u90a3\u4e48\u81ea 1974 \u5e74\u4ee5\u6765 ML \u548c OCaml \u4e00\u76f4\u90fd\u5728\u63d0\u4f9b\u8fd9\u4e2a\u529f\u80fd\u3002\u8fd1\u5e74\u6765\u5e7f\u53d7\u6b22\u8fce\u7684 [Coq \u5b9a\u7406\u8bc1\u660e\u5668](https://en.wikipedia.org/wiki/Coq) \u4e5f\u662f\u7528 OCaml \u7f16\u5199\u7684\u3002\\n\\n## \u63a5\u4e0b\u6765\u662f Rust\\n\\nRust \u6700\u521d\u662f Graydon Hoare 2006 \u5e74\u65f6\u5728 Mozilla \u5de5\u4f5c\u671f\u95f4\u7684\u4e00\u4e2a\u4e1a\u4f59\u7231\u597d\u9879\u76ee\u3002[\uff08Rust \u5b98\u7f51\uff09[^mention]\u63d0\u5230](https://doc.rust-lang.org/reference/influences.html) OCaml \u548c ML \u662f\u9664\u4e86 C/C++ \u4e4b\u5916\uff0c\u5bf9 Rust \u5f71\u54cd\u6700\u5927\u7684\u8bed\u8a00\u3002\u4e00\u4e2a\u7ecf\u5178\u7684\u4f8b\u8bc1\u662f [Rust \u7684\u7b2c\u4e00\u4e2a\u7f16\u8bd1\u5668](https://github.com/graydon/rust-prehistory/tree/master/src/boot/fe)\u662f\u7528 OCaml \u7f16\u5199\u7684\u3002\u9664\u4e86 Hoare \u4e4b\u5916\uff0c[Brendan Eich](https://en.wikipedia.org/wiki/Brendan_Eich)[^brendan] \u662f\u8fd9\u4e2a\u4ee3\u7801\u5e93\u7684\u4e00\u4e2a\u8457\u540d\u8d21\u732e\u8005\uff0c\u4ed6\u662f Mozilla \u9879\u76ee\u7684\u521b\u59cb\u4eba\u4e4b\u4e00\uff0c\u4e5f\u662f JavaScript \u7684\u53d1\u660e\u8005\u3002\u5c3d\u7ba1 Brendan \u6ca1\u6709\u8d21\u732e\u592a\u591a\u4ee3\u7801\uff0c\u4f46\u4ed6\u5f53\u65f6\u662f Mozilla \u7684 CTO\uff0c\u8fd9\u8868\u660e\u5f53 Mozilla \u5728 2009 \u5e74\u5f00\u59cb\u652f\u6301\u8be5\u9879\u76ee\u65f6\uff0cRust \u5df2\u7ecf\u5728\u8be5\u7ec4\u7ec7\u4e2d\u624e\u6839\uff0cEich \u7684\u65e9\u671f\u8d21\u732e\u662f\u5e94\u8be5\u88ab\u6ce8\u610f\u5230\u7684\u3002\uff08\u4e5f\u8bb8\u4e2d\u578b\u516c\u53f8\u7684 CTO \u4eb2\u81ea\u5411\u590d\u6742\u4ee3\u7801\u5e93\u63d0\u4ea4\u4ee3\u7801\u5176\u5b9e\u4e0d\u662f\u4ec0\u4e48\u65b0\u9c9c\u4e8b\uff1f\u8c01\u77e5\u9053\u5462\uff1f\uff09[^humor]\\n\\n[^mention]: \u539f\u6587\u662f\u88ab\u52a8\u8bed\u6001\uff0c\u4e3b\u8bed\u7701\u7565\uff0c\u76f4\u8bd1\u6210\u6c49\u8bed\u7565\u663e\u751f\u786c\uff0c\u9042\u6539\u6210\u4e3b\u52a8\u8bed\u6001\uff0c\u8865\u51fa\u4e3b\u8bed\u3002\u4e3b\u8bed Rust \u5b98\u7f51\u662f\u6839\u636e\u539f\u6587\u63d0\u4f9b\u7684\u94fe\u63a5\u63a8\u6d4b\u7684\u3002Rust \u5b98\u7f51\u5b9e\u9645\u4e0a\u628a OCaml \u653e\u5728\u4e86 C++ \u4e4b\u4e0a\uff0c\u91cd\u8981\u6027\u53ef\u89c1\u4e00\u6591\u3002\\n\\n[^brendan]: Brendan Eich \u5728\u540e\u6587\u88ab\u4f5c\u8005\u7528 Brendan \u548c Eich \u5206\u522b\u79f0\u547c\u4e86\u4e00\u6b21\uff0c\u8bf7\u6ce8\u610f\u8fd9\u662f\u540c\u4e00\u4e2a\u4eba\u3002\\n\\n[^humor]: \u62ec\u53f7\u91cc\u8fd9\u53e5\u8bdd\u662f\u4f5c\u8005\u7684\u5e7d\u9ed8\u3002\u5373\u5728\u5f3a\u8c03\u4f5c\u4e3a CTO \u4eb2\u81ea\u53bb\u8d21\u732e\u4ee3\u7801\u7684\u60c5\u51b5\u5e94\u8be5\u662f\u5f88\u5c11\u89c1\u7684\uff0c\u4ee5\u6b64\u6765\u8bf4\u660e Brendan \u5bf9 Rust \u7684\u91cd\u89c6\u3002\\n\\n\u5c3d\u7ba1\u5f53\u65f6 Rust \u7684\u7f16\u8bd1\u5668\u662f OCaml \u4ee3\u7801\u5e93\uff0c\u4f46 Rust \u7684[\u7b2c\u4e00\u4e2a\u6587\u6863](https://doc.rust-lang.org/reference/influences.html)\u63d0\u5230\u7684\u66f4\u591a\u7684\u5374\u662f\u5176\u5b83\u51fd\u6570\u5f0f\u6216\u58f0\u660e\u5f0f\u8bed\u8a00\uff0c\u4f8b\u5982 NIL\u3001Hermes\u3001Erlang\u3001Sather\u3001Newsqueak\u3001Limbo \u548c Napier\u3002\u8fd9\u4e9b\u8d77\u6e90\u7684\u4ecb\u7ecd\uff0c\u8fde\u540c\u5927\u91cf\u5bf9\u8bf8\u5982 Joe Armstrong\uff08Erlang \u7684\u53d1\u660e\u8005\uff09\u7b49\u4eba\u7684\u5f15\u7528\uff0c\u5728\u5f53\u4eca\u7684 Rust \u6587\u6863\u4e2d\u5df2\u7ecf\u88ab\u6de1\u5316\u4e86\u3002\u7136\u800c\uff0c\u663e\u800c\u6613\u89c1\u7684\u662f\uff0cGraydon \u5bf9\u5386\u53f2\u4e0a\u7684\u8ba1\u7b97\u673a\u8bed\u8a00\u6709\u7740\u6df1\u539a\u7684\u5174\u8da3\uff0c\u5e76\u575a\u4fe1\u5b83\u4eec\u6709\u4e1c\u897f\u53ef\u4ee5\u6559\u7ed9\u6211\u4eec\uff0c\u4ed6\u663e\u9732\u51fa\u501f\u9274\u8fd9\u4e9b\u8bed\u8a00\uff0c\u6311\u9009\u51fa\u6700\u597d\u7684\u90e8\u5206\u7684\u96c4\u5fc3\u3002\u7528\u4ed6\u81ea\u5df1\u7684\u8bdd\u8bf4\uff1a\\n\\n> \u6211\u4e00\u76f4\u4ee5\u6765\u90fd\u662f\u4e00\u4f4d\u8bed\u8a00\u591a\u5143\u4e3b\u4e49\u8005\u2014\u2014\u60f3\u8c61\u4e00\u4e0b\uff0c\u6211\u5bf9\u8bed\u8a00\u7684\u6001\u5ea6\uff0c\u5c31\u50cf\u4e00\u4e2a\u5b69\u5b50\u559c\u6b22\u5404\u79cd\u5404\u6837\u7684\u79ef\u6728\u3001\u4e50\u5668\u6216\u5851\u6599\u6050\u9f99\u4e00\u6837\u2014\u2014\u6211\u8ba4\u4e3a\u4f20\u6559\u58eb\u5f0f\u7684\u5355\u4e00\u8bed\u8a00\u4e3b\u4e49\u5c24\u5176\u6ca1\u6709\u76ca\u5904\u3002[^ironic]\\n\\n[^ironic]: \u8bbd\u523a\u7684\u662f\uff0c\u5982\u4eca\u7684 Rust \u8bed\u8a00\u793e\u533a\u4f3c\u4e4e\u4e0e Graydon \u7684\u8fd9\u79cd\u591a\u5143\u4e3b\u4e49\u6001\u5ea6\u80cc\u9053\u800c\u9a70\uff0c\u53cd\u800c\u8868\u73b0\u51fa\u4e00\u79cd\u5355\u4e00\u8bed\u8a00\u4e3b\u4e49\u7684\u503e\u5411\u3002\\n\\nRust \u7684\u72ec\u7279\u4e4b\u5904\u5728\u4e8e\u5b83\u5c06\u201c\u975e\u7eaf\u201d\u51fd\u6570\u5f0f\u7f16\u7a0b\u4e0e\u547d\u4ee4\u5f0f\u7f16\u7a0b\u878d\u5408\u5728\u4e00\u8d77\uff0c\u5c06\u8bb8\u591a\u6765\u81ea ML \u548c OCaml \u7684\u6982\u5ff5\u5f15\u5165\u5230\u8bed\u8a00\u4e2d\u3002\\n\\nRust \u7684\u53e6\u4e00\u4e2a\u7279\u8272\u5728\u4e8e\u5b83\u4ece\u4e00\u5f00\u59cb\u5c31\u7f16\u8bd1\u4e3a\u76ee\u6807\u673a\u5668\u4ee3\u7801\uff0c\u800c\u4e0d\u662f\u50cf Peter Landin \u7684 ISWIM\u3001ML \u548c OCaml \u8bed\u8a00\u90a3\u6837\u4f7f\u7528\u4efb\u4f55\u7c7b\u578b\u7684\u865a\u62df\u673a\uff08Java \u6216 Python \u4e5f\u662f\u5982\u6b64\uff09\u3002Graydon \u53ef\u80fd\u662f\u51fa\u4e8e\u76f4\u89c9\u505a\u5230\u4e86\u8fd9\u4e00\u70b9\uff0c\u4f46\u4ed6\u5728 [2019 \u5e74\u7684\u4e00\u7bc7\u6587\u7ae0](https://graydon2.dreamwidth.org/264181.html) \u4e2d\u5f3a\u8c03\u4e86\u8fd9\u4e00\u70b9\uff1a\u865a\u62df\u673a\uff0c\u5373\u4f7f\u4f5c\u4e3a\u4e2d\u95f4\u6b65\u9aa4\uff0c\u4e5f\u662f\u7cdf\u7cd5\u7684\u8bed\u8a00\u5de5\u7a0b\uff0c\u901a\u5e38\u6765\u8bf4\u662f\u4e2a*\u574f\u4e3b\u610f*\u3002\\n\\n2013 \u5e74\uff0c\u56e0\u4e2a\u4eba\u539f\u56e0\uff0cGraydon \u8f9e\u53bb\u4e86 Rust \u7684\u4e3b\u8981\u8d1f\u8d23\u4eba\u804c\u52a1\uff0c\u4ed6\u5728 [Reddit \u4e0a\u7684\u5e16\u5b50](https://www.reddit.com/r/rust/comments/7qels2/i_wonder_why_graydon_hoare_the_author_of_rust/)\u4e2d\u8fdb\u884c\u4e86\u8be6\u7ec6\u7684\u8bf4\u660e\u3002\\n\\n\u4e0e OCaml \u4e00\u6837\uff0cRust \u66fe\u7ecf\u4e0e\u5355\u4e00\u7684\u7f16\u8bd1\u5668[^llvm]\u6709\u7740\u5171\u751f\u5173\u7cfb\u3002\u4f46\u8fd9\u79cd\u5173\u7cfb\u6b63\u5728\u53d1\u751f\u53d8\u5316\uff0c\u56e0\u4e3a\u73b0\u5728\u6709\u7b2c\u4e8c\u4e2a\u57fa\u4e8e GCC \u7684\u5b9e\u73b0\u6b63\u5728\u5f00\u53d1\u4e2d\u3002\\n\\n[^llvm]: \u8fd9\u91cc\u6307\u7684\u662f Rust \u5b98\u65b9\u7684 LLVM \u5b9e\u73b0\u3002\u4f5c\u8005\u5728\u8fd9\u91cc\u884c\u6587\u975e\u5e38\u8df3\u8dc3\uff0c\u524d\u9762\u4e00\u76f4\u5728\u8bb2 Rust \u7f16\u8bd1\u5668\u65e9\u671f\u7684 OCaml \u5b9e\u73b0\uff0c\u8fd9\u91cc\u7a81\u7136\u201c\u8df3\u8fc7\u201d\u4e86\u957f\u671f\u4ee5\u6765\u552f\u4e00\u5b58\u5728\u7684 LLVM \u7684\u5b98\u65b9\u5b9e\u73b0\uff08\u6b63\u6587\u4e2d\u751a\u81f3\u6ca1\u6709\u51fa\u73b0\u8fc7 LLVM \u7684\u540d\u5b57\uff09\uff0c\u76f4\u63a5\u63d0\u5230 GCC \u7684\u793e\u533a\u5b9e\u73b0\u3002\\n\\n\u8fd9\u662f\u7528 Rust \u5b9e\u73b0\u7684\u5192\u6ce1\u6392\u5e8f\uff1a\\n\\n```rust\\n/* Bubblesort in Rust, Linus Walleij 2022 */\\nfn sort(array : &mut [i32]) {\\n   let mut x : i32;\\n   if array.len() == 1 {\\n      return;\\n   }\\n   for i in 1..array.len() {\\n      if array[i - 1] > array[i] {\\n      \\t x = array[i - 1];\\n\\t array[i - 1] = array[i];\\n\\t array[i] = x;\\n      }\\n   }\\n}\\n\\nfn is_ordered(array : &[i32]) -> bool {\\n   if array.len() <= 1 {\\n     return true;\\n   }\\n   for i in 1..array.len() {\\n     if array[i - 1] > array[i] {\\n       return false;\\n     }\\n   }\\n   return true;\\n}\\n\\nfn parray(array : &[i32]) {\\n   let mut x : i32;\\n   print!(\\"V = \\");\\n   for i in 0..array.len() {\\n       x = array[i];\\n       print!(\\"{x}\\");\\n       if i != (array.len() - 1) {\\n       \\t  print!(\\",\\");\\n       }\\n   }\\n   println!(\\"\\");\\n}\\n\\nfn main() {\\n   let mut array: [i32; 16] = [14, 4, 55, 100, 11, 29, 76, 19, 6, 82, 99, 0, 57, 36, 61, 30];\\n   parray(&array);\\n   while !is_ordered(&array) {\\n     sort(&mut array);\\n   }\\n   parray(&array);\\n}\\n```\\n\\nRust \u8ba9\u81ea\u5df1\u6210\u4e3a\u4e86\u4e00\u4e2a\u6bd4 OCaml \u66f4\u5bb9\u6613\u8fdb\u884c\u547d\u4ee4\u5f0f\u7f16\u7a0b\u7684\u8bed\u8a00\uff1a\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5173\u952e\u5b57 `mut` \u548c C \u8bed\u8a00\u7684 [*const \u6b63\u786e\u6027\u6807\u8bb0*](https://en.wikipedia.org/wiki/Const_(computer_programming)) \u975e\u5e38\u76f8\u4f3c\u3002\u7531\u4e8e `is_ordered` \u548c `parray` \u4e0d\u4f1a\u6539\u53d8\u6570\u7ec4\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\u8fd9\u4e9b\u51fd\u6570\u4e0d\u9700\u8981\u6807\u8bb0\u4e3a `mut`\u3002\u4f60\u53ef\u4ee5\u770b\u5230 Pascal \u7684\u4e00\u4e9b\u719f\u6089\u7684\u4f18\u70b9\uff1a\u6570\u7ec4\u201c\u77e5\u9053\u201d\u5b83\u4eec\u7684\u957f\u5ea6\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u65b9\u6cd5\u6765\u83b7\u53d6\u5b83\uff1a`array.len()`\u3002\\n\\nRust \u65e2\u5b9a\u76ee\u6807\u662f\u63d0\u9ad8\u5185\u5b58\u5b89\u5168\u6027\u3001\u6570\u636e\u7ade\u4e89\u5b89\u5168\u6027\uff08\u5e76\u53d1\uff09\u548c\u7c7b\u578b\u5b89\u5168\u6027\u3002\u6587\u7ae0 [\u300aSafe Systems Programming in Rust\u300b](https://iris-project.org/pdfs/2021-rustbelt-cacm-final.pdf) \u575a\u5b9a\u800c\u76f4\u622a\u4e86\u5f53\u5730\u5c55\u793a\u4e86\u8fd9\u4e2a\u96c4\u5fc3\u3002Graydon \u8fd8\u5728 [2016 \u5e74\u7684\u4e00\u7bc7\u535a\u6587](https://graydon2.dreamwidth.org/247406.html) \u4e2d\u5f3a\u8c03\u4e86\u5bf9\u5185\u5b58\u548c\u5e76\u53d1\u5b89\u5168\u6027\u7684\u5173\u6ce8\u3002\\n\\n\u4f46*\u522b\u641e\u9519\u4e86*\u3002\u5f53\u524d\u8fd9\u4e9b\u76ee\u6807\uff0c\u5176\u5e95\u5c42\u903b\u8f91*\u5b8c\u5168*\u4e0e 1958 \u5e74\u5230 1968 \u5e74 ALGOL \u59d4\u5458\u4f1a\u7684\u96c4\u5fc3\u4e00\u81f4\uff1a\u901a\u8fc7*\u5c06\u8ba1\u7b97\u673a\u7f16\u7a0b\u4e0e\u5f62\u5f0f\u903b\u8f91\u7ed3\u5408\u8d77\u6765*\uff0c\u6765*\u63d0\u5347\u8bed\u8a00\u7684\u62bd\u8c61\u6027*\u3002\u8fd9\u6765\u81ea\u4e8e\u5b66\u672f\u754c\u5bf9\u8be5\u8bed\u8a00\u7684\u5f3a\u5927\u652f\u6301\u3002\\n\\n\u8fd9\u79cd\u96c4\u5fc3\u7684\u4e00\u4e2a\u5178\u578b\u8ff9\u8c61\u662f[\u8d44\u91d1\u5145\u8db3\u7684 RustBelt \u9879\u76ee](https://plv.mpi-sws.org/rustbelt/)\uff0c\u6d89\u53ca\u5927\u91cf\u5b66\u672f\u7814\u7a76\u4eba\u5458\uff0c\u4ed6\u4eec\u90fd\u719f\u6089\u5f62\u5f0f\u903b\u8f91\uff0c\u5e76\u4ea7\u751f\u4e86\u8bf8\u5982 Ralf Jung \u7684\u535a\u58eb\u8bba\u6587 [\u300aUnderstanding and Evolving the Rust Programming Language\u300b](https://research.ralfj.de/phd/thesis-screen.pdf) \u8fd9\u6837\u7684\u6210\u679c\u3002\u4e0b\u9762\uff0c\u7528 Rust Belt \u548c Coq \u8bc1\u660e\u52a9\u624b\u4e2d\u7684\u5f62\u5f0f\u903b\u8f91\u53ef\u4ee5\u5f97\u51fa\u7ed3\u8bba\uff08\u6765\u81ea\u6458\u8981\uff09\uff1a\\n\\n> \u8fd9\u4e9b\u8bc1\u660e\u5171\u540c\u6784\u5efa\u51fa\u4e00\u4e2a\u7ed3\u8bba\uff1a\u53ea\u8981 \u03bbRust \u7a0b\u5e8f\u4e2d\u4ec5\u5b58\u7684\u4e0d\u5b89\u5168\u7684\u4ee3\u7801\u88ab\u9650\u5236\u5728\u6ee1\u8db3\u5176\u9a8c\u8bc1\u6761\u4ef6\u7684\u5e93\u4e2d\uff0c\u8be5\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u5b89\u5168\u5730\u6267\u884c\u3002\\n\\n\u6240\u8c13\u201c\u53ef\u4ee5\u5b89\u5168\u5730\u6267\u884c\u201d\u662f\u6307\u6ca1\u6709\u91ca\u653e\u540e\u4f7f\u7528\uff08use-after-free\uff09\u3001\u60ac\u7a7a\u6307\u9488\u3001\u8fc7\u671f\u5f15\u7528\u3001\u7a7a\u6307\u9488\u5f02\u5e38\u7b49\u95ee\u9898\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728\u5f62\u5f0f\u903b\u8f91\u4e2d\u88ab\u8bc1\u660e\u4e86\uff1aQED[^qed]\u3002\u7136\u800c\uff0c\u8fd9\u5e76\u4e0d\u80fd\u963b\u6b62\u4f60\u9664\u4ee5\u96f6\uff0c\u8fd9\u4e2a\u95ee\u9898\u8d85\u51fa\u4e86\u8fd9\u9879\u5de5\u4f5c\u7684\u8303\u7574[^analysis]\u3002\\n\\n[^qed]: QED \u662f\u62c9\u4e01\u8bed\u201cquod erat demonstrandum\u201d\u7684\u7f29\u5199\uff0c\u610f\u4e3a\u201c\u8fd9\u5c31\u662f\u8981\u8bc1\u660e\u7684\u201d\u3002\u653e\u5728\u8bc1\u660e\u7684\u6700\u540e\uff0c\u8868\u793a\u8bc1\u660e\u5df2\u7ecf\u5b8c\u6210\u3002\u8fd9\u91cc\u662f\u5f3a\u8c03\u5f62\u5f0f\u903b\u8f91\u7684\u4e25\u8c28\u6027\u53ef\u4ee5\u786e\u4fdd Rust \u4ee3\u7801\u7684\u5b89\u5168\u6027\u3002\\n[^analysis]: \u7c7b\u4f3c\u7684\u95ee\u9898\u540c\u6837\u53ef\u4ee5\u901a\u8fc7\u9759\u6001\u5206\u6790\u7b49\u65b9\u6cd5\u6765\u89e3\u51b3\uff0c\u4f46\u8fd9\u91cc\u6307\u7684\u662f\u4e0d\u901a\u8fc7 Rust \u7684\u5f3a\u5236\u7f16\u8bd1\u68c0\u67e5\u6765\u89e3\u51b3\u3002\u7c7b\u4f3c\u7684\uff0cRust \u4e5f\u4e0d\u628a\u5e38\u88ab\u89c6\u4e3a\u7f3a\u9677\u7684\u5185\u5b58\u6cc4\u6f0f\u89c6\u4e3a\u4e0d\u5b89\u5168\u7684\u884c\u4e3a\uff0c\u540c\u6837\u4e5f\u6ca1\u6709\u8fd9\u65b9\u9762\u7684\u5f3a\u5236\u68c0\u67e5\u3002\\n\\n\u5bf9\u6211\u4e2a\u4eba\u800c\u8a00\uff0cJung \u7684\u8bba\u6587\u4e2d\u6700\u4ee4\u4eba\u60ca\u8bb6\u7684\u662f\uff0c\u5b83\u8bbe\u6cd5\u591a\u6b21\u5f15\u7528\u548c\u53c2\u8003\u8ba1\u7b97\u673a\u79d1\u5b66\u5bb6 Tony Hoare\uff0c\u800c\u7adf\u4e00\u6b21\u4e5f\u6ca1\u6709\u5f15\u7528 Rust \u8bed\u8a00\u7684\u53d1\u660e\u8005 Graydon Hoare\u3002\u8fd9\u5728\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u8bc1\u5b9e\u4e86 Graydon \u81ea\u5df1\u7684\u8bf4\u6cd5\uff0c\u5373\u4ece\u8bed\u8a00\u7684\u89d2\u5ea6\u6765\u770b\uff0cRust \u201c\u6ca1\u6709\u4ec0\u4e48\u65b0\u4e1c\u897f\u201d\u3002\\n\\nC \u8bed\u8a00\u65e0\u6cd5\u50cf Rust \u90a3\u6837\u63a5\u53d7\u540c\u6837\u4e25\u683c\u7684\u5ba1\u67e5\uff0c\u4ec5\u4ec5\u662f\u56e0\u4e3a\u5b83\u5141\u8bb8\u5404\u79cd\u7528\u6cd5\uff08\u6216\u6ee5\u7528\uff09\uff0c\u6b63\u5982 Wirth \u4ece\u5386\u53f2\u7684\u89d2\u5ea6\u51fa\u53d1\u63d0\u5230\u7684\u90a3\u6837\uff1a\u5982\u679c\u4e00\u4e2a\u7c7b\u578b\u53ef\u4ee5\u901a\u8fc7\u5f3a\u5236\u8f6c\u6362\u6765\u6539\u53d8\uff0c\u5e76\u4e14\u6570\u7ec4\u7d22\u5f15\u751a\u81f3\u4e0d\u662f\u8bed\u8a00\u7684\u4e00\u90e8\u5206\uff0c\u90a3\u4e48\u5c31\u6ca1\u6709\u4ec0\u4e48\u597d\u8bc1\u660e\u7684\u3002\u5b66\u8005\u4eec\u611f\u5174\u8da3\u7684\u662f C \u7684\u4e00\u4e2a\u5b9a\u4e49\u826f\u597d\u7684\u5b50\u96c6\uff0c\u4f8b\u5982 [eBPF \u5b50\u96c6](https://www.kernel.org/doc/html/latest/bpf/index.html)\uff0c\u8fd9\u4e5f\u90e8\u5206\u89e3\u91ca\u4e86\u5bf9 eBPF \u7684\u5f3a\u70c8\u5174\u8da3\uff1a\u4e0e Rust \u4e00\u6837\uff0c\u6784\u5efa\u73af\u5883\u548c\u8bed\u8a00\u8fd0\u884c\u65f6\u5df2\u7ecf\u5728\u66f4\u4e25\u683c\u7684\u7ea6\u675f\u4e0b\u5b9a\u4e49\uff0c\u56e0\u6b64\u53ef\u4ee5\u8fdb\u884c\u5f62\u5f0f\u9a8c\u8bc1\u3002\\n\\n\u5728\u6211\u770b\u6765\uff0c\u65e0\u8bba\u63a8\u52a8\u5b83\u7684\u4eba\u662f\u5426\u610f\u8bc6\u5230\u8fd9\u4e00\u70b9\uff0cRust \u7684\u96c4\u5fc3\u662f\u5b8c\u6210 ALGOL \u59d4\u5458\u4f1a\u4f5c\u4e3a*\u9996\u8981\u52a8\u529b*\u4e8e 1958 \u5e74\u5f00\u59cb\u7684\u5de5\u4f5c\uff0c\u800c 1968 \u5e74\u5317\u7ea6\u8f6f\u4ef6\u5de5\u7a0b\u5927\u4f1a\u4e2d\u5f97\u51fa\u7684\u7ed3\u8bba\u662f\u6709\u5fc5\u8981\u7684\uff1a\u5f00\u53d1\u4e00\u79cd\u4f9d\u8d56\u5f62\u5f0f\u903b\u8f91\u8bc1\u660e\u7684\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\uff0c\u6765\u5b9e\u73b0 ALGOL \u65e0\u6cd5\u5b9e\u73b0\u3001Pascal \u65e0\u6cd5\u5b9e\u73b0\u3001\u4ee5\u53ca\u6240\u6709\u201c\u4e5f\u8bb8\u6ca1\u6709 700 \u79cd\u201d[^maybe-not-700]\u7684\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bed\u8a00\u6240\u65e0\u6cd5\u5b9e\u73b0\u7684\u76ee\u6807\uff1a\u5c06**\u8ba1\u7b97\u673a\u79d1\u5b66**\u5b66\u79d1\u548c**\u8f6f\u4ef6\u5de5\u7a0b**\u5b66\u79d1\u7ed3\u5408\u6210**\u7edf\u4e00**\u7684\u5b66\u79d1\uff0c\u8ba9\u4e24\u4e2a\u5b66\u79d1\u7684\u5b66\u8005\u53ef\u4ee5\u5171\u540c\u89e3\u51b3\u95ee\u9898\u3002\\n\\n[^maybe-not-700]: \u539f\u6587\u662f maybe-not-700\u3002\u8fd9\u662f\u5bf9\u524d\u6587\u63d0\u5230\u7684 Landin \u7684\u300aThe Next 700 Programming Languages\u300b\u4e00\u6587\uff0c\u4f5c\u8005\u6253\u8da3\u8bf4 \u201c\u4e5f\u8bb8\u6ca1\u6709 700 \u79cd\u201d \u7684\u4e00\u79cd callback\u3002\\n\\n\u8fd9\u662f Rust \u4f5c\u4e3a Linux \u7b49\u64cd\u4f5c\u7cfb\u7edf\u7684\u5b9e\u73b0\u8bed\u8a00\u7684\u96c4\u5fc3\uff1a\u63d0\u4f9b\u4e00\u79cd\u7531\u5f53\u524d\u6700\u524d\u6cbf\u7684\u8ba1\u7b97\u673a\u79d1\u5b66\u7814\u7a76\u4f5c\u4e3a\u652f\u6301\u8bed\u8a00\uff0c\u4ee5\u4fbf\u7acb\u5373\u5e94\u7528\u4e8e\u5f00\u53d1\u6700\u524d\u6cbf\u7684\u64cd\u4f5c\u7cfb\u7edf\u7684\u8f6f\u4ef6\u5de5\u7a0b\u3002\\n\\n\u5b83\u63d0\u4f9b\u7ed9 Linux \u7684\u5c31\u662f**\u63d0\u5347\u62bd\u8c61**\uff0c\u4ee5\u5e94\u5bf9 1968 \u5e74\u5317\u7ea6\u8f6f\u4ef6\u5de5\u7a0b\u5927\u4f1a\u4e0a\u63d0\u51fa\u7684\u590d\u6742\u6027\u95ee\u9898\uff08\u5982\u4eca\u8fd9\u4e9b\u95ee\u9898\u7531\u4e8e\u9891\u7e41\u53d1\u751f\u7684\u5b89\u5168\u4e8b\u4ef6\u800c\u53d8\u5f97\u6108\u53d1\u663e\u8457\uff09\uff0c\u4ece\u800c\u4f7f Linux \u5de5\u7a0b\u9879\u76ee\u66f4\u63a5\u8fd1\u8ba1\u7b97\u673a\u79d1\u5b66\u3002\\n\\n\u5176\u5b83\u63d0\u5347 Linux\uff08\u5185\u5b58\u3001\u5e76\u53d1\uff09\u5b89\u5168\u6027\u7684\u65b9\u5f0f\u4e5f\u662f\u53ef\u80fd\u7684\uff1a\u663e\u8457\u589e\u52a0\u6d4b\u8bd5\uff0c\u8fd9\u662f\u5de5\u7a0b\u5b66\u7684\u7075\u4e39\u5999\u836f\u3002\u81ea\u52a8\u5316\u6d4b\u8bd5\u5728\u8fd1\u51e0\u5e74\u786e\u5b9e\u6709\u4e86\u5927\u5e45\u63d0\u5347\u3002\u63d0\u5347\u5b9e\u73b0\u8bed\u8a00\u7684\u62bd\u8c61\u6027\u548c\u5f62\u5f0f\u9a8c\u8bc1\u5219\u662f\u4e3a\u4e86\u8ba9\u6d4b\u8bd5\u53d8\u5f97*\u4e0d\u90a3\u4e48*\u91cd\u8981\u3002\\n\\n## \u540e\u8bb0\\n\\n:::note[\u539f\u6587\u540e\u8bb0]\\nMathieu Poirer \u548c Jesper Jansson \u5e2e\u6211\u5ba1\u9605\u4e86\u8fd9\u7bc7\u535a\u5ba2\uff0c\u6211\u5bf9\u6b64\u611f\u6fc0\u4e0d\u5c3d\u3002\u5269\u4e0b\u7684\u9519\u8bef\u3001\u6f0f\u6d1e\u3001\u504f\u89c1\u90fd\u662f\u6211\u81ea\u5df1\u7684\u3002\\n:::\\n\\n:::note[\u8bd1\u8005\u540e\u8bb0]\\n\u8bd1\u8005\u4e00\u76f4\u4ee5\u6765\u90fd\u5e0c\u671b\u80fd\u591f\u7cfb\u7edf\u6027\u7684\u68b3\u7406\u4e00\u4e0b\u7f16\u7a0b\u8bed\u8a00\u7684\u53d1\u5c55\u53f2\uff0c\u8fd9\u7bc7\u535a\u5ba2\u6b63\u597d\u63d0\u4f9b\u4e86\u4e00\u4e2a\u89c6\u89d2\u3002\\n\\n\u8bd1\u8005\u6c34\u5e73\u6709\u9650\uff0c\u7ffb\u8bd1\u8fc7\u7a0b\u4e2d\u96be\u514d\u51fa\u73b0\u9519\u8bef\u548c\u4e0d\u5f53\u4e4b\u5904\uff0c\u6b22\u8fce\u8bfb\u8005\u6307\u6b63\u3002\\n:::"},{"id":"/raii","metadata":{"permalink":"/site/blog/raii","source":"@site/blog/raii.md","title":"RAII \u5bf9\u6bd4","description":"\u6784\u9020\u5668-\u6790\u6784\u5668","date":"2025-03-24T00:00:00.000Z","tags":[{"inline":true,"label":"pl","permalink":"/site/blog/tags/pl"}],"readingTime":2.52,"hasTruncateMarker":true,"authors":[],"frontMatter":{"date":"2025-03-24T00:00:00.000Z","tags":["pl"]},"unlisted":false,"prevItem":{"title":"[\u7ffb\u8bd1] Rust in Perspective","permalink":"/site/blog/rust"},"nextItem":{"title":"\u66f2\u6c34\u6d41\u89de\uff1a\u4e0a\u63f4\u4e0b\u63a8","permalink":"/site/blog/pipeline"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\n\\n\x3c!--truncate--\x3e\\n\\n## \u6784\u9020\u5668-\u6790\u6784\u5668\\n\\n<Tabs>\\n<TabItem label=\\"C++\\" value=\\"cpp\\">\\n\\n```cpp\\n#include <cstdio>\\n\\nstruct Locker {\\n    Locker() {\\n        puts(\\"lock\\");\\n    }\\n    ~Locker() {\\n        puts(\\"unlock\\");\\n    }\\n};\\n\\nint main() {\\n    Locker locker;\\n}\\n```\\n\\n</TabItem>\\n<TabItem label=\\"Rust\\" value=\\"rust\\">\\n\\n```rust\\nstruct Locker {}\\n\\nimpl Locker {\\n    pub fn new() -> Self {\\n        println!(\\"lock\\");\\n        Locker {}\\n    }\\n}\\n\\nimpl Drop for Locker {\\n    fn drop(&mut self) {\\n        println!(\\"unlock\\")\\n    }\\n}\\n\\n\\npub fn main() {\\n    let locker = Locker::new();\\n}\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n\\n## \u63a7\u5236\u5757\\n\\n<Tabs>\\n<TabItem label=\\"Java\\" value=\\"java\\">\\n\\n```java\\nclass Locker implements AutoCloseable {\\n    public Locker() {\\n        System.out.println(\\"lock\\");\\n    }\\n\\n    @Override\\n    public void close() {\\n        System.out.println(\\"unlock\\");\\n    }\\n\\n    public static void main(String[] args) {\\n        try (Locker locker = new Locker()) {\\n            \\n        }\\n    }\\n}\\n```\\n\\n</TabItem>\\n<TabItem label=\\"C#\\" value=\\"cs\\">\\n\\n```cs\\nusing System;\\n\\nclass Locker : IDisposable\\n{\\n    public Locker()\\n    {\\n        Console.WriteLine(\\"lock\\");\\n    }\\n\\n    public void Dispose()\\n    {\\n        Console.WriteLine(\\"unlock\\");\\n    }\\n    \\n    static void Main(string[] args)\\n    {\\n        using var locker = new Locker();\\n    }\\n}\\n```\\n\\n</TabItem>\\n<TabItem label=\\"Python\\" value=\\"python\\">\\n\\n```python\\nclass Locker:\\n    def __enter__(self):\\n        print(\\"lock\\")\\n\\n    def __exit__(self, *args):\\n        print(\\"unlock\\")\\n\\nwith Locker():\\n    pass\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n## defer \u8bed\u53e5\\n\\n<Tabs>\\n<TabItem label=\\"Go\\" value=\\"go\\">\\n\\n```go\\nimport \\"fmt\\"\\n\\nfunc main() {\\n    defer fmt.Println(\\"unlock\\")\\n    fmt.Println(\\"lock\\")\\n}\\n```\\n\\n</TabItem>\\n<TabItem label=\\"Swift\\" value=\\"swift\\">\\n\\n\\n```swift\\ndefer {\\n    print(\\"unlock\\")\\n}\\nprint(\\"lock\\")\\n```\\n</TabItem>\\n</Tabs>\\n\\n\\n## \u601d\u8003\u9898\\n\\n\u8fd9\u6837\u5199\u5b9e\u73b0 RAII \u6709\u4ec0\u4e48\u95ee\u9898\uff1a\\n\\n<Tabs groupId=\\"quiz\\">\\n<TabItem label=\\"Java\\" value=\\"java\\">\\n\\n\\n```java\\nvar r1 = open(\\"r1\\");\\nvar r2 = open(\\"r2\\");\\ntry {\\n    // ...\\n} finally {\\n    r1.close();\\n    r2.close();\\n}\\n```\\n\\n\\n</TabItem>\\n<TabItem label=\\"C#\\" value=\\"cs\\">\\n\\n```cs\\nvar r1 = open(\\"r1\\");\\nvar r2 = open(\\"r2\\");\\ntry {\\n    // ...\\n} finally {\\n    r1.close();\\n    r2.close();\\n}\\n```\\n\\n</TabItem>\\n<TabItem label=\\"Python\\" value=\\"python\\">\\n\\n```python\\nr1 = open(\\"r1\\")\\nr2 = open(\\"r2\\")\\ntry:\\n    # ...\\nfinally:\\n    r1.close()\\n    r2.close()\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n\u6b63\u786e\u7684\u5199\u6cd5\u5e94\u8be5\u662f\uff1a\\n\\n<Tabs groupId=\\"quiz\\">\\n<TabItem label=\\"Java\\" value=\\"java\\">\\n\\n```java\\ntry (var r1 = open(\\"r1\\"); var r2 = open(\\"r2\\")) {\\n    // ...\\n}\\n```\\n\\n</TabItem>\\n<TabItem label=\\"C#\\" value=\\"cs\\">\\n\\n```cs\\nusing var r1 = open(\\"r1\\");\\nusing var r2 = open(\\"r2\\");\\n// ...\\n```\\n\\n</TabItem>\\n<TabItem label=\\"Python\\" value=\\"python\\">\\n\\n\\n```python\\nwith open(\\"r1\\") as r1, open(\\"r2\\") as r2:\\n    # ...\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n\u8fd9\u79cd\u5199\u6cd5\u8bed\u524d\u9762\u7684\u5199\u6cd5\u4e0d\u540c\uff0c\u800c\u662f\u7b49\u4ef7\u4e8e\u4e0b\u9762\u7684\u5199\u6cd5\uff1a\\n\\n<Tabs groupId=\\"quiz\\">\\n<TabItem label=\\"Java\\" value=\\"java\\">\\n\\n```java\\nvar r1 = open(\\"r1\\");\\ntry {\\n    var r2 = open(\\"r2\\");\\n    try {\\n        // ...\\n    } finally {\\n        r2.close();\\n    }\\n} finally {\\n    r1.close();\\n}\\n```\\n\\n</TabItem>\\n<TabItem label=\\"C#\\" value=\\"cs\\">\\n\\n```cs\\nvar r1 = open(\\"r1\\");\\ntry {\\n    var r2 = open(\\"r2\\");\\n    try {\\n        // ...\\n    } finally {\\n        r2.close();\\n    }\\n} finally {\\n    r1.close();\\n}\\n```\\n\\n</TabItem>\\n<TabItem label=\\"Python\\" value=\\"python\\">\\n\\n```python\\nr1 = open(\\"r1\\")\\ntry:\\n    r2 = open(\\"r2\\")\\n    try:\\n        # ...\\n    finally:\\n        r2.close()\\nfinally:\\n    r1.close()\\n```\\n\\n</TabItem>\\n</Tabs>\\n\\n\u56e0\u6b64\u8fd9\u4e2a\u8bed\u6cd5\u7cd6\u76f8\u5f53\u4e8e\u662f\u628a\u5d4c\u5957\u7ed3\u6784\u53d8\u6210\u5e76\u5217\u7ed3\u6784\u4e86\uff0c\u5927\u5927\u7b80\u5316\u4e86\u4ee3\u7801\u7f16\u5199\u3002"},{"id":"/pipeline","metadata":{"permalink":"/site/blog/pipeline","source":"@site/blog/pipeline.md","title":"\u66f2\u6c34\u6d41\u89de\uff1a\u4e0a\u63f4\u4e0b\u63a8","description":"\u8fd9\u7bc7\u535a\u5ba2\u7684\u4ee3\u7801\u7528 JavaScript \u7f16\u5199\uff0c\u529b\u56fe\u7701\u53bb\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u8bed\u6cd5\u7ec6\u8282\u3002\u5927\u90e8\u5206\u73b0\u4ee3\u8bed\u8a00\u90fd\u80fd\u590d\u73b0\u8fd9\u4e9b\u4ee3\u7801\uff0c\u6240\u4ee5\u7f16\u7a0b\u8bed\u8a00\u7684\u9009\u62e9\u4e0d\u662f\u6700\u91cd\u8981\u7684\u3002","date":"2025-03-23T00:00:00.000Z","tags":[{"inline":true,"label":"pl","permalink":"/site/blog/tags/pl"},{"inline":true,"label":"fp","permalink":"/site/blog/tags/fp"}],"readingTime":28.685,"hasTruncateMarker":true,"authors":[],"frontMatter":{"date":"2025-03-23T00:00:00.000Z","tags":["pl","fp"]},"unlisted":false,"prevItem":{"title":"RAII \u5bf9\u6bd4","permalink":"/site/blog/raii"},"nextItem":{"title":"\u8fed\u4ee3\u5668\u7684\u63a5\u53e3\u5bf9\u6bd4","permalink":"/site/blog/iterator"}},"content":"\x3c!--truncate--\x3e\\n\\n:::note\\n\u8fd9\u7bc7\u535a\u5ba2\u7684\u4ee3\u7801\u7528 JavaScript \u7f16\u5199\uff0c\u529b\u56fe\u7701\u53bb\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684\u8bed\u6cd5\u7ec6\u8282\u3002\u5927\u90e8\u5206\u73b0\u4ee3\u8bed\u8a00\u90fd\u80fd\u590d\u73b0\u8fd9\u4e9b\u4ee3\u7801\uff0c\u6240\u4ee5\u7f16\u7a0b\u8bed\u8a00\u7684\u9009\u62e9\u4e0d\u662f\u6700\u91cd\u8981\u7684\u3002\\n:::\\n\\n## \u5faa\u73af\\n\\n\u5904\u7406\u4e00\u7ec4\u6570\u636e\u65f6\uff0c\u6211\u4eec\u901a\u5e38\u4f1a\u7528\u5faa\u73af\u3002\u5faa\u73af\u7684\u81ea\u7531\u5ea6\u5f88\u9ad8\uff0c\u53ef\u4ee5\u5904\u7406\u5404\u79cd\u5404\u6837\u7684\u60c5\u51b5\u3002\u4f46\u662f\u8fd9\u6837\u5e26\u6765\u7684\u95ee\u9898\u662f\uff0c\u5faa\u73af\u7684\u4ee3\u7801\u901a\u5e38\u4f1a\u53d8\u5f97\u5f88\u590d\u6742\uff0c\u96be\u4ee5\u7406\u89e3\u3001\u7ef4\u62a4\u548c\u590d\u7528\u3002\u8fd9\u91cc\u6211\u4eec\u7528\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u4f8b\u5b50\u8bf4\u660e\u8fd9\u4e2a\u95ee\u9898\u3002\\n\\n```javascript\\n// find the first 3 even squares, but skip the first one\\nlet skip = 1\\nlet take = 3\\nfor (let i = 0; i < 10; i++) {\\n    let sq = i * i;\\n    if (sq % 2 == 0) {\\n        if (skip-- <= 0) {\\n            if (take-- > 0) {\\n                console.log(sq); // prints 4, 16, 36\\n            } else {\\n                break;\\n            }\\n        }\\n    }\\n}\\n```\\n\\n\u6211\u4eec\u80fd\u4e0d\u80fd\u628a\u8fd9\u4e2a\u5faa\u73af\u7684\u903b\u8f91\u5206\u89e3\u6210\u51e0\u4e2a\u72ec\u7acb\u7684\u90e8\u5206\uff0c\u7136\u540e\u7ec4\u5408\u8d77\u6765\u5462\uff1f\\n\\n## \u6279\u5904\u7406\\n\\n\u4e00\u4e2a\u5e38\u89c1\u7684\u60f3\u6cd5\u662f\uff0c\u5c06\u6bcf\u4e00\u6b65\u7684\u5904\u7406\u7ed3\u679c\u4fdd\u5b58\u4e0b\u6765\uff0c\u7136\u540e\u4f20\u9012\u7ed9\u4e0b\u4e00\u6b65\u3002\u8fd9\u91cc\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u4e0a\u9762\u4f8b\u5b50\u7684\u6279\u5904\u7406\u7248\u672c\u3002\\n\\n```javascript\\nfunction iota(n) {\\n    let result = []\\n    for (let i = 0; i < n; i++) {\\n        result.push(i);\\n    }\\n    return result;\\n}\\n\\nfunction map(mapper, array) {\\n    let result = [];\\n    for (const item of array) {\\n        result.push(mapper(item));\\n    }\\n    return result;\\n}\\n\\nfunction filter(predicate, array) {\\n    let result = [];\\n    for (const item of array) {\\n        if (predicate(item)) {\\n            result.push(item);\\n        }\\n    }\\n    return result;\\n}\\n\\nfunction take(n, array) {\\n    let result = [];\\n    for (const item of array) {\\n        if (n-- > 0) {\\n            result.push(item);\\n        } else {\\n            break;\\n        }\\n    }\\n    return result;\\n}\\n\\nfunction skip(n, array) {\\n    let result = [];\\n    for (const item of array) {\\n        if (n-- <= 0) {\\n            result.push(item);\\n        }\\n    }\\n    return result;\\n}\\n\\nfunction forEach(fn, array) {\\n    for (const item of array) {\\n        fn(item);\\n    }\\n}\\n\\nforEach(console.log, take(3, skip(1, filter(x => x % 2 == 0, map(x => x * x, iota(10))))));\\n```\\n\\n:::info\\n\u8fd9\u4e00\u5957\u51fd\u6570\u5728 JavaScript \u7684\u6570\u7ec4\u4e0a\u5df2\u7ecf\u6709\u4e86\u73b0\u6210\u7684\u90e8\u5206\u5b9e\u73b0\uff08`map`\u3001`filter`\u3001`forEach`\uff09\uff0c`slice` \u548c `skip`\u3001`take` \u529f\u80fd\u7c7b\u4f3c\u4f46\u662f\u539f\u7406\u4e0d\u540c\u3002\u8fd9\u91cc\u5199\u51fa\u6765\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u8bf4\u660e\u95ee\u9898\u3002\\n:::\\n\\n\u8fd9\u4e2a\u7248\u672c\u7684\u4ee3\u7801\u66f4\u52a0\u6e05\u6670\uff0c\u6bcf\u4e2a\u51fd\u6570\u53ea\u505a\u4e00\u4ef6\u4e8b\u60c5\u3002\u4f46\u662f\u8fd9\u4e2a\u7248\u672c\u7684\u4ee3\u7801\u6709\u4e24\u4e2a\u95ee\u9898\uff1a\\n\\n- \u6bcf\u4e2a\u51fd\u6570\u90fd\u4f1a\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\uff0c\u4f46\u662f\u6211\u4eec\u53ea\u9700\u8981\u6700\u7ec8\u7684\u7ed3\u679c\u3002\u8fd9\u6837\u4f1a\u5bfc\u81f4\u7a7a\u95f4\u7684\u6d6a\u8d39\u3002\\n- \u6bcf\u4e2a\u51fd\u6570\u90fd\u4f1a\u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u4f46\u662f\u6211\u4eec\u6700\u7ec8\u53ea\u9700\u8981\u4e09\u4e2a\u5143\u7d20\u3002\u8fd9\u6837\u4f1a\u5bfc\u81f4\u65f6\u95f4\u7684\u6d6a\u8d39\u3002\\n\\n\u4f5c\u4e3a\u4e00\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u8bf7\u6c42\u7684\u6570\u636e\u8fd8\u5f88\u5ec9\u4ef7\uff0c\u6d41\u7a0b\u8fd8\u5f88\u7b80\u5355\u3002\u4f46\u662f\u5728\u771f\u5b9e\u573a\u666f\u4e2d\uff0c\u5982\u679c\u6570\u636e\u8bf7\u6c42\u6210\u672c\u9ad8\u6602\uff0c\u6d41\u7a0b\u66f4\u52a0\u590d\u6742\uff0c\u8fd9\u4e24\u79cd\u6d6a\u8d39\u5c06\u4e0d\u53ef\u5ffd\u7565\u3002\u6211\u4eec\u80fd\u4e0d\u80fd\u505a\u7684\u66f4\u597d\u5462\uff1f\\n\\n## \u6d41\u6c34\u7ebf\uff08\u4e0a\uff09\\n\\n\u6279\u5904\u7406\u7684\u505a\u6cd5\u662f\u4e00\u6b21\u5904\u7406\u6240\u6709\u5143\u7d20\u7684\u4e00\u4e2a\u6b65\u9aa4\uff0c\u5b8c\u6210\u4e4b\u540e\u518d\u8fdb\u5165\u4e0b\u4e00\u4e2a\u6b65\u9aa4\u3002\u5982\u679c\u6211\u4eec\u80fd\u591f\u4e00\u6b21\u5904\u7406\u4e00\u4e2a\u5143\u7d20\uff0c\u4e00\u6b21\u6027\u5c31\u628a\u8fd9\u4e2a\u5143\u7d20\u7684\u6240\u6709\u6b65\u9aa4\u8dd1\u901a\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u907f\u514d\u4e0a\u9762\u7684\u4e24\u4e2a\u95ee\u9898\u3002\u8fd9\u5c31\u662f\u6d41\u6c34\u7ebf\u7684\u601d\u60f3\u3002\\n\\n### \u8fed\u4ee3\u5668\\n\\n\u6279\u5904\u7406\u4e2d\u7528\u5230\u7684 `for...of` \u5c31\u662f\u9488\u5bf9\u8fed\u4ee3\u5668\u7684\u4e00\u4e2a\u7279\u6027\uff0c\u53ea\u4e0d\u8fc7\u662f\u4e00\u6b21\u6027\u904d\u5386\u6240\u6709\u5143\u7d20\u3002\u73b0\u5728\u6211\u4eec\u8981\u624b\u52a8\u64cd\u4f5c\u8fed\u4ee3\u5668\u5b9e\u73b0\u4e00\u4e2a\u6d41\u6c34\u7ebf\u3002\\n\\n\u4e3a\u4e86\u8ba9\u4e0d\u4e86\u89e3 JavaScript \u7684\u8bfb\u8005\u80fd\u591f\u7406\u89e3\uff0c\u6211\u4eec\u5148\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u8fed\u4ee3\u5668\u7684\u4f8b\u5b50\u4f5c\u4e3a\u89e3\u91ca\u3002\\n\\n```javascript\\nfunction iota(n) {\\n    let i = 0;\\n    return {\\n        next() {\\n            if (i < n) {\\n                return { value: i++, done: false };\\n            } else {\\n                return { done: true };\\n            }\\n        }\\n    };\\n}\\n```\\n\\n\u8fd9\u4e2a\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u8fd9\u4e2a\u8fed\u4ee3\u5668\u53ef\u4ee5\u751f\u6210 0 \u5230 n-1 \u7684\u6574\u6570\u3002\\n    \\n```javascript\\nlet it = iota(10);\\nlet result = it.next();\\nwhile (!result.done) {\\n    console.log(result.value);\\n    result = it.next();\\n}\\n```\\n\\n\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u624b\u52a8\u8c03\u7528\u4e86\u8fed\u4ee3\u5668\u7684 `next` \u65b9\u6cd5\uff0c\u76f4\u5230 `done` \u4e3a `true`\u3002\\n\\n\u4e3a\u4e86\u65b9\u4fbf\u8d77\u89c1\uff0c\u6211\u4eec\u63a5\u4e0b\u6765\u4f7f\u7528\u8fd9\u6837\u4e00\u5957\u5de5\u5177\uff1a\\n\\n```javascript\\nfunction iterate(next) {\\n    return {\\n        [Symbol.iterator]() {\\n            return this;\\n        },\\n        next\\n    };\\n}\\n\\nfunction more(value) {\\n    return { done: false, value };\\n}\\n\\nfunction done() {\\n    return { done: true };\\n}\\n```\\n\\n\u7b2c\u4e00\u4e2a\u51fd\u6570\u53ef\u4ee5\u8ba9\u8fed\u4ee3\u5668\u672c\u8eab\u4e5f\u662f\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\uff0c\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 `for...of` \u8bed\u6cd5\u3002\u540e\u4e24\u4e2a\u51fd\u6570\u53ef\u4ee5\u8ba9\u6211\u4eec\u66f4\u65b9\u4fbf\u7684\u751f\u6210\u8fed\u4ee3\u5668\u7684\u8fd4\u56de\u503c\u3002\\n\\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u6279\u5904\u7406\u7684\u4ee3\u7801\u91cd\u5199\u5982\u4e0b\uff1a\\n\\n```javascript\\nfunction iota(n) {\\n    let i = 0;\\n    return iterate(() => i < n ? more(i++) : done());\\n}\\n\\nfunction map(mapper, upstream) {\\n    return iterate(() => {\\n        let next = upstream.next();\\n        return next.done ? done() : more(mapper(next.value));\\n    });\\n}\\n\\nfunction filter(predicate, upstream) {\\n    return iterate(() => {\\n        let next = upstream.next();\\n        while (!next.done && !predicate(next.value)) {\\n            next = upstream.next();\\n        }\\n        return next;\\n    });\\n}\\n\\nfunction take(n, upstream) {\\n    return iterate(() => n-- > 0 ? upstream.next() : done());\\n}\\n\\nfunction skip(n, upstream) {\\n    return iterate(() => {\\n        while (n-- > 0) {\\n            if (upstream.next().done) {\\n                return done();\\n            }\\n        }\\n        return upstream.next();\\n    });\\n}\\n\\nfunction forEach(fn, upstream) {\\n    for (const item of upstream) {\\n        fn(item);\\n    }\\n}\\n\\nfunction toArray(upstream) {\\n    const result = [];\\n    forEach(item => result.push(item), upstream);\\n    return result;\\n    // or you can use spread operator\\n    // return [...upstream];\\n}\\n\\nforEach(console.log, take(3, skip(1, filter(x => x % 2 == 0, map(x => x * x, iota(10))))));\\n```\\n\\n`upstream` \u662f\u4e0a\u6e38\u8fed\u4ee3\u5668\uff0c\u901a\u8fc7\u6784\u9020\u4e00\u4e2a\u8fed\u4ee3\u5668\u94fe\uff0c\u6700\u4e0b\u6e38\u7684\u8fed\u4ee3\u5668\u88ab\u8c03\u7528\u4e00\u6b21\uff0c\u4f1a\u6309\u9700\u8c03\u7528\u4e0a\u6e38\u8fed\u4ee3\u5668\uff0c\u76f4\u5230\u6700\u4e0a\u6e38\u7684\u8fed\u4ee3\u5668\u3002\u6700\u4e0a\u6e38\u7684\u8fed\u4ee3\u5668\u4f1a\u751f\u6210\u6570\u636e\uff0c\u7136\u540e\u6570\u636e\u4f1a\u4e00\u7ea7\u4e00\u7ea7\u7684\u4f20\u9012\u5230\u6700\u4e0b\u6e38\u7684\u8fed\u4ee3\u5668\u3002\\n\\n\\n\u8fed\u4ee3\u5668\u7684\u7406\u5ff5\u867d\u597d\uff0c\u4f46\u662f\u7f16\u5199\u8fed\u4ee3\u5668\u7684\u4ee3\u7801\u8fd8\u662f\u6709\u70b9\u8d39\u8111\u5b50\u3002\u4f8b\u5982 `map` \u548c `take` \u7684 `next` \u53ea\u9700\u8981\u8c03\u7528\u81f3\u591a\u4e00\u6b21\u4e0a\u6e38\u8fed\u4ee3\u5668\uff0c\u800c `filter` \u548c `skip` \u9700\u8981\u5728 `next` \u65b9\u6cd5\u4e2d\u5faa\u73af\u8c03\u7528\u4e0a\u6e38\u8fed\u4ee3\u5668\u3002\u8fd9\u662f\u56e0\u4e3a\u65e0\u8bba\u4e0a\u6e38\u8fed\u4ee3\u5668\u63d0\u4f9b\u7684\u6570\u636e\u662f\u5426\u7b26\u5408\u6761\u4ef6\uff0c\u90fd\u9700\u8981\u4e3a\u4e0b\u6e38\u8fed\u4ee3\u5668\u63d0\u4f9b\u6570\u636e\u3002\u540c\u65f6\uff0c\u7ef4\u62a4\u8fed\u4ee3\u5668\u7684\u72b6\u6001\u4e5f\u662f\u4e00\u4e2a\u95ee\u9898\u3002\u4e0b\u9762\u6211\u4eec\u5f15\u5165\u4e00\u4e2a\u65b0\u7684\u51fd\u6570 `flatMap` \u6765\u7814\u7a76\u4e00\u4e0b\u3002\\n\\n### \u6241\u5e73\u5316\uff08\u4e0a\uff09\\n\\n\u6709\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u628a\u4e00\u4e2a\u5143\u7d20\u6620\u5c04\u6210\u591a\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u518d\u5904\u7406\u3002\u4f8b\u5982\\n\\n```javascript\\nlet result = []\\nfor (let i = 0; i < 3; i++) {\\n    for (let j = 0; j <= i; j++) {\\n        result.push(j);\\n    }\\n}\\nconsole.log(result); // prints [0, 0, 1, 0, 1, 2]\\n```\\n\\n\u5982\u679c\u8fd9\u91cc\u7528 `map` \u548c `iota` \u51fd\u6570\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a\u6570\u7ec4\u7684\u6570\u7ec4\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u6241\u5e73\u7684\u6570\u7ec4\u3002\u8fd9\u5c31\u9700\u8981 `flatMap`\uff0c\u5b83\u53ef\u4ee5\u628a\u4e00\u4e2a\u5143\u7d20\u6620\u5c04\u6210\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u8fed\u4ee3\u5668\u7684\u6240\u6709\u5143\u7d20\u4e32\u8054\u8d77\u6765\u3002\u6211\u4eec\u5148\u7ed9\u51fa\u5b83\u7684\u6279\u5904\u7406\u7248\u672c\u3002\\n\\n```javascript\\nfunction flatMap(mapper, array) {\\n    let result = [];\\n    for (const item of array) {\\n        for (const subitem of mapper(item)) {\\n            result.push(subitem);\\n        }\\n        // or you can use spread operator:\\n        // result.push(...mapper(item));\\n    }\\n    return result;\\n}\\n\\nconsole.log(flatMap(x => iota(x + 1), iota(3))); // prints [0, 0, 1, 0, 1, 2]\\n```\\n\\n\u4f46\u5982\u679c\u6211\u4eec\u8981\u5b9e\u73b0\u4e00\u4e2a\u8fed\u4ee3\u5668\u7248\u672c\u7684 `flatMap`\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u51fd\u6570\u7684\u5b9e\u73b0\u53d8\u5f97\u975e\u5e38\u590d\u6742\u3002\\n\\n```javascript\\nfunction flatMap(mapper, upstream) {\\n    let iterator = null;\\n    return iterate(() => {\\n        while (true) {\\n            if (iterator === null) {\\n                let next = upstream.next();\\n                if (next.done) {\\n                    return done();\\n                }\\n                iterator = mapper(next.value);\\n            }\\n            let next = iterator.next();\\n            if (next.done) {\\n                iterator = null;\\n                continue;\\n            }\\n            return next;\\n        }\\n    });\\n}\\n\\nconsole.log(toArray(flatMap(x => iota(x + 1), iota(3)))); // prints [0, 0, 1, 0, 1, 2]\\n```\\n\\n### \u751f\u6210\u5668\\n\\n\u4e3a\u4e86\u89e3\u51b3\u624b\u5de5\u7f16\u5199\u8fed\u4ee3\u5668\u4ee3\u7801\u7684\u96be\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u751f\u6210\u5668\u534f\u7a0b\u6765\u7b80\u5316\u8fd9\u4e2a\u8fc7\u7a0b\u3002\\n\\n`function*` \u8868\u660e\u8fd9\u4e2a\u51fd\u6570\u662f\u4e00\u4e2a\u751f\u6210\u5668\u534f\u7a0b\uff0c\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668\u3002\u51fd\u6570\u4e2d\u7684 `yield` \u5173\u952e\u5b57\u53ef\u4ee5\u8ba9\u4e00\u4e2a\u51fd\u6570\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\u6682\u505c\uff0c\u7136\u540e\u518d\u6b21\u8c03\u7528\u65f6\u4ece\u6682\u505c\u7684\u5730\u65b9\u7ee7\u7eed\u6267\u884c\uff0c\u51fd\u6570\u7684\u6267\u884c\u8fc7\u7a0b\u5c31\u50cf\u4e00\u4e2a\u8fed\u4ee3\u5668\u4e00\u6837\u3002\u8fd9\u6837\u8fed\u4ee3\u5668\u7684\u72b6\u6001\u5c31\u53ef\u4ee5\u4fdd\u5b58\u5728\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u4e2d\uff0c\u800c\u4e0d\u9700\u8981\u624b\u52a8\u7ef4\u62a4\u3002\\n\\n```javascript\\nfunction* iota(n) {\\n    for (let i = 0; i < n; i++) {\\n        yield i;\\n    }\\n}\\n\\nfunction* map(mapper, upstream) {\\n    for (const item of upstream) {\\n        yield mapper(item);\\n    }\\n}\\n\\nfunction* filter(predicate, upstream) {\\n    for (const item of upstream) {\\n        if (predicate(item)) {\\n            yield item;\\n        }\\n    }\\n}\\n\\nfunction* take(n, upstream) {\\n    for (const item of upstream) {\\n        if (n-- <= 0) {\\n            break;\\n        }\\n        yield item;\\n    }\\n}\\n\\nfunction* skip(n, upstream) {\\n    for (const item of upstream) {\\n        if (n-- > 0) {\\n            continue;\\n        }\\n        yield item;\\n    }\\n}\\n\\n// forEach and toArray are the same as before since they are terminal operations\\n\\nforEach(console.log, take(3, skip(1, filter(x => x % 2 == 0, map(x => x * x, iota(10))))));\\n```\\n\\n\u4e0d\u59a8\u518d\u6765\u770b\u770b\u8fd9\u4e2a\u7248\u672c\u7684 `flatMap`\u3002\\n\\n```javascript\\nfunction* flatMap(mapper, upstream) {\\n    for (const item of upstream) {\\n        for (const subitem of mapper(item)) {\\n            yield subitem;\\n        }\\n        // or you can use yield* to delegate to another generator\\n        // yield* mapper(item);\\n    }\\n}\\n\\nconsole.log(toArray(flatMap(x => iota(x + 1), iota(3))));\\n```\\n\\n`yield*` \u5173\u952e\u5b57\u53ef\u4ee5\u8ba9\u4e00\u4e2a\u751f\u6210\u5668\u534f\u7a0b\u59d4\u6258\u7ed9\u53e6\u4e00\u4e2a\u751f\u6210\u5668\u534f\u7a0b\u3002\u751f\u6210\u5668\u5185\u90e8\u5b9e\u9645\u4e0a\u7ef4\u62a4\u4e86\u4e00\u4e2a\u6808\uff0c\u6bcf\u6b21\u8c03\u7528 `next` \u65b9\u6cd5\u65f6\uff0c\u4f1a\u4ece\u6808\u9876\u53d6\u51fa\u4e00\u4e2a\u751f\u6210\u5668\u534f\u7a0b\u6267\u884c\u3002\u751f\u6210\u5668\u8017\u5c3d\uff0c\u5f39\u51fa\u6808\u9876\u7684\u751f\u6210\u5668\u534f\u7a0b\uff0c\u7ee7\u7eed\u6267\u884c\u4e0a\u4e00\u4e2a\u751f\u6210\u5668\u534f\u7a0b\u3002\u8fd9\u6837\u7684\u673a\u5236\u8fdb\u4e00\u6b65\u7701\u53bb\u4e86\u5d4c\u5957\u5e26\u6765\u7684\u9ebb\u70e6\u3002\\n\\n\u751f\u6210\u5668\u534f\u7a0b\u662f\u4e00\u79cd\u975e\u5e38\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u53ef\u4ee5\u8ba9\u6211\u4eec\u7528\u4e00\u79cd\u975e\u5e38\u76f4\u89c2\u7684\u65b9\u5f0f\u6765\u5904\u7406\u8fed\u4ee3\u5668\u3002\\n\\n### \u94fe\u5f0f\u8c03\u7528\uff08\u4e0a\uff09\\n\\n\u4e0d\u8fc7\u5957\u5a03\u7684\u65b9\u5f0f\u8fd8\u662f\u6709\u70b9\u7e41\u7410\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u94fe\u5f0f\u8c03\u7528\u7684\u65b9\u5f0f\u6765\u7b80\u5316\u4ee3\u7801\u3002\u4e0d\u540c\u7684\u8bed\u8a00\u5bf9\u8fd9\u5757\u7684\u5904\u7406\u65b9\u5f0f\u4e0d\u5c3d\u76f8\u540c\uff0c\u8fd9\u91cc\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u5b9e\u73b0\u3002\\n\\n:::info\\n\u5bf9\u4e0d\u4e86\u89e3 JavaScript \u7684\u8bfb\u8005\u6765\u8bf4\uff0c\u8fd9\u91cc\u7684\u4ee3\u7801\u53ef\u80fd\u6709\u70b9\u96be\u4ee5\u7406\u89e3\uff0c\u8fd9\u91cc\u505a\u4e00\u70b9\u7b80\u5355\u7684\u89e3\u91ca\u3002\\n\\n`Object.assign` \u53ef\u4ee5\u628a\u591a\u4e2a\u5bf9\u8c61\u5408\u5e76\u6210\u4e00\u4e2a\u5bf9\u8c61\u3002\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u76ee\u6807\u5bf9\u8c61\uff0c\u540e\u9762\u7684\u53c2\u6570\u662f\u6e90\u5bf9\u8c61\u3002\u8fd9\u4e2a\u51fd\u6570\u4f1a\u628a\u6e90\u5bf9\u8c61\u7684\u5c5e\u6027\u590d\u5236\u5230\u76ee\u6807\u5bf9\u8c61\u4e0a\uff0c\u5e76\u8fd4\u56de\u76ee\u6807\u5bf9\u8c61\u3002\\n\\n`chain` \u51fd\u6570\u7684\u4f5c\u7528\u5c31\u662f\u7ed9\u4e0a\u6e38\u7684\u8fed\u4ee3\u5668\u6dfb\u52a0 `map`\u3001`filter`\u3001`take`\u3001`skip`\u3001`flatMap`\u3001`forEach`\u3001`toArray` \u8fd9\u51e0\u4e2a\u65b9\u6cd5\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u94fe\u5f0f\u8c03\u7528\u4e86\u3002\\n:::\\n\\n```javascript\\nfunction chain(upstream) {\\n    return Object.assign(upstream, {\\n        map: mapper => chain(map(mapper, upstream)),\\n        filter: predicate => chain(filter(predicate, upstream)),\\n        take: n => chain(take(n, upstream)),\\n        skip: n => chain(skip(n, upstream)),\\n        flatMap: mapper => chain(flatMap(mapper, upstream)),\\n        forEach: fn => forEach(fn, upstream),\\n        toArray: () => toArray(upstream)\\n    });\\n}\\n\\nfunction decorate(source) {\\n    return (...args) => chain(source(...args));\\n}\\n\\niota = decorate(iota);\\n\\niota(10)\\n    .map(x => x * x)\\n    .filter(x => x % 2 == 0)\\n    .skip(1)\\n    .take(3)\\n    .forEach(console.log);\\n\\nconsole.log(iota(3)\\n    .flatMap(x => iota(x + 1))\\n    .toArray());\\n```\\n\\n## \u6d41\u6c34\u7ebf\uff08\u4e0b\uff09\\n\\n\u6d41\u6c34\u7ebf\u9664\u4e86\u5e26\u6765\u5ef6\u65f6\u6c42\u503c\u7684\u597d\u5904\uff0c\u8fd8\u6709\u4e00\u4e2a\u597d\u5904\u662f\u53ef\u4ee5\u5e76\u884c\u5904\u7406\u3002\u4f46\u662f\u4e0a\u9762\u57fa\u4e8e\u8fed\u4ee3\u5668\u4f3c\u4e4e\u4e0d\u592a\u5bb9\u6613\u5b9e\u73b0\u5e76\u884c\u5904\u7406\u3002\u5f52\u6839\u7ed3\u5e95\uff0c\u8fd9\u662f\u56e0\u4e3a\\n- \u4e00\u4e2a\u8fed\u4ee3\u5668\u7684\u6570\u636e\u53ea\u80fd\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u8fed\u4ee3\u5668\uff0c\u800c\u4e0d\u80fd\u4f20\u9012\u7ed9\u591a\u4e2a\u8fed\u4ee3\u5668\u3002\\n- \u7ecf\u8fc7\u5c42\u5c42\u5957\u5a03\uff0c\u6570\u636e\u7684\u6e90\u5934\u88ab\u9690\u85cf\u4e86\uff0c\u65e0\u6cd5\u6709\u6548\u7684\u5206\u5272\u6765\u5b9e\u73b0\u5e76\u884c\u5904\u7406\u3002\\n\\n\u90a3\u6211\u4eec\u80fd\u4e0d\u80fd\u8bbe\u8ba1\u4e00\u4e2a\u66f4\u52a0\u7075\u6d3b\u7684\u6d41\u6c34\u7ebf\u5462\uff1f\u8fd9\u9700\u8981\u4e00\u4e9b\u9006\u5411\u601d\u7ef4\u2014\u2014\u80fd\u5426\u4e0d\u518d\u662f\u4e0b\u6e38\u8fed\u4ee3\u5668\u4e3b\u52a8\u8c03\u7528\u4e0a\u6e38\u8fed\u4ee3\u5668\uff0c\u800c\u662f\u4e0a\u6e38\u8fed\u4ee3\u5668\u4e3b\u52a8\u628a\u6570\u636e\u4f20\u9012\u7ed9\u4e0b\u6e38\u8fed\u4ee3\u5668\u5462\uff1f\\n\\n### \u56de\u8c03\\n\\n\u73b0\u5728\u6211\u4eec\u5b8c\u5168\u628a\u4e0a\u4e0b\u6e38\u5173\u7cfb\u5012\u7f6e\uff0c\u91cd\u65b0\u7f16\u5199\u5982\u4e0b\u7684\u6d41\u6c34\u7ebf\u3002\\n\\n```javascript\\nfunction iota(n, downstream) {\\n    for (let i = 0; i < n; i++) {\\n        downstream(i);\\n    }\\n}\\n\\nfunction map(mapper, downstream) {\\n    return item => {\\n        downstream(mapper(item));\\n    };\\n}\\n\\nfunction filter(predicate, downstream) {\\n    return item => {\\n        if (predicate(item)) {\\n            downstream(item);\\n        }\\n    };\\n}\\n\\nfunction take(n, downstream) {\\n    return item => {\\n        if (n-- > 0) {\\n            downstream(item);\\n        }\\n    };\\n}\\n\\nfunction skip(n, downstream) {\\n    return item => {\\n        if (n-- <= 0) {\\n            downstream(item);\\n        }\\n    };\\n}\\n\\nfunction forEach(fn) {\\n    return item => {\\n        fn(item);\\n    };\\n}\\n\\nfunction toArray(result) {\\n    return item => {\\n        result.push(item);\\n    };\\n}\\n\\niota(10, map(x => x * x, filter(x => x % 2 == 0, skip(1, take(3, forEach(console.log))))));\\nlet result = [];\\niota(10, toArray(result));\\nconsole.log(result);\\n```\\n\\n\u8bf7\u6ce8\u610f\u6700\u540e\u4e00\u884c\u7684\u5957\u5a03\u987a\u5e8f\uff0c\u5df2\u7ecf\u5b8c\u5168\u53cd\u8f6c\u4e86\u3002\u4e0e\u521a\u624d\u7684\u903b\u8f91\u5b8c\u5168\u4e0d\u540c\uff0c\u6574\u4e2a\u6d41\u6c34\u7ebf\u662f\u7531\u6e90\u5934\u800c\u975e\u7ec8\u70b9\u9a71\u52a8\u7684\u3002\u73b0\u5728\u6bcf\u4e00\u4e2a\u73af\u8282\u90fd\u53ea\u5904\u7406\u4e00\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u628a\u8fd9\u4e2a\u5143\u7d20\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u73af\u8282\u3002\u8fd9\u4e00\u70b9\u4ece\u8fd9\u51e0\u4e2a\u51fd\u6570\u7684\u5b9a\u4e49\u5c31\u80fd\u770b\u51fa\u6765\uff0c\u975e\u5e38\u7b80\u5355\u76f4\u63a5\u3002\\n\\n### \u77ed\u8def\\n\\n\u8fd9\u6837\u9a71\u52a8\u7684\u6d41\u6c34\u7ebf\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u5f53\u4e0b\u6e38\u5e0c\u671b\u7ed3\u675f\u6d41\u6c34\u7ebf\u65f6\uff0c\u4e0a\u6e38\u5e76\u4e0d\u77e5\u9053\u3002\u6240\u4ee5\u9700\u8981\u624b\u52a8\u5b9e\u73b0\u4e00\u4e2a\u77ed\u8def\u673a\u5236\u3002\\n\\n```javascript\\nfunction iota(n, downstream) {\\n    for (let i = 0; i < n; i++) {\\n        if (downstream.cancelled()) {\\n            return;\\n        }\\n        console.log(`iota: ${i}`); // for demonstration\\n        downstream(i);\\n    }\\n}\\n\\nfunction delegateCancellable(downstream, fn) {\\n    return Object.assign(fn, {\\n        cancelled: () => downstream.cancelled()\\n    });\\n}\\n\\nfunction map(mapper, downstream) {\\n    return delegateCancellable(downstream, item => {\\n        downstream(mapper(item));\\n    });\\n}\\n\\nfunction filter(predicate, downstream) {\\n    return delegateCancellable(downstream, item => {\\n        if (predicate(item)) {\\n            downstream(item);\\n        }\\n    });\\n}\\n\\nfunction take(n, downstream) {\\n    return Object.assign(item => {\\n        if (n-- > 0) {\\n            downstream(item);\\n        }\\n    }, {\\n        cancelled: () => n <= 0 || downstream.cancelled()\\n    });\\n}\\n\\nfunction skip(n, downstream) {\\n    return delegateCancellable(downstream, item => {\\n        if (n-- <= 0) {\\n            downstream(item);\\n        }\\n    });\\n}\\n\\nfunction forEach(fn) {\\n    return Object.assign(item => {\\n        fn(item)\\n    }, {\\n        cancelled: () => false\\n    });\\n}\\n\\niota(10, map(x => x * x, filter(x => x % 2 === 0, skip(1, take(3, forEach(console.log))))));\\n```\\n\\n\u8f93\u51fa\uff1a\\n\\n```\\niota: 0\\niota: 1\\niota: 2\\n4\\niota: 3\\niota: 4\\n16\\niota: 5\\niota: 6\\n36\\n```\\n\\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u4efb\u4f55\u4e00\u4e2a\u73af\u8282\u4e2d\u7ec8\u6b62\u6d41\u6c34\u7ebf\u3002\\n\\n\u4e3a\u4e86\u7b80\u6d01\u8d77\u89c1\uff0c\u540e\u9762\u7684\u4ee3\u7801\u4e2d\u6211\u4eec\u7701\u7565\u4e86\u8fd9\u4e2a\u673a\u5236\u3002\\n\\n### \u94fe\u5f0f\u8c03\u7528\uff08\u4e0b\uff09(\u4e00)\\n\\n\u8fd9\u4e2a\u5f62\u5f0f\u770b\u4e0a\u53bb\u4f3c\u4e4e\u4e0d\u592a\u5bb9\u6613\u5d4c\u5957\u2014\u2014\u60f3\u8981\u589e\u52a0\u4e00\u6b65\u64cd\u4f5c\uff0c\u5728\u5916\u5957\u4e00\u5c42\u662f\u5f88\u7b26\u5408\u76f4\u89c9\u7684\uff0c\u4f46\u662f\u5f80\u6700\u91cc\u9762\u585e\u4e00\u5c42\u5374\u9700\u8981\u4e00\u4e9b\u51fd\u6570\u5f0f\u7684\u6280\u5de7\u3002\u6211\u4eec\u7ed9\u51fa\u4e00\u4e2a\u7b80\u5355\u7684\u94fe\u5f0f\u8c03\u7528\u7684\u5b9e\u73b0\u3002\\n\\n```javascript\\nfunction chain(source) {\\n    return Object.assign(source, {\\n        map: mapper => chain(downstream => source(map(mapper, downstream))),\\n        filter: predicate => chain(downstream => source(filter(predicate, downstream))),\\n        take: n => chain(downstream => source(take(n, downstream))),\\n        skip: n => chain(downstream => source(skip(n, downstream))),\\n        forEach: fn => source(forEach(fn)),\\n        toArray: () => {\\n            let result = [];\\n            source(toArray(result));\\n            return result;\\n        }\\n    });\\n}\\n\\nfunction decorate(source) {\\n    return (...args) => chain(downstream => source(...args, downstream));\\n}\\n\\niota = decorate(iota);\\n\\niota(10)\\n    .map(x => x * x)\\n    .filter(x => x % 2 == 0)\\n    .skip(1)\\n    .take(3)\\n    .forEach(console.log);\\n```\\n\\n\u5e0c\u671b\u4f60\u6682\u65f6\u6ca1\u88ab\u7ed5\u6655\uff0c\u56e0\u4e3a\u9b54\u6cd5\u624d\u521a\u521a\u5f00\u59cb\uff0c\u63a5\u4e0b\u6765\uff0c\u51c6\u5907\u8fce\u63a5\u51fd\u6570\u5f0f\u7684\u6d17\u793c\u5427\uff01\\n\\n### \u79d1\u91cc\u5316\\n\\n\u6240\u8c13\u79d1\u91cc\u5316\uff0c\u5c31\u662f\u628a\u4e00\u4e2a\u591a\u53c2\u6570\u7684\u51fd\u6570\u8f6c\u6362\u6210\u4e00\u7cfb\u5217\u5355\u53c2\u6570\u51fd\u6570\u7684\u8fc7\u7a0b\u3002\u4f8b\u5982\uff1a\\n\\n```javascript\\nfunction add(x, y) {\\n    return x + y;\\n}\\nlet sum = add(1, 2);\\n```\\n\\n\u53ef\u4ee5\u8f6c\u6362\u6210\\n\\n```javascript\\nfunction add(x) {\\n    return y => x + y;\\n}\\nlet sum = add(1)(2);\\n```\\n\\n\u8fd9\u6837\u7684\u597d\u5904\u662f\u53ef\u4ee5\u66f4\u52a0\u7075\u6d3b\u7684\u7ec4\u5408\u51fd\u6570\u3002\\n\\n\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6bcf\u4e00\u4e2a\u73af\u8282\u90fd\u8f6c\u6362\u6210\u4e00\u4e2a\u5355\u53c2\u6570\u51fd\u6570\uff0c\u7136\u540e\u518d\u7ec4\u5408\u8d77\u6765\u3002\\n\\n```javascript\\nfunction iota(n) {\\n    return downstream => {\\n        for (let i = 0; i < n; i++) {\\n            downstream(i);\\n        }\\n    };\\n}\\n\\nfunction map(mapper) {\\n    return downstream => item => {\\n        downstream(mapper(item));\\n    };\\n}\\n\\nfunction filter(predicate) {\\n    return downstream => item => {\\n        if (predicate(item)) {\\n            downstream(item);\\n        }\\n    };\\n}\\n\\nfunction take(n) {\\n    return downstream => item => {\\n        if (n-- > 0) {\\n            downstream(item);\\n        }\\n    };\\n}\\n\\nfunction skip(n) {\\n    return downstream => item => {\\n        if (n-- <= 0) {\\n            downstream(item);\\n        }\\n    };\\n}\\n\\n// forEach and toArray are the same as before since they are terminal operations\\n\\niota(10)(map(x => x * x)(filter(x => x % 2 == 0)(skip(1)(take(3)(forEach(console.log))))));\\n```\\n\\n### \u6241\u5e73\u5316\uff08\u4e0b\uff09\\n\\n:::tip\\n\u5f00\u59cb\u4e4b\u524d\uff0c\u53ef\u4ee5\u5148\u9605\u8bfb\u4e00\u4e0b [Lambda Calculus](https://yaossg.com/site/docs/lambda) \u7684\u4ecb\u7ecd\u3002\\n:::\\n\\n\u5728\u6d41\u6c34\u7ebf\u5012\u7f6e\u4e4b\u540e\uff0c\u5faa\u73af\u4fbf\u4ece\u4e2d\u95f4\u7684\u8fc7\u7a0b\u4e2d\u6d88\u5931\u4e86\uff0c\u51fd\u6570\u53d8\u5f97\u5f02\u5e38\u7b80\u5355\uff0c\u8fd9\u4e5f\u4e3a\u6211\u4eec\u7aa5\u89c6\u4ed6\u4eec\u7684\u672c\u8d28\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7edd\u4f73\u7684\u673a\u4f1a\u3002\\n\\n\u4f8b\u5982\uff0c\u5982\u679c\u81ea\u5df1\u89c2\u5bdf\u4e0a\u9762 `forEach` \u7684\u5b9e\u73b0\uff0c\u5c31\u4f1a\u53d1\u73b0\u5b83\u5176\u5b9e\u7b49\u4ef7\u4e8e\u539f\u5c01\u4e0d\u52a8\u7684\u8fd4\u56de\u4e86\u5b83\u7684\u53c2\u6570\u3002\\n\\n```javascript\\nfunction forEach(fn) {\\n    return item => {\\n        fn(item);\\n    };\\n    // or you can return fn directly\\n    // return fn;\\n}\\n```\\n\\n\u5982\u679c\u4f60\u81ea\u5df1\u89c2\u5bdf\uff0c\u5c31\u4f1a\u53d1\u73b0\u8fd9\u5176\u5b9e\u662f lambda calculus \u4e2d\u7684 [eta reduction](https://yaossg.com/site/docs/lambda/1#eta-reduction)\u3002\\n\\n$$\\n\\\\lambda y.xy = x\\n$$\\n\\n\u800c `map` \u51fd\u6570\u7684\u5b9a\u4e49\uff1a\\n\\n```javascript\\nfunction map(mapper) {\\n    return downstream => item => {\\n        downstream(mapper(item));\\n    };\\n}\\n```\\n\\n\u53ef\u4ee5\u5199\u6210\\n\\n```javascript\\nconst map = mapper => downstream => item => downstream(mapper(item));\\n```\\n\\n\u51fd\u6570\u53c2\u6570\u7684\u540d\u5b57\u5e76\u4e0d\u91cd\u8981\uff08[alpha reduction](https://yaossg.com/site/docs/lambda/1#alpha-reduction)\uff09\uff0c\u7565\u53bb\u540d\u5b57\u53ef\u5f97\\n\\n```javascript\\nconst map = f => g => x => g(f(x));\\n```\\n\\n\u8bb0\u4f5c lambda calculus \u4e2d\u7684\u5f62\u5f0f\uff1a\\n\\n$$\\n\\\\text{map}=\\\\lambda f.\\\\lambda g.\\\\lambda x.g(fx)\\n$$\\n\\n\u4f60\u4f1a\u610f\u8bc6\u5230\u8fd9\u662f\u4e00\u79cd\u7eaf\u7cb9\u7684\u51fd\u6570\u7ec4\u5408\uff1a\u628a `f` \u548c `g` \u7ec4\u5408\u8d77\u6765\uff0c\u5148\u8c03\u7528 `f`\uff0c\u7136\u540e\u7528\u7ed3\u679c\u518d\u8c03\u7528 `g`\u3002\\n\\n\u73b0\u5728\uff0c\u8bf7\u4f60\u601d\u8003\u4e00\u4e0b\uff1a `flatMap` \u51fd\u6570\u8be5\u5982\u4f55\u5b9a\u4e49\uff1f\\n\\n\u4f60\u4f1a\u53d1\u73b0\uff0c`mapper(item)` \u8fd4\u56de\u7684\u5bf9\u8c61\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u53ef\u4ee5\u9a71\u52a8\u4e0b\u6e38\u7684\u6e90\u5934\u3002\u76f4\u63a5\u5c06\u5b83\u7528\u4e8e\u9a71\u52a8\u4e0b\u6e38\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u6241\u5e73\u5316\u7684\u6548\u679c\u3002\\n\\n```javascript\\nfunction flatMap(mapper) {\\n    return downstream => item => {\\n        mapper(item)(downstream);\\n    };\\n}\\n\\nlet result = [];\\niota(3)(flatMap(x => iota(x + 1))(toArray(result)));\\nconsole.log(result);\\n```\\n\\n\u4e5f\u53ef\u4ee5\u5199\u6210\\n\\n```javascript\\nconst flatMap = mapper => downstream => item => mapper(item)(downstream);\\n```\\n\\n\u7565\u53bb\u540d\u5b57\u53ef\u5f97\\n\\n```javascript\\nconst flatMap = f => g => x => f(x)(g);\\n```\\n\\n\u8bb0\u4f5c lambda calculus \u4e2d\u7684\u5f62\u5f0f\uff1a\\n\\n$$\\n\\\\text{flatMap}=\\\\lambda f.\\\\lambda g.\\\\lambda x.fxg\\n$$\\n\\n\u5728\u8fd9\u4e4b\u524d\uff0c\u4f60\u53ef\u80fd\u6839\u672c\u4e0d\u4f1a\u76f8\u4fe1\uff0c`f => g => x => g(f(x))` \u548c `f => g => x => f(x)(g)` \u7adf\u7136\u6709\u8fd9\u6837\u7684\u542b\u4e49\u3002\\n\\n\\n### \u94fe\u5f0f\u8c03\u7528\uff08\u4e0b\uff09(\u4e8c)\\n\\n\u6211\u4eec\u4e0d\u59a8\u91cd\u65b0\u5b9e\u73b0\u4e00\u6b21\u94fe\u5f0f\u8c03\u7528\uff0c\u4f46\u5229\u7528\u79d1\u91cc\u5316\u7684\u4f18\u52bf\uff0c\u91c7\u53d6\u4e0d\u540c\u7684\u7b56\u7565\u2014\u2014\u628a\u6bcf\u4e00\u6b65\u5b58\u8d77\u6765\uff0c\u5230\u6700\u540e\u518d\u8fdb\u884c\u7ec4\u5408\u3002\u8fd9\u4e2a\u7b56\u7565\u7684\u597d\u5904\u5728\u540e\u9762\u7684\u5c0f\u8282\u4f1a\u6709\u6240\u4f53\u73b0\u3002\\n\\n```javascript\\nfunction chain(source) {\\n    let actions = []\\n    \\n    return Object.assign(source, {\\n        pipe(action) {\\n            actions.push(action)\\n            return this\\n        },\\n        run(terminal) {\\n            let dowstream = terminal;\\n            while (actions.length > 0) {\\n                dowstream = actions.pop()(dowstream)\\n            }\\n            source(dowstream)\\n        },\\n        map: mapper => source.pipe(map(mapper)),\\n        filter: predicate => source.pipe(filter(predicate)),\\n        take: n => source.pipe(take(n)),\\n        skip: n => source.pipe(skip(n)),\\n        forEach: fn => source.run(forEach(fn)),\\n        toArray: () => {\\n            let result = [];\\n            source.run(toArray(result));\\n            return result;\\n        }\\n    });\\n}\\n\\nfunction decorate(source) {\\n    return (...args) => chain(source(...args));\\n}\\n\\niota = decorate(iota)\\n\\niota(10)\\n    .map(x => x * x)\\n    .filter(x => x % 2 == 0)\\n    .skip(1)\\n    .take(3)\\n    .forEach(console.log);\\n```\\n\\n### \u5206\u5272\u4e0e\u5e76\u884c\\n\\n\u6709\u4e86\u4ee5\u4e0a\u7684\u5185\u5bb9\u4f5c\u4e3a\u94fa\u57ab\uff0c\u6211\u4eec\u73b0\u5728\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5b9e\u73b0\u5e76\u884c\u5904\u7406\u3002\\n\\n:::warning\\n\u5f88\u9057\u61be\uff0c\u4e00\u822c\u6765\u8bf4 JavaScript \u662f\u5355\u7ebf\u7a0b\u7684\uff0c\u800c Web Worker \u592a\u91cd\u91cf\u7ea7\u4e0d\u9002\u7528\u4e8e\u6211\u4eec\u8fd9\u79cd\u60c5\u666f\u3002\u6240\u4ee5\u63a5\u4e0b\u6765\u5b9e\u73b0\u7684\u5e76\u884c\u53ea\u662f\u4e00\u79cd\u6a21\u62df\uff0c\u5927\u5bb6\u5c31\u5f53\u54b1\u53ea\u6709\u4e00\u4e2a\u6838\u5fc3\u7684 CPU \u5c31\u597d\u4e86\u3002\u5982\u679c\u4f60\u91c7\u7528\u7684\u662f\u5176\u4ed6\u8bed\u8a00\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u7684\u5b9e\u73b0\u771f\u6b63\u7684\u5e76\u884c\u3002\\n:::\\n\\n\u5b9e\u73b0\u5e76\u884c\u7684\u6838\u5fc3\u5728\u4e8e\uff0c\u5c06\u6570\u636e\u6e90\u5206\u5272\u6210\u4e24\u90e8\u5206\uff0c\u7136\u540e\u5206\u522b\u4f20\u9012\u7ed9\u4e24\u4e2a\u4e0b\u6e38\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5148\u6dfb\u52a0\u4e00\u4e2a `split` \u65b9\u6cd5\u3002\\n\\n```javascript\\nfunction half(n) {\\n    return Math.floor(n / 2);\\n}\\n\\nfunction iota(n) {\\n    return Object.assign(downstream => {\\n        for (let i = 0; i < n; i++) {\\n            downstream(i);\\n        }\\n    }, {\\n        split: () => [range(0, half(n)), range(half(n), n)]\\n    });\\n}\\n\\nfunction range(start, end) {\\n    return Object.assign(downstream => iota(end - start)(map(x => x + start)(downstream)), {\\n        split: () => [range(start, half(start + end)), range(half(start + end), end)]\\n    });\\n}\\n```\\n\\n\u7136\u540e\u7a0d\u5fae\u6539\u9020\u4e00\u4e0b\u6211\u4eec\u7684\u94fe\u5f0f\u8c03\u7528\u51fd\u6570\u3002\u8fd9\u91cc\u4e0d\u59a8\u8ba9\u6211\u4eec\u5047\u8bbe `||` \u5c31\u662f\u6211\u6dfb\u52a0\u7684\u5e76\u884c\u64cd\u4f5c\u7b26\u3002\u6211\u6545\u610f\u8ba9\u53f3\u8fb9\u7684\u64cd\u4f5c\u7b26\u5148\u6267\u884c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6a21\u62df\u5e76\u884c\u4e71\u5e8f\u7684\u6548\u679c\u3002\\n\\n```javascript\\nfunction chain(source) {\\n    let actions = []\\n    let is_parallel = false\\n    \\n    return Object.assign(source, {\\n        parallel() {\\n            is_parallel = true\\n            return this\\n        },\\n        pipe(action) {\\n            actions.push(action)\\n            return this\\n        },\\n        run(terminal) {\\n            let downstream = terminal;\\n            while (actions.length > 0) {\\n                downstream = actions.pop()(downstream)\\n            }\\n            if (is_parallel) {\\n                let [left, right] = source.split()\\n                right(downstream) || left(downstream) // fake parallelism\\n            } else {\\n                source(downstream)\\n            }\\n        },\\n        map: mapper => source.pipe(map(mapper)),\\n        filter: predicate => source.pipe(filter(predicate)),\\n        forEach: fn => source.run(forEach(fn))\\n    });\\n}\\n\\nfunction decorate(source) {\\n    return (...args) => chain(source(...args))\\n}\\n\\niota = decorate(iota)\\nrange = decorate(range)\\n\\nrange(2, 10)\\n    .map(x => x * x)\\n    .filter(x => x % 2 == 0)\\n    .parallel()\\n    .forEach(console.log) // prints 36, 64, 4, 16\\n```\\n\\n\u5bf9\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u753b\u4e00\u5f20\u793a\u610f\u56fe\uff1a\\n\\n```mermaid\\ngraph LR\\n    range1[\\"range(2, 6)\\"] --\x3e map1[\\"map\\"] --\x3e filter1[\\"filter\\"] --\x3e forEach1[\\"forEach\\"]\\n    range2[\\"range(6, 10)\\"] --\x3e map2[\\"map\\"] --\x3e filter2[\\"filter\\"] --\x3e forEach2[\\"forEach\\"]\\n    range[\\"range(2, 10)\\"] --\x3e split[\\"split\\"] --\x3e range1\\n    split --\x3e range2\\n    \\n```\\n\\n\\n### \u72b6\u6001\u548c\u987a\u5e8f\\n\\n\u4f60\u53ef\u80fd\u6ce8\u610f\u5230\u6211\u8fd9\u91cc\u53ea\u7528\u4e86 `map` \u548c `filter`\uff0c`take` \u548c `skip` \u4f3c\u4e4e\u88ab\u7701\u7565\u4e86\u3002\u8fd9\u662f\u56e0\u4e3a \\n\\n- `map` \u548c `filter` \u662f\u65e0\u72b6\u6001\u7684\uff0c\u800c `take` \u548c `skip` \u662f\u6709\u72b6\u6001\u7684\u3002\\n- `map` \u548c `filter` \u662f\u65e0\u5e8f\u7684\uff0c\u800c `take` \u548c `skip` \u662f\u6709\u5e8f\u7684\u3002\\n\\n\u6240\u8c13\u6709\u72b6\u6001\uff0c\u662f\u6307\u4e00\u4e2a\u51fd\u6570\u7684\u8f93\u51fa\u4f9d\u8d56\u4e8e\u4e4b\u524d\u7684\u8f93\u5165\u3002\u4f8b\u5982 `take` \u51fd\u6570\uff0c\u5b83\u9700\u8981\u8bb0\u5f55\u5df2\u7ecf\u5904\u7406\u4e86\u591a\u5c11\u4e2a\u5143\u7d20\u3002\u5728\u5e76\u884c\u5316\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u72b6\u6001\u662f\u65e0\u6cd5\u5171\u4eab\u7684\u3002\\n\\n\u6240\u8c13\u6709\u5e8f\uff0c\u662f\u6307\u5143\u7d20\u4e4b\u95f4\u6709\u987a\u5e8f\u5173\u7cfb\u3002\u4f8b\u5982 `skip` \u51fd\u6570\uff0c\u5b83\u8df3\u8fc7\u7684\u662f\u5f00\u5934\u7684\u51e0\u4e2a\u5143\u7d20\u3002\u5728\u5e76\u884c\u5316\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u987a\u5e8f\u662f\u65e0\u6cd5\u4fdd\u8bc1\u7684\u3002\\n\\n\u6709\u72b6\u6001\u4e0d\u4e00\u5b9a\u8981\u6c42\u6709\u5e8f\uff0c\u4f8b\u5982\u5982\u679c\u6211\u4eec\u4e3a\u6211\u4eec\u7684\u6d41\u6c34\u7ebf\u6dfb\u52a0\u4e00\u4e2a `sort()`\uff0c\u5b83\u662f\u6709\u72b6\u6001\u7684\uff0c\u4f46\u662f\u4e0d\u8981\u6c42\u6709\u5e8f\u3002\u6709\u5e8f\u4e00\u822c\u8981\u6c42\u6709\u72b6\u6001\uff0c\u4e0d\u7136\u8fd9\u79cd\u5e8f\u65e0\u6cd5\u4f53\u73b0\u3002\\n\\n\u60f3\u8981\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u5c31\u9700\u8981\u5728\u9047\u5230\u6709\u72b6\u6001\u548c\u6709\u5e8f\u7684\u51fd\u6570\u65f6\uff0c\u5c06\u6570\u636e\u8fdb\u884c\u6c47\u603b\uff0c\u5904\u7406\u5b8c\u4e4b\u540e\u7136\u540e\u518d\u5206\u53d1\u3002\u5927\u81f4\u7684\u601d\u8def\u662f\u8fd9\u6837\u7684\uff1a\\n\\n```mermaid\\ngraph LR\\nsrc--\x3esplit1[\\"split\\"]--\x3emap1[\\"map\\"]--\x3efilter1[\\"filter\\"]--\x3emerge--\x3eskip--\x3etake--\x3esplit2[\\"split\\"]--\x3eforEach1[\\"forEach\\"]\\n      split1[\\"split\\"]--\x3emap2[\\"map\\"]--\x3efilter2[\\"filter\\"]--\x3emerge\\n      split2[\\"split\\"]--\x3eforEach2[\\"forEach\\"]\\n```\\n\\n\u4e00\u822c\u6765\u8bf4\uff0c\u5b50\u5e8f\u5217\u5185\u90e8\u662f\u6709\u5e8f\u7684\uff0c\u4f46\u662f\u5b50\u5e8f\u5217\u4e4b\u95f4\u662f\u65e0\u5e8f\u7684\u3002\u6240\u4ee5\u5408\u5e76\u7684\u65f6\u5019\u53ef\u4ee5\u53c2\u8003\u6e90\u5934\u7684\u5206\u5272\u7684\u987a\u5e8f\u3002\\n\\n\u4e0d\u8fc7\uff0c\u5982\u679c\u6570\u636e\u6e90\u672c\u8eab\u5c31\u662f\u65e0\u5e8f\u7684\uff08\u5982\u54c8\u5e0c\u8868\uff09\uff0c\u90a3\u4e48 `take` \u53ef\u4ee5\u5728\u6240\u6709\u7ebf\u7a0b\u53d6\u81f3\u591a\u4efb\u610f `n` \u5143\u7d20\u540e\u5408\u5e76\u518d\u53d6 `n` \u4e2a\u5143\u7d20\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5e76\u884c\u5904\u7406\u4e86\u3002\u4f46\u662f\u5bf9\u4e8e\u5927\u591a\u6570\u60c5\u51b5\uff0c\u8fd9\u6837\u7684\u6280\u5de7\u5e76\u4e0d\u9002\u7528\u3002\\n\\n\u603b\u7684\u6765\u8bf4\uff0c\u8fd9\u4e00\u90e8\u5206\u7684\u5904\u7406\u662f\u6bd4\u8f83\u590d\u6742\u7684\uff0c\u6211\u5c31\u4e0d\u7ed9\u51fa\u4ee3\u7801\u4e86\uff0c~~\u7559\u4f5c\u4e60\u9898~~\u3002\\n\\n## \u53cd\u601d\uff1a\u66f2\u6c34\u6d41\u6b87\uff0c\u4e0a\u4e0b\u5176\u624b\\n\\n\u5728\u4e0a\u9762\u7684\u6587\u7ae0\u91cc\uff0c\u6211\u4eec\u4ecb\u7ecd\u4e86\u6d41\u6c34\u7ebf\u4e00\u4e9b\u4f18\u70b9\uff0c\u5982\u5ef6\u65f6\u6c42\u503c\u3001\u77ed\u8def\u6c42\u503c\u3001\u5e76\u884c\u6c42\u503c\u3002\u6d41\u6c34\u7ebf\u4f18\u70b9\u90a3\u4e48\u591a\uff0c\u6211\u5e94\u8be5\u5904\u5904\u4f7f\u7528\u5b83\u4eec\u5417\uff1f\\n\\n\u5f53\u7136\u4e0d\u662f\u3002\u6d41\u6c34\u7ebf\u540c\u65f6\u4e5f\u5e26\u6765\u4e86\u5f88\u591a\u95ee\u9898\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a\\n\\n- \u6d41\u6c34\u7ebf\u7684\u8c03\u8bd5\u6bd4\u8f83\u56f0\u96be\uff0c\u5c42\u5c42\u5d4c\u5957\u7684\u51fd\u6570\u8c03\u7528\u6808\u4f1a\u8ba9\u4f60\u5f88\u96be\u627e\u5230\u95ee\u9898\u6240\u5728\u3002\\n- \u6d41\u6c34\u7ebf\u7684\u7ed3\u6784\u4f1a\u6d88\u8017\u5f88\u591a\u5185\u5b58\uff0c\u6709\u65f6\u53ef\u80fd\u6bd4\u8981\u5904\u7406\u7684\u6570\u636e\u672c\u8eab\u8fd8\u591a\uff0c\u8fd9\u5bf9 GC \u8bed\u8a00\u6765\u8bf4\u662f\u4e0d\u5c0f\u7684\u8d1f\u62c5\u3002\\n- \u6d41\u6c34\u7ebf\u4e4b\u95f4\u7684\u64cd\u4f5c\u96be\u4e8e\u534f\u4f5c\uff0c\u65e0\u6cd5\u8fdb\u884c\u6574\u4f53\u4f18\u5316\u3002\uff08\u5982\u5c06 `sort` \u548c `take` \u5408\u5e76\u4e3a top-k \u7b97\u6cd5\uff09\\n- \u6d41\u6c34\u7ebf\u5e93\u63d0\u4f9b\u7684\u64cd\u4f5c\u6709\u9650\uff0c\u5f3a\u884c\u590d\u7528\u4ee3\u7801\u4e11\u964b\uff0c\u81ea\u5df1\u5b9e\u73b0\u5219\u6bd4\u8f83\u9ebb\u70e6\uff0c\u56e0\u6b64\u76f8\u6bd4\u5faa\u73af\u7075\u6d3b\u6027\u53d7\u9650\u3002\\n- \u6d41\u6c34\u7ebf\u7834\u574f\u4e86\u6570\u636e\u7684\u5c40\u90e8\u6027\uff08\u5c24\u5176\u662f\u5bf9\u4e8e\u5c0f\u6570\u7ec4\u800c\u8a00\uff09\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7f13\u5b58\u5931\u6548\uff0c\u6027\u80fd\u4e0b\u964d\u3002\\n\\n\u6b63\u6240\u8c13\uff0c\u5f53\u4f60\u7684\u624b\u91cc\u53ea\u6709\u4e00\u628a\u9524\u5b50\uff0c\u90a3\u4e48\u6240\u6709\u7684\u95ee\u9898\u90fd\u4f1a\u53d8\u6210\u9489\u5b50\u3002\u6d41\u6c34\u7ebf\u662f\u4e00\u79cd\u5f88\u597d\u7684\u5de5\u5177\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u4e07\u80fd\u7684\u3002\u6709\u65f6\u5019\uff0c\u6211\u4eec\u8fd8\u662f\u9700\u8981\u56de\u5230\u5faa\u73af\u548c\u6279\u5904\u7406\u7684\u6000\u62b1\u3002\\n\\n## \u540e\u8bb0\\n\\n\u6807\u9898\u662f\u662f\u4e24\u4e2a\u6210\u8bed\uff0c\u524d\u8005\u6307\u6d41\u6c34\u7ebf\uff0c\u540e\u8005\u8868\u793a\u672c\u6587\u7684\u4e24\u4e2a\u7bc7\u7ae0\u2014\u2014\u4ece\u4e0a\u6e38\u83b7\u53d6\u5143\u7d20\uff08\u4e0a\u62c9\uff09\u548c\u5411\u4e0b\u6e38\u4f20\u9012\u5143\u7d20\uff08\u4e0b\u63a8\uff09\u3002\\n\\n\u6d41\u6c34\u7ebf\u5728\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u91cc\u9762\u53c8\u53eb\u201c\u706b\u5c71\u6a21\u578b\u201d\u3002\u6279\u5904\u7406\u548c\u6d41\u6c34\u7ebf\u7684\u9009\u62e9\u5728\u6570\u636e\u5e93\u7ba1\u7406\u7cfb\u7edf\u4e2d\u4e5f\u662f\u4e00\u4e2a\u91cd\u8981\u7684\u95ee\u9898\u3002\\n\\n\u5f88\u591a\u8bed\u8a00\u7684\u6807\u51c6\u5e93\u63d0\u4f9b\u5bf9\u8fed\u4ee3\u5668\u7684\u64cd\u4f5c\uff08\u5982 Python\u3001Rust\uff09\uff0c\u8fd9\u90fd\u662f\u4e0a\u62c9\u6d41\u6c34\u7ebf\u7684\u5b9e\u73b0\u3002\\n\\n\u6211\u6709\u4e00\u4e2a C++ \u7248\u672c\u7684\u4e0a\u62c9\u6d41\u6c34\u7ebf\u7684\u7b80\u5355\u5b9e\u73b0\uff0c[\u53ef\u4f9b\u53c2\u8003](https://github.com/Yaossg/cppStream)\u3002\\n\\n\u672c\u6587\u4e0b\u63a8\u6d41\u6c34\u7ebf\u90e8\u5206\u7684\u7075\u611f\u6765\u81ea\u4e8e Scala \u548c Java \u6807\u51c6\u5e93\u7684 `Stream`\u3002\u4e24\u8005\u7528\u4e8e\u5206\u5272\u7684\u7c7b\u5206\u522b\u53eb\u505a `Stepper` \u548c `Spliterator`\u3002\\n\\n\u540c\u4e3a JVM \u8bed\u8a00\u7684 Kotlin \u6807\u51c6\u5e93\u5219\u540c\u65f6\u63d0\u4f9b\u4e86\u6279\u5904\u7406\u548c\u6d41\u6c34\u7ebf\u4e24\u79cd\u98ce\u683c\u7684\u51fd\u6570\u3002\u5176\u4e2d\u6d41\u6c34\u7ebf `Sequence` \u91c7\u7528\u7684\u662f\u4e0a\u62c9\u3002\u6b63\u5982\u5b83\u540d\u5b57\u6240\u8ff0\uff0c\u4e0e\u53e6\u5916\u4e24\u4e2a\u8bed\u8a00\u7684 `Stream` \u4e0d\u540c\uff0c`Sequence` \u53ea\u80fd\u4e32\u884c\uff0c\u4e0d\u80fd\u5e76\u884c\u3002\\n\\n\u672c\u6587\u8fd8\u6709\u4e00\u4e2a\u59ca\u59b9\u7bc7\uff1a[\u8fed\u4ee3\u5668\u7684\u63a5\u53e3\u5bf9\u6bd4](./iterator/index.md)\uff0c\u4ecb\u7ecd\u4e86\u4e0d\u540c\u8bed\u8a00\u7684\u8fed\u4ee3\u5668\u63a5\u53e3\u5f02\u540c\u3002"},{"id":"/iterator","metadata":{"permalink":"/site/blog/iterator","source":"@site/blog/iterator/index.md","title":"\u8fed\u4ee3\u5668\u7684\u63a5\u53e3\u5bf9\u6bd4","description":"\u8fed\u4ee3\u5668\u7684\u63a5\u53e3\u9700\u8981\u5305\u542b\u4e09\u79cd\u57fa\u672c\u64cd\u4f5c\uff1a","date":"2025-03-22T00:00:00.000Z","tags":[{"inline":true,"label":"pl","permalink":"/site/blog/tags/pl"}],"readingTime":5.665,"hasTruncateMarker":true,"authors":[],"frontMatter":{"date":"2025-03-22T00:00:00.000Z","tags":["pl"]},"unlisted":false,"prevItem":{"title":"\u66f2\u6c34\u6d41\u89de\uff1a\u4e0a\u63f4\u4e0b\u63a8","permalink":"/site/blog/pipeline"},"nextItem":{"title":"\u79cb","permalink":"/site/blog/sad"}},"content":"\x3c!--truncate--\x3e\\n\\n\u8fed\u4ee3\u5668\u7684\u63a5\u53e3\u9700\u8981\u5305\u542b\u4e09\u79cd\u57fa\u672c\u64cd\u4f5c\uff1a\\n- \u5224\u65ad\u662f\u5426\u8fd8\u6709\u5143\u7d20\\n- \u83b7\u53d6\u5f53\u524d\u5143\u7d20\\n- \u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u5143\u7d20\\n\\n\u5982\u56fe\u6240\u793a\uff0c\u8fed\u4ee3\u5668\u7684\u63a5\u53e3\u8bbe\u8ba1\u4e3b\u8981\u6709\u4e0b\u9762\u51e0\u4e2a\u6d41\u6d3e\uff1a\\n\\n![](iterator.png)\\n\\n### C++ \u7684\u8bbe\u8ba1\\n\\nC++ \u5c06\u8fd9\u4e09\u79cd\u64cd\u4f5c\u5206\u522b\u5c01\u88c5\u6210\u4e09\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u662f `operator!=`\u3001`operator*` \u548c `operator++`\u3002\\n```cpp\\nfor (auto it = v.begin(); it != v.end(); ++it) {\\n    std::cout << *it << std::endl;\\n}\\n```\\n\\n\u8fd9\u4e00\u8bbe\u8ba1\u6700\u5927\u7684\u597d\u5904\u5c31\u662f\u517c\u5bb9\u4e86 C \u8bed\u8a00\u7684\u6307\u9488\u8bed\u4e49\uff0c\u4f7f\u5f97\u6307\u5411\u6570\u7ec4\u7684\u6307\u9488\u53ef\u4ee5\u76f4\u63a5\u50cf\u8fed\u4ee3\u5668\u4e00\u6837\u4f7f\u7528\u3002\u540c\u65f6\u7531\u4e8e\u8fed\u4ee3\u5668\u7684\u4e09\u79cd\u64cd\u4f5c\u662f\u5206\u5f00\u7684\uff0c\u64cd\u4f5c\u8d77\u6765\u53ef\u4ee5\u66f4\u52a0\u7075\u6d3b\u3002\\n\\n\u4f46\u662f\u95ee\u9898\u4e5f\u5f88\u660e\u663e\uff0c\u90a3\u5c31\u662f\u8fed\u4ee3\u5668\u672c\u8eab\u4e0d\u662f\u81ea\u5305\u542b\u7684\uff0c\u9700\u8981\u989d\u5916\u63d0\u4f9b\u4e00\u4e2a `end()` \u51fd\u6570\u8fd4\u56de\u7684\u8fed\u4ee3\u5668\u4f5c\u4e3a\u7ec8\u6b62\u6761\u4ef6\u3002\u5728\u904d\u5386\u6570\u7ec4\u6216\u94fe\u8868\u65f6\uff0c\u8fd9\u4e2a\u8fed\u4ee3\u5668\u5c1a\u4e14\u53ef\u4ee5\u8868\u793a past-the-last \u5143\u7d20\uff0c\u4f46\u662f\u5bf9\u4e8e\u5176\u4ed6\u6570\u636e\u7ed3\u6784\uff0c\u8fd9\u4e2a\u8fed\u4ee3\u5668\u53ef\u80fd\u5c31\u6ca1\u6709\u5b9e\u9645\u610f\u4e49\u4e86\u3002\\n\\nC++20 \u5f15\u5165\u4e86\u4e00\u79cd\u79f0\u4e3a\u54e8\u5175\u8fed\u4ee3\u5668\u7684\u8bbe\u8ba1\u3002\u91c7\u7528\u8fd9\u79cd\u8bbe\u8ba1\u7684\u8fed\u4ee3\u5668\u4e0d\u518d\u9700\u8981\u4e13\u95e8\u51c6\u5907\u4e00\u4e2a\u7ec8\u6b62\u8fed\u4ee3\u5668\uff0c\u800c\u662f\u4f7f\u7528\u901a\u7528\u7684\u65e0\u72b6\u6001\u7684\u54e8\u5175\u8fed\u4ee3\u5668\u3002\u5728\u4e0e\u54e8\u5175\u8fed\u4ee3\u5668\u6bd4\u8f83\u65f6\uff0c\u8fd9\u7c7b\u8fed\u4ee3\u5668\u76f4\u63a5\u901a\u8fc7\u672c\u8eab\u7684\u72b6\u6001\u6765\u5224\u65ad\u662f\u5426\u8fd8\u6709\u5143\u7d20\uff0c\u4f7f\u5f97\u8fed\u4ee3\u5668\u5b9e\u73b0\u4e86\u81ea\u5305\u542b\u3002\\n\\n### Java \u7684\u8bbe\u8ba1\\n\\nJava \u5c06\u8fd9\u4e09\u79cd\u64cd\u4f5c\u5c01\u88c5\u6210\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u662f `hasNext` \u548c `next`\u3002`next` \u5728\u8fd4\u56de\u5f53\u524d\u5143\u7d20\u7684\u540c\u65f6\uff0c\u8fd8\u4f1a\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002\u5f53\u7136\u8fd8\u6709\u4e00\u79cd\u7406\u89e3\uff0c\u8ba4\u4e3a Java \u7684\u8fed\u4ee3\u5668\u6307\u5411\u4e24\u4e2a\u5143\u7d20\u4e4b\u95f4\u7684\u7a7a\u9699\uff0c`next` \u7684\u65f6\u5019\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u7a7a\u9699\u7684\u540c\u65f6\u8fd4\u56de\u8d8a\u8fc7\u7684\u5143\u7d20\u3002\\n```java\\nIterator<Integer> it = v.iterator();\\nwhile (it.hasNext()) {\\n    System.out.println(it.next());\\n}\\n```\\n\\n\\nJava \u7684\u8bbe\u8ba1\u9700\u8981\u8fed\u4ee3\u5668\u6709\u9884\u6d4b\u6027\uff0c\u5373\u6211\u4eec\u5e0c\u671b\u5728\u5b9e\u9645\u8c03\u7528 `next` \u4e4b\u524d\u5c31\u80fd\u901a\u8fc7 `hasNext` \u77e5\u9053\u662f\u5426\u8fd8\u6709\u5143\u7d20\u3002\u5bf9\u4e8e\u57fa\u4e8e\u5bb9\u5668\u7684\u8fed\u4ee3\u5668\u6765\u8bf4\uff0c\u8fd9\u53ef\u80fd\u6bd4\u8f83\u5bb9\u6613\u5b9e\u73b0\u3002\u4f46\u662f\u5bf9\u4e8e\u5176\u4ed6\u573a\u666f\uff08\u5982\u751f\u6210\u5668\u534f\u7a0b\uff09\uff0c\u8fd9\u79cd\u8bbe\u8ba1\u5c31\u4e0d\u592a\u9002\u7528\u4e86\u3002\u56e0\u6b64\u5728\u4e00\u4e9b Java \u7684\u8fed\u4ee3\u5668\u5b9e\u73b0\u4e2d\uff0c`hasNext` \u5c31\u5df2\u7ecf\u8ba1\u7b97\u51fa\u4e86\u4e0b\u4e00\u4e2a\u5143\u7d20\u5e76\u7f13\u5b58\u5728\u4e86\u8fed\u4ee3\u5668\u5185\u90e8\uff0c`next` \u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u7f13\u5b58\u7684\u5143\u7d20\u3002\u8fd9\u4f1a\u5bfc\u81f4\u770b\u4f3c\u5f00\u9500\u8f83\u5c0f\u7684 `hasNext` \u64cd\u4f5c\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u9690\u542b\u7684 `next` \u64cd\u4f5c\uff0c\u800c `next` \u64cd\u4f5c\u5e76\u6ca1\u6709\u6267\u884c\u771f\u6b63\u7684\u8ba1\u7b97\u3002\u540c\u65f6\u8fd8\u9700\u8981\u6ce8\u610f\uff0c\u8fd9\u91cc\u7684 `hasNext` \u5e94\u8be5\u88ab\u8bbe\u8ba1\u4e3a\u5e42\u7b49\u7684\u64cd\u4f5c\uff0c\u5373\u591a\u6b21\u8c03\u7528 `hasNext` \u5e94\u8be5\u8fd4\u56de\u76f8\u540c\u7684\u7ed3\u679c\uff0c\u4e14\u4e0d\u5f71\u54cd `next` \u7684\u7ed3\u679c\u3002\\n\\n### C# \u7684\u8bbe\u8ba1\\n\\nC# \u5c06\u8fd9\u4e09\u79cd\u64cd\u4f5c\u5c01\u88c5\u6210\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u662f `MoveNext` \u548c `Current`\u3002`MoveNext` \u5728\u5224\u65ad\u662f\u5426\u8fd8\u6709\u5143\u7d20\u7684\u540c\u65f6\uff0c\u8fd8\u4f1a\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002\\n```cs\\nIEnumerator<int> it = v.GetEnumerator();\\nwhile (it.MoveNext()) {\\n    Console.WriteLine(it.Current);\\n}\\n```\\n\\n\u4e0e Java \u76f8\u6bd4\uff0cC# \u7684\u8bbe\u8ba1\u662f\u53cd\u5176\u9053\u800c\u884c\u4e4b\u3002\u5e42\u7b49\u7684\u64cd\u4f5c\u53d8\u6210\u4e86 `Current`\uff0c\u8fd9\u5bfc\u81f4\u6240\u6709\u7684\u8ba1\u7b97\u90fd\u5e94\u8be5\u53d1\u751f\u5728 `MoveNext` \u4e4b\u4e2d\uff0c`Current` \u53ea\u5e94\u8be5\u662f\u4e00\u4e2a\u8bbf\u95ee\u64cd\u4f5c\u3002\u53ef\u4ee5\u662f\u8bbf\u95ee\u5bb9\u5668\uff0c\u4e5f\u53ef\u4ee5\u662f\u8bbf\u95ee\u8fed\u4ee3\u5668\u4e2d\u7684\u7f13\u5b58\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f60\u6267\u610f\u8981\u5728 `Current` \u8ba1\u7b97\uff0c\u4e5f\u4e0d\u662f\u4e0d\u53ef\u4ee5\u3002\\n\\n### Rust \u548c JavaScript \u7684\u8bbe\u8ba1\\n\\nRust \u5c06\u8fd9\u4e09\u79cd\u64cd\u4f5c\u5c01\u88c5\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u5373 `next`\u3002`next` \u5728\u8fd4\u56de\u5f53\u524d\u5143\u7d20\u7684\u540c\u65f6\uff0c\u8fd8\u4f1a\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002\u6839\u636e\u8fd4\u56de\u7684 `Option` \u7c7b\u578b\u6765\u5224\u65ad\u662f\u5426\u8fd8\u6709\u5143\u7d20\uff0c\u6709\u5219\u8fd4\u56de `Some`\uff0c\u65e0\u5219\u8fd4\u56de `None`\u3002\\n\\n```rust\\nlet mut it = v.iter();\\nwhile let Some(x) = it.next() {\\n    println!(\\"{}\\", x);\\n}\\n```\\n\\nJavaScript \u7684\u8fed\u4ee3\u5668\u8bbe\u8ba1\u4e0e Rust \u7c7b\u4f3c\uff0c\u4e5f\u662f\u5c06\u8fd9\u4e09\u79cd\u64cd\u4f5c\u5c01\u88c5\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u5373 `next`\u3002`next` \u5728\u8fd4\u56de\u5f53\u524d\u5143\u7d20\u7684\u540c\u65f6\uff0c\u8fd8\u4f1a\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002\u6839\u636e\u8fd4\u56de\u7684 `done` \u5b57\u6bb5\u6765\u5224\u65ad\u662f\u5426\u8fd8\u6709\u5143\u7d20\u3002\\n\\n```javascript\\nlet it = v[Symbol.iterator]();\\nlet next = it.next();\\nwhile (!next.done) {\\n    console.log(next.value);\\n    next = it.next();\\n}\\n```\\n\\n\\n\u8fd9\u4e24\u4e2a\u8bed\u8a00\u76f4\u63a5\u5408\u5e76\u4e86\u4e09\u4e2a\u64cd\u4f5c\uff0c\u5f7b\u5e95\u629b\u5f03\u4e86\u5728\u8fed\u4ee3\u5668\u4e2d\u53ef\u80fd\u5b58\u5728\u7684\u7f13\u5b58\u3002\u8fd4\u56de\u7684\u7c7b\u578b\u88ab\u5957\u4e0a\u4e86\u4e00\u5c42\u58f3\uff0c\u5e94\u8be5\u5148\u5224\u65ad\u5b58\u5728\u4e0e\u5426\uff0c\u518d\u8fdb\u884c\u4f7f\u7528\u3002\\n\\n\\n### Python \u7684\u8bbe\u8ba1\\n\\nPython `__next__` \u5728\u8fd4\u56de\u5f53\u524d\u5143\u7d20\u7684\u540c\u65f6\uff0c\u8fd8\u4f1a\u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002\u5f53\u5143\u7d20\u904d\u5386\u5b8c\u6bd5\u65f6\uff0c\u4f1a\u629b\u51fa `StopIteration` \u5f02\u5e38\u3002\\n\\n```python\\nit = iter(v)\\nwhile True:\\n    try:\\n        print(next(it))\\n    except StopIteration:\\n        break\\n```\\n\\n\u8fd9\u79cd\u65b9\u5f0f\u867d\u7136\u6bd4\u8f83\u4f4e\u6548\uff0c\u4f46\u5b9e\u9645\u4e0a\u4e5f\u4e00\u70b9\u90fd\u4e0d\u5feb\u3002"},{"id":"/sad","metadata":{"permalink":"/site/blog/sad","source":"@site/blog/sad.md","title":"\u79cb","description":"","date":"2025-01-06T00:00:00.000Z","tags":[{"inline":true,"label":"art","permalink":"/site/blog/tags/art"}],"readingTime":0.27,"hasTruncateMarker":true,"authors":[],"frontMatter":{"date":"2025-1-6","tags":["art"]},"unlisted":false,"prevItem":{"title":"\u8fed\u4ee3\u5668\u7684\u63a5\u53e3\u5bf9\u6bd4","permalink":"/site/blog/iterator"},"nextItem":{"title":"\u5b9a\u98ce\u6ce2\xb7\u5206\u914d\u5bc4\u5b58\u5668","permalink":"/site/blog/reg-alloc"}},"content":"\x3c!--truncate--\x3e\\n\\n```\\n\u98ce\u5377\u9ec4\u53f6\u843d\u5bd2\u5858\\n\u96e8\u6253\u9752\u9636\u62b9\u767d\u971c\\n\u500f\u5ffd\u8fdc\u773a\u51ed\u680f\u671b\\n\u4f55\u5904\u8bdd\u51c4\u51c9\\n\\n\u4f0f\u6848\u4e3e\u624b\u4f5c\u6587\u7ae0\\n\u6376\u80f8\u987f\u8db3\u5199\u8352\u5510\\n\u84e6\u7136\u56de\u9996\u5bfb\u8fc7\u5f80\\n\u8c01\u4eba\u8bc9\u8877\u80a0\\n```"},{"id":"/reg-alloc","metadata":{"permalink":"/site/blog/reg-alloc","source":"@site/blog/reg-alloc.md","title":"\u5b9a\u98ce\u6ce2\xb7\u5206\u914d\u5bc4\u5b58\u5668","description":"","date":"2024-11-25T00:00:00.000Z","tags":[{"inline":true,"label":"pl","permalink":"/site/blog/tags/pl"},{"inline":true,"label":"art","permalink":"/site/blog/tags/art"},{"inline":true,"label":"algo","permalink":"/site/blog/tags/algo"}],"readingTime":0.29,"hasTruncateMarker":true,"authors":[],"frontMatter":{"date":"2024-11-25T00:00:00.000Z","tags":["pl","art","algo"]},"unlisted":false,"prevItem":{"title":"\u79cb","permalink":"/site/blog/sad"},"nextItem":{"title":"ASCII \u548c\u5b83\u7684\u670b\u53cb\u4eec","permalink":"/site/blog/ascii"}},"content":"\x3c!--truncate--\x3e\\n\\n```\\n\u6c47\u7f16\u6784\u5efa CFG\\n\u6df1\u5ea6\u4f18\u5148\u6807\u6b21\u7b2c\\ndef use \u8fde\u4e00\u8d77\\n\u904d\u5386\\n\u6ea2\u51fa\u53d8\u91cf\u6743\u91cd\u4f4e\\n\\n\u8c03\u7528\u8fd4\u56de ra \u8bb0\\n\u504f\u79fb\\n\u6808\u5e27\u6307\u9488\u8981\u5bf9\u9f50\\n\u51fd\u6570\u5f00\u5934\u7ed3\u5c3e\u91cc\\n\u4f20\u9012\\n\u5b58\u53d6 saved by callee\\n```"},{"id":"/ascii","metadata":{"permalink":"/site/blog/ascii","source":"@site/blog/ascii.md","title":"ASCII \u548c\u5b83\u7684\u670b\u53cb\u4eec","description":"ASCII","date":"2024-06-23T00:00:00.000Z","tags":[{"inline":true,"label":"encoding","permalink":"/site/blog/tags/encoding"}],"readingTime":7.09,"hasTruncateMarker":true,"authors":[],"frontMatter":{"date":"2024-06-23T00:00:00.000Z","tags":["encoding"]},"unlisted":false,"prevItem":{"title":"\u5b9a\u98ce\u6ce2\xb7\u5206\u914d\u5bc4\u5b58\u5668","permalink":"/site/blog/reg-alloc"},"nextItem":{"title":"\u5b57\u8282\u5b57\u7b26\u5b57\u7d20\u5b57\u5b57\u73e0\u7391","permalink":"/site/blog/ce"}},"content":"\x3c!--truncate--\x3e\\n\\n## ASCII\\n\\nASCII\uff08American Standard Code for Information Interchange\uff0c\u7f8e\u56fd\u4fe1\u606f\u4ea4\u6362\u6807\u51c6\u4ee3\u7801\uff09\u60f3\u5fc5\u5927\u5bb6\u90fd\u5f88\u719f\u6089\u4e86\u3002\u5728\u8fdc\u53e4\u65f6\u671f\uff0c\u5b57\u7b26\u96c6\u548c\u7f16\u7801\u8fd8\u6ca1\u6709\u5206\u7684\u90a3\u4e48\u5f00\uff08\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u5982\u4eca\u5f88\u591a\u4eba\u5206\u4e0d\u6e05\u7684\u539f\u56e0\uff09\uff0cASCII \u65e2\u662f\u5b57\u7b26\u96c6\uff0c\u4e5f\u662f\u7f16\u7801\u3002\\n\\n- \u4f5c\u4e3a\u5b57\u7b26\u96c6\uff0c\u5b83\u5305\u542b\u4e86 33 \u4e2a\u63a7\u5236\u5b57\u7b26\u548c 95 \u4e2a\u53ef\u6253\u5370\uff08printable\uff09\u5b57\u7b26\uff0c\u5bf9\u5e94 0~127 \u5171 128 \u4e2a\u7801\u4f4d\u3002\\n- \u4f5c\u4e3a\u7f16\u7801\uff0c\u5b83\u4f7f\u7528\u5b57\u8282\u7684\u4f4e\u4e03\u4f4d\u8868\u793a\u5b57\u7b26\u7684\u7801\u4f4d\uff0c\u56e0\u6b64 ASCII \u7f16\u7801\u7684\u5b57\u8282\u5e8f\u5217\u4e2d\u6bcf\u4e2a\u5b57\u8282\u90fd\u4e0e\u4e00\u4e2a\u5b57\u7b26\u5bf9\u5e94\u3002\\n\\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5b57\u7b26\u7684\u5206\u7c7b\u4ece\u5b9e\u9645\u7684\u6027\u8d28\u548c\u533a\u5757\uff08block\uff09\u7684\u5212\u5206\u4e0a\u662f\u6709\u6240\u4e0d\u540c\u7684\uff1a\\n\\n- ASCII \u7684\u7801\u4f4d 0~31 \u662f\u63a7\u5236\u5b57\u7b26\u6ca1\u9519\uff0c\u4f46\u4e0d\u8981\u5fd8\u4e86 127 DEL \u4e5f\u662f\u63a7\u5236\u5b57\u7b26\u300232 \u7a7a\u683c\u662f\u4e0d\u662f\u63a7\u5236\u5b57\u7b26\u5b58\u5728\u4e89\u8bae\u3002\\n\\n- \u7801\u4f4d 0-31 \u7684\u5b57\u7b26\u88ab\u5212\u5206\u4e3a C0 Controls\uff08C0 \u63a7\u5236\u5b57\u7b26\uff09\uff0c\u7801\u4f4d 32-127 \u7684\u5b57\u7b26\u88ab\u5212\u5206\u4e3a Basic Latin\uff08\u57fa\u672c\u62c9\u4e01\u5b57\u6bcd\uff09\u3002\\n\\n\u53ef\u4ee5\u53d1\u73b0 C0 \u5e76\u6ca1\u6709\u5305\u542b ASCII \u6240\u6709\u63a7\u5236\u5b57\u7b26\uff0cBasic Latin \u4e0b\u9664\u4e86\u62c9\u4e01\u5b57\u6bcd\u8fd8\u6709\u6570\u5b57\u3001\u6807\u70b9\u7b26\u53f7\u7b49\uff0c\u4f46\u533a\u5757\u5c31\u662f\u8fd9\u4e48\u5206\u7684\u3002\\n\\n## ISO 646\\n\\nISO 646 \u662f ASCII \u7684\u56fd\u9645\u6807\u51c6\u7248\u672c\u3002\u4f46\u662f\u8003\u8651\u5230\u4e0d\u662f\u6240\u6709\u56fd\u5bb6\u90fd\u4f7f\u7528\u7f8e\u56fd\u7684\u6807\u70b9\u7b26\u53f7\uff0c\u56e0\u6b64\u89c4\u5b9a\uff0c\u5404\u4e2a\u56fd\u5bb6\u53ef\u4ee5\u6839\u636e\u81ea\u5df1\u7684\u9700\u8981\uff0c\u5c06\u4e0b\u9762\u8fd9\u4e9b\u7b26\u53f7\u66ff\u6362\u4e3a\u5176\u5b83\u7684\u5b57\u7b26\u3002\u4e0b\u8868\u5217\u51fa\u4e2d\u65e5\u82f1\u5fb7\u7684\u56db\u4e2a\u53d8\u4f53\uff1a\uff08\u5176\u4e2d\u4e2d\u56fd\u7684\u56fd\u5bb6\u6807\u51c6\u5373 GB 1988\uff09\\n\\n| ASCII-US | !    | \\"    | #    | $    | &    | :    | ?    | @    | [    | \\\\    | ]    | ^    | _    | `    | \\\\{   | \\\\|   | }    | ~    |\\n| -------- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\\n| CN       | !    | \\"    | #    | \xa5    | &    | :    | ?    | @    | [    | \\\\    | ]    | ^    | _    | `    | \\\\{   | \\\\|   | }    | \u203e    |\\n| JP       | !    | \\"    | #    | $    | &    | :    | ?    | @    | [    | \xa5    | ]    | ^    | _    | `    | \\\\{   | \\\\|   | }    | \u203e    |\\n| GB       | !    | \\"    | \xa3    | $    | &    | :    | ?    | @    | [    | \\\\    | ]    | ^    | _    | `    | \\\\{   | \\\\|   | }    | \u203e    |\\n| DE       | !    | \\"    | #    | $    | &    | :    | ?    | \xa7    | \xc4    | \xd6    | \xdc    | ^    | _    | `    | \xe4    | \xf6    | \xfc    | \xdf    |\\n\\n\u4e0d\u8981\u89c9\u5f97\u5fb7\u56fd\u7684\u770b\u4e0a\u53bb\u5f88\u9b54\u5e7b\uff0c\u5b9e\u9645\u4e0a\u5927\u90e8\u5206\u6b27\u6d32\u56fd\u5bb6\u7686\u662f\u5982\u6b64\uff0c\u53ea\u662f\u8fd9\u91cc\u4e0d\u4fbf\u5217\u51fa\u66f4\u591a\u3002\u8fd9\u4e5f\u63ed\u793a\u4e86 C \u8bed\u8a00\u7684\u53cc\u5b57\u7b26\u3001\u4e09\u5b57\u7b26\u8fd8\u6709\u5934\u6587\u4ef6`<iso646.h>`\u7684\u7531\u6765\uff0c\u53c2\u89c1[\u8fd9\u91cc](https://yaossg.com/site/docs/cripplec/text)\u3002\\n\\n*\u65f6\u81f3\u4eca\u65e5\uff0c\u4f60\u4ecd\u7136\u80fd\u770b\u5230\u4e0d\u5c11\u65e5\u672c\u7684\u8ba1\u7b97\u673a\u7684\u53cd\u659c\u6760\u88ab\u663e\u793a\u4e3a\u65e5\u5143\u7b26\u53f7\u2014\u2014\u4e0d\u8fc7\u6bd4\u8d77\u8f6f\u76d8\u548c\u4f20\u771f\u673a\uff0c\u8fd9\u5012\u4e5f\u4e0d\u662f\u4e0d\u53ef\u4ee5\u63a5\u53d7\u5c31\u662f\u4e86\u3002*\\n\\n## \u6269\u5c55 ASCII\\n\\nISO 646 \u63a8\u8350\u7684\u76f4\u63a5\u4fee\u6539\u5df2\u5206\u914d\u7684 ASCII \u7801\u4f4d\u7684\u5b57\u7b26\u7684\u505a\u6cd5\u4f3c\u4e4e\u786e\u5b9e\u4e0d\u59a5\u3002\u56e0\u6b64\u6211\u4eec\u9010\u6e10\u8f6c\u5411\u6269\u5c55 ASCII\u2014\u2014\u6bd5\u7adf 0x80~0xFF \u7684\u7801\u4f4d\u8fd8\u672a\u5206\u914d\u561b\u3002\\n\\n\u6269\u5c55 ASCII \u7f16\u7801\u4e00\u5171\u8ba8\u8bba\u3001\u516c\u5e03\u4e86 15 \u79cd\u65b9\u6848\uff0c\u5e76\u88ab\u6807\u51c6\u5316\u4e3a\u4e86 ISO 8859-n\uff0c\u5176\u4e2d n \u4e3a\u6570\u5b57 1\u30012\u30013\u30014\u30015\u30016\u30017\u30018\u30019\u300110\u300111\u300113\u300114\u300115\u300116 \u4e2d\u7684\u4e00\u4e2a\u3002\uff08\u522b\u770b\u4e86\uff0c\u7f3a\u7684\u662f 12\uff09\\n\\n0x80~0xFF \u662f\u5982\u4f55\u88ab\u5206\u914d\u7684\u5462\uff1f\u4e3a\u4e86\u8ddf 0x00-0x7F \u957f\u5f97\u50cf\u4e00\u70b9\uff0c\u5b83\u4e5f\u5206\u4e3a\u4e24\u4e2a\u533a\u5757\uff1a\\n\\n- 0x80-0x9F \u662f C1 Controls\uff08C1 \u63a7\u5236\u5b57\u7b26\uff09\u3002C0 \u548c C1 Controls \u7531 ISO 6429 \u6807\u51c6\u89c4\u5b9a\u3002\\n\\n- \u5269\u4e0b\u7684\u7801\u4f4d 0xA0~0xFF \u4e3a\u4e00\u4e2a\u533a\u5757\uff0c\u5982\u4e0b\u8868\u6240\u793a\uff1a\\n\\n| ISO 8859-n  | \u533a\u5757\u540d\u79f0 | \u8bf4\u660e         |\\n| ----------- | -------- | ------------ |\\n| ISO 8859-1  | Latin-1  | \u897f\u6b27\u8bed\u8a00     |\\n| ISO 8859-2  | Latin-2  | \u4e2d\u6b27\u8bed\u8a00     |\\n| ISO 8859-3  | Latin-3  | \u5357\u6b27\u8bed\u8a00     |\\n| ISO 8859-4  | Latin-4  | \u5317\u6b27\u8bed\u8a00     |\\n| ISO 8859-5  | Cyrillic | \u65af\u62c9\u592b\u8bed\u8a00   |\\n| ISO 8859-6  | Arabic   | \u963f\u62c9\u4f2f\u8bed     |\\n| ISO 8859-7  | Greek    | \u5e0c\u814a\u8bed       |\\n| ISO 8859-8  | Hebrew   | \u5e0c\u4f2f\u6765\u8bed     |\\n| ISO 8859-9  | Latin-5  | \u571f\u8033\u5176\u8bed     |\\n| ISO 8859-10 | Latin-6  | \u5317\u65e5\u8033\u66fc\u8bed\u65cf |\\n| ISO 8859-11 | Thai     | \u6cf0\u8bed         |\\n| ISO 8859-13 | Latin-7  | \u6ce2\u7f57\u7684\u8bed\u65cf   |\\n| ISO 8859-14 | Latin-8  | \u51ef\u5c14\u7279\u8bed\u65cf   |\\n| ISO 8859-15 | Latin-9  | \u82ac\u5170\u8bed       |\\n| ISO 8859-16 | Latin-10 | \u7f57\u9a6c\u5c3c\u4e9a\u8bed   |\\n\\n\u522b\u62c5\u5fc3\uff0c\u6211\u4eec\u4e0d\u5173\u5fc3\u4e0a\u9762\u6240\u6709\u7684\u65b9\u6848\u2014\u2014\u88ab\u8fd0\u7528\u7684\u6700\u5e7f\u6cdb\u7684\u65b9\u6848\uff0c\u6beb\u65e0\u7591\u95ee\u7684\uff0c\u4fbf\u662f ISO 8859-1\u3002\u540e\u6765\u5b83\u4e5f\u6210\u4e3a\u4e86 Unicode \u7684\u4e00\u90e8\u5206\u3002\\n\\n## \u756a\u5916\uff1aEBCDIC\\n\\nASCII \u5e76\u975e\u6ca1\u6709\u7ade\u4e89\u8005\u3002\u5728\u90a3\u4e2a\u52c3\u52c3\u751f\u673a\u4e07\u7269\u7adf\u53d1\u7684\u5e74\u4ee3\uff0cASCII \u53ea\u662f\u4f17\u591a\u5b57\u7b26\u96c6\u4e2d\u7684\u4e00\u4e2a\u3002\\n\\nEBCDIC\uff08Extended Binary Coded Decimal Interchange Code\uff0c\u6269\u5c55\u4e8c\u8fdb\u5236\u7f16\u7801\u5341\u8fdb\u5236\u4ea4\u6362\u4ee3\u7801\uff09\u662f IBM \u63a8\u51fa\u7684\u4e00\u5957\u5b57\u7b26\u7f16\u7801\uff0c\u8d77\u6e90\u4e8e BCD \u7801\u548c\u7a7f\u5b54\u5361\u7247\uff08punched cards\uff09\uff0c\u5728\u5f53\u65f6\u4e5f\u6709\u4e00\u5b9a\u7684\u5f71\u54cd\u529b\u3002\\n\\n\u7136\u800c\u5b83\u7684\u7f3a\u70b9\u5f88\u660e\u663e\uff1a\u62c9\u4e01\u5b57\u6bcd\u4e0d\u662f\u8fde\u7eed\u6392\u5217\u7684\uff0c\u4e2d\u95f4\u95f4\u65ad\u4e86\u591a\u6b21\uff0c\u8fd9\u7ed9\u4f7f\u7528\u5e26\u6765\u4e86\u6781\u5927\u5730\u4e0d\u4fbf\uff1b\u9ed8\u8ba4\u652f\u6301\u7684\u53ef\u6253\u5370\u5b57\u7b26\u8f83\u5c11\uff0c\u4e14\u88ab\u677e\u6563\u5730\u6392\u5217\u5728 0x40 \u5230 0xFF \u4e4b\u95f4\uff0c\u5269\u4e0b\u4e0d\u8fde\u7eed\u7684\u7a7a\u4f4d\u7559\u7ed9\u6269\u5c55\u5b57\u7b26\uff0c\u4f7f\u5f97\u6269\u5c55\u4e0e\u975e\u6269\u5c55\u5b57\u7b26\u6df7\u6742\u5728\u4e00\u8d77\uff1b\u4e92\u4e0d\u517c\u5bb9\u7684\u8bf8\u591a\u6269\u5c55\u7248\u672c\u8ba9\u672c\u5c31\u51cc\u4e71\u7684\u6807\u51c6\u96ea\u4e0a\u52a0\u971c\uff1b\u6df7\u4e71\u7684\u8bbe\u8ba1\u66f4\u662f\u8ba9\u4e0e ASCII \u7684\u517c\u5bb9\u65e0\u4ece\u8c08\u8d77\u3002\\n\\n>Professor: \\"So the American government went to IBM to come up with an encryption standard, and they came up with\u2014\\"\\n>\\n>Student: \\"EBCDIC!\\"\\n>\\n>\\n>\u6559\u6388\uff1a\u201c\u7f8e\u56fd\u653f\u5e9c\u9020\u8bbf IBM\uff0c\u8ba9\u4ed6\u4eec\u63d0\u51fa\u4e00\u5957\u52a0\u5bc6\u6807\u51c6\uff0c\u4ed6\u4eec\u63d0\u51fa\u4e86\u2014\u2014\u201d\\n>\\n>\u5b66\u751f\uff1a\u201cEBCDIC\uff01\u201d\\n>\\n>\u2014\u2014 the Unix fortune file of 4.3BSD Reno (1990)\\n\\n\u6700\u7ec8 ASCII \u83b7\u80dc\u4e86\uff0c\u5219\u800c EBCDIC \u6d88\u5931\u5728\u4e86\u5386\u53f2\u7684\u957f\u6cb3\u4e4b\u4e2d\u3002\\n\\n\\n## \u53c2\u8003\u8d44\u6599\\n\\n- https://en.wikipedia.org/wiki/ASCII\\n- https://en.wikipedia.org/wiki/ISO/IEC_646\\n- https://en.wikipedia.org/wiki/ISO/IEC_8859\\n- https://en.wikipedia.org/wiki/C0_and_C1_control_codes\\n- https://en.wikipedia.org/wiki/EBCDIC"},{"id":"/ce","metadata":{"permalink":"/site/blog/ce","source":"@site/blog/ce.md","title":"\u5b57\u8282\u5b57\u7b26\u5b57\u7d20\u5b57\u5b57\u73e0\u7391","description":"\u4ec0\u4e48\u662f\u5b57\u7b26\u96c6\uff1f","date":"2024-06-23T00:00:00.000Z","tags":[{"inline":true,"label":"encoding","permalink":"/site/blog/tags/encoding"}],"readingTime":6.385,"hasTruncateMarker":true,"authors":[],"frontMatter":{"date":"2024-06-23T00:00:00.000Z","tags":["encoding"]},"unlisted":false,"prevItem":{"title":"ASCII \u548c\u5b83\u7684\u670b\u53cb\u4eec","permalink":"/site/blog/ascii"},"nextItem":{"title":"never say never? \u2014\u2014\u7b80\u4ecb\u73b0\u4ee3\u7c7b\u578b\u7cfb\u7edf","permalink":"/site/blog/never"}},"content":"import Tabs from \'@theme/Tabs\';\\nimport TabItem from \'@theme/TabItem\';\\n\\n\\n\x3c!--truncate--\x3e\\n\\n## \u4ec0\u4e48\u662f\u5b57\u7b26\u96c6\uff1f\\n\\n\u5b57\u7b26\u7684\u96c6\u5408\u5c31\u53eb\u5b57\u7b26\u96c6\uff08character set\uff09\u3002\u5b57\u7b26\u5728\u5b57\u7b26\u96c6\u4e2d\u5206\u914d\u7684\u7f16\u53f7\u53eb\u505a\u7801\u4f4d\u6216\u7801\u70b9\uff08code point\uff09\u3002\\n\\n\u4f8b\u5982 $S=\\\\{\\\\text{\u4f60,\u597d,\u4e16,\u754c}\\\\}$ \u5c31\u662f\u4e00\u4e2a\u53ea\u6709\u56db\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u96c6\u3002\u6211\u4eec\u53ef\u4ee5\u7ed9\u8fd9\u56db\u4e2a\u5b57\u7b26\u7684\u5206\u914d\u7801\u4f4d $0,1,2,3$\uff0c\u4f46\u7801\u4f4d\u7684\u5206\u914d\u5b9e\u9645\u4e0a\u4e0d\u4e00\u5b9a\u8fde\u7eed\u6216\u4ece\u96f6\u5f00\u59cb\uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u662f $2,3,5,7$\uff0c\u6216\u662f\u4efb\u610f\u56db\u4e2a\u4e92\u4e0d\u76f8\u540c\u7684\u81ea\u7136\u6570\u3002\u4f46\u8981\u6ce8\u610f\uff0c\u5b57\u7b26\u76f8\u540c\uff0c\u4f46\u662f\u5b57\u7b26\u5bf9\u5e94\u7801\u4f4d\u4e0d\u540c\u7684\u5b57\u7b26\u96c6\u4e0d\u662f\u76f8\u540c\u7684\u5b57\u7b26\u96c6\u3002\\n\\n## \u4ec0\u4e48\u662f\u7f16\u7801\uff1f\\n\\n\u5b57\u7b26\u96c6\u4e2d\u7684\u5b57\u7b26\uff08character\uff09\u4e0e\u7801\u5143\uff08code unit\uff09\u5e8f\u5217\u4e4b\u95f4\u7684\u6620\u5c04 $f$ \u53eb\u5b57\u7b26\u96c6\u7684\u7f16\u7801\uff08encoding\uff09\u3002\u540c\u4e00\u4e2a\u5b57\u7b26\u96c6\u53ef\u4ee5\u6709\u591a\u4e2a\u7f16\u7801\u65b9\u6848\u3002\\n\\n\u7801\u5143\u662f\u7f16\u7801\u5e8f\u5217\u7684\u6700\u5c0f\u5355\u4f4d\uff0c\u88ab\u4f5c\u4e3a\u4e00\u4e2a\u6574\u4f53\u8bc6\u522b\u3002\u53ef\u4ee5\u662f\u4e00\u4e2a\u5b57\u8282\uff08byte\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f\u591a\u4e2a\u5b57\u8282\u3002\\n\\n\u4f8b\u5982\u6211\u4eec\u7ed9\u51fa\u4e00\u4e9b\u4e0a\u9762\u63d0\u5230\u5b57\u7b26\u96c6\u53ef\u80fd\u7684\u7f16\u7801\u65b9\u6848\uff1a\\n\\n| \u7f16\u7801\u7ed3\u679c\uff08\u5341\u516d\u8fdb\u5236\uff09                     | \u4e00\u4e2a\u5b57\u7b26\u5305\u542b\u7801\u5143\u6570 | \u4e00\u4e2a\u7801\u5143\u5305\u542b\u5b57\u8282\u6570 | \u91c7\u7528\u8be5\u6a21\u5f0f\u7684\u7f16\u7801 |\\n| ---------------------------------------- | ------------------ | ------------------ | ---------------- |\\n| `00`\u3001`01`\u3001`02`\u3001`03`                   | \u4e00\u4e2a               | \u4e00\u4e2a               | ASCII            |\\n| `00`\u3001`01 00`\u3001`01 01 00`\u3001`01 01 01 00` | \u4e00\u4e2a\u6216\u591a\u4e2a         | \u4e00\u4e2a               | UTF-8            |\\n| `0000`\u3001`0001`\u3001`1000 0000`\u3001`1000 0001` | \u4e00\u4e2a\u6216\u591a\u4e2a         | \u4e24\u4e2a               | UTF-16           |\\n\\n\u9700\u8981\u6ce8\u610f\uff0c\u5f53\u7801\u5143\u4e3a\u591a\u4e2a\u5b57\u8282\u65f6\uff0c\u8fd8\u9700\u8981\u8003\u8651\u5927\u5c0f\u7aef\uff08endianness\uff09\u65f6\u4e0d\u540c\u7684\u5b57\u8282\u8868\u793a\u3002\u4f8b\u5982 `0001` \u53ef\u80fd\u88ab\u8868\u793a\u4e3a `00` `01` \uff08BE\uff09\u6216\u8005 `01` `00` \uff08LE\uff09\u7684\u5b57\u8282\u5e8f\u5217\u3002\\n\\n\u4e0a\u9762\u7684\u4f8b\u5b50\u8868\u660e\uff1a\\n\\n- \u7f16\u7801\u5c06\u5b57\u7b26\u6620\u5c04\u5230\u7684\u662f\u7801\u5143\u5e8f\u5217\uff0c\u4e0d\u53ea\u662f\u5355\u4e2a\u7801\u5143\uff0c\u66f4\u4e0d\u662f\u5355\u4e2a\u5b57\u8282\u3002\\n- \u5b57\u7b26\u7684\u7801\u4f4d\u548c\u7f16\u7801\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u6982\u5ff5\uff0c\u4f46\u5b57\u7b26\u7684\u7801\u4f4d\u53ef\u4ee5\u4f5c\u4e3a\u7f16\u7801\u7684\u4f9d\u636e\u3002\\n- \u540c\u4e00\u7801\u4f4d\u7684\u5b57\u7b26\u5728\u4e0d\u540c\u7f16\u7801\u65b9\u6848\u4e0b\u5f97\u5230\u7684\u7801\u5143\u5e8f\u5217\u53ef\u80fd\u4e0d\u540c\u3002\\n- \u540c\u4e00\u7801\u5143\u5728\u4e0d\u540c\u5927\u5c0f\u7aef\u7684\u6a21\u5f0f\u4e0b\u5f97\u5230\u7684\u5b57\u8282\u5e8f\u5217\u4e5f\u53ef\u80fd\u4e0d\u540c\u3002\\n\\n## \u4ec0\u4e48\u662f\u89e3\u7801\uff1f\\n\\n\u4e2d\u6587\u91cc\uff0c\u7f16\u7801\u4e0d\u4ec5\u662f\u540d\u8bcd\uff0c\u4e5f\u662f\u52a8\u8bcd\u3002\u52a8\u8bcd\u7f16\u7801\uff08encode\uff09\u7684\u53cd\u4e49\u8bcd\u662f\u89e3\u7801\uff08decode\uff09\u3002\u5176\u53cd\u5e94\u7684\u8fc7\u7a0b\u5982\u4e0b\u6240\u793a\u3002\\n\\n```mermaid\\ngraph LR\\nchars[\\"\u5b57\u7b26\u5e8f\u5217\\"]\\nbytes[\\"\u5b57\u8282\u5e8f\u5217\\"]\\nchars--\x3e|\u7f16\u7801|bytes\\nbytes--\x3e|\u89e3\u7801|chars\\n```\\n\\n\u5b57\u7b26\u662f\u7f16\u7801\u3001\u89e3\u7801\u7684\u6700\u5c0f\u5355\u4f4d\u3002\u5373\u5bf9\u4e8e\u5b57\u7b26\u5e8f\u5217 $c_1c_2\\\\dots c_{n}$ \u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u5bf9\u5e94\u7684\u5b57\u8282\u5e8f\u5217 $f(c_1)f(c_2)\\\\dots f(c_{n})$\uff0c\u56e0\u6b64\u7f16\u7801\u5668\uff08encoder\uff09\u53ea\u9700\u8981\u5b9e\u73b0\u4e00\u4e2a\u5b57\u7b26\u5230\u5b57\u8282\u5e8f\u5217\u7684\u7f16\u7801\u5373\u53ef\u5b9e\u73b0\u5b57\u7b26\u5e8f\u5217\u7684\u7f16\u7801\u3002\u540c\u7406\uff0c\u89e3\u7801\u5668\uff08decoder\uff09\u4e5f\u53ea\u9700\u8981\u89e3\u7801\u51fa\u5b57\u8282\u5e8f\u5217\u7684\u9996\u4e2a\u5b57\u7b26\u5373\u53ef\u5b9e\u73b0\u5b57\u8282\u5e8f\u5217\u7684\u89e3\u7801\u3002\\n\\n## \u4ec0\u4e48\u662f\u5b57\u7d20\uff1f\\n\\n\u5b57\u7d20\uff08grapheme\uff09\uff0c\u53c8\u53ef\u8bd1\u4f5c\u5b57\u5f62\uff0c\u662f\u6587\u5b57\u3001\u7b26\u53f7\u6e32\u67d3\u7684\u6700\u5c0f\u72ec\u7acb\u5355\u4f4d\u3002\\n\\n\u4e0e\u65e5\u5e38\u751f\u6d3b\u4e2d\u7684\u5b9a\u4e49\u4e0d\u540c\uff0c\u5728\u8ba1\u7b97\u673a\u4e2d\uff0c\u5b57\u7b26\u4e0d\u4e00\u5b9a\u662f\u4ee3\u8868\u67d0\u4e2a\u56fa\u5b9a\u7684\u5b57\u7d20\u7684\u6587\u5b57\u3001\u7b26\u53f7\uff0c\u4e0b\u9762\u4e3e\u4e24\u7c7b\u4f8b\u5b50\u8bf4\u660e\u3002\\n\\n### \u63a7\u5236\u5b57\u7b26\\n\\n\u63a7\u5236\u5b57\u7b26\uff08control character\uff09\u4e00\u822c\u4e0d\u4f1a\u76f4\u63a5\u6e32\u67d3\u51fa\u5b57\u7d20\uff0c\u4f46\u5f80\u5f80\u80fd\u6539\u53d8\u5176\u5b83\u5b57\u7b26\u7684\u6e32\u67d3\u884c\u4e3a\uff0c\u4f8b\u5982\u6362\u884c\u7b26\u3001\u5236\u8868\u7b26\u3001\u4ece\u53f3\u5f80\u5de6\u7b26\u7b49\uff1b\u6216\u8005\u5e2e\u52a9\u8ba1\u7b97\u673a\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u8bc6\u522b\uff0c\u5982 NUL\u3001BOM \u7b49\u3002\\n\\n### \u7ec4\u5408\u5b57\u7b26\\n\\n\u7ec4\u5408\u5b57\u7b26\uff08combining character\uff09\u53ef\u4ee5\u4e0e\u5176\u5b83\u5b57\u7b26\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u7d20\u3002\u4f8b\u5982\u5b57\u7d20 A\u030a\uff0c\u5b9e\u9645\u4e0a\u662f\u7531\u5b57\u7b26 A \u548c\u7ec4\u5408\u5b57\u7b26  \u030a \u7ec4\u5408\u800c\u6210\u3002\u7c7b\u4f3c\u5730\uff0c\ud83d\udc69\ud83c\udffd \u662f\u7531 \ud83d\udc69 \u548c \ud83c\udffd \u7ec4\u5408\u800c\u6210\u3002\u4f60\u53ef\u4ee5\u7528 python \u6765\u7b80\u5355\u9a8c\u8bc1\u8fd9\u4e00\u70b9\uff1a\\n\\n```python\\n>>> len(\\"A\u030a\\")\\n2\\n>>> \'A\'+\'\u030a\'\\n\'A\u030a\'\\n```\\n\\n\u5f53\u7ec4\u5408\u5b57\u7b26\u7d27\u968f\u80fd\u4e0e\u4e4b\u7ec4\u5408\u7684\u5b57\u7b26\u65f6\uff0c\u5c31\u53ef\u80fd\u88ab\u6e32\u67d3\u5668\u6e32\u67d3\u4e3a\u4e00\u4e2a\u5b57\u7d20\uff0c\u4e14\u8fd9\u6837\u7684\u7ec4\u5408\u662f\u53ef\u4ee5\u8fdb\u884c\u591a\u6b21\u7684\u3002\u4f8b\u5982 \ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68 = \ud83d\udc68+ZWJ+\u2764+VS-16+ZWJ+\ud83d\udc8b+ZWJ+\ud83d\udc68\u3002\uff08\u6ca1\u9519\uff0c\u7537\u7537\u4eb2\u5634\uff09\\n\\n\u4e0a\u9762\u7684\u4f8b\u5b50\u8868\u660e\uff1a\u4e00\u4e2a\u5b57\u7d20\u53ef\u80fd\u5305\u542b\u591a\u4e2a\u5b57\u7b26\u3002\u800c\u4e00\u4e2a\u5b57\u7b26\u53c8\u53ef\u4ee5\u7f16\u7801\u6210\u591a\u4e2a\u5b57\u8282\uff0c\u6700\u540e\u7f16\u7801\u5f62\u6210\u5b57\u8282\u5e8f\u5217\u7684\u8fc7\u7a0b\u53ef\u80fd\u5982\u4e0b\u56fe\u6240\u793a\uff1a\uff08\u6570\u5b57\u4e3a\u5341\u516d\u8fdb\u5236\uff09\\n\\n```mermaid\\ngraph\\n\\ngrapheme[\\"grapheme\ud83d\udc69\ud83c\udffd\\"]\\ngrapheme--\x3echaracter1[\\"character1\ud83d\udc69\\"]\\ngrapheme--\x3echaracter2[\\"character2 \ud83c\udffd\\"]\\ncharacter1--\x3ebyte1[\\"byte1 F0\\"]\\ncharacter1--\x3ebyte2[\\"byte2 9F\\"]\\ncharacter1--\x3ebyte3[\\"byte3 91\\"]\\ncharacter1--\x3ebyte4[\\"byte4 A9\\"]\\ncharacter2--\x3ebyte5[\\"byte5 F0\\"]\\ncharacter2--\x3ebyte6[\\"byte6 9F\\"]\\ncharacter2--\x3ebyte7[\\"byte7 8F\\"]\\ncharacter2--\x3ebyte8[\\"byte8 BD\\"]\\n```\\n\\n## \u603b\u7ed3\\n\\n\u7efc\u4e0a\u6240\u793a\uff0c\u6700\u540e\u6211\u4eec\u68b3\u7406\u4e00\u4e0b\u53ef\u80fd\u5b58\u5728\u7684\u5957\u5a03\u5173\u7cfb\uff1a\\n\\n<Tabs>\\n<TabItem label=\\"\u4e2d\u6587\\" value=\\"zh\\">\\n\\n- \u4e00\u4e2a\u5b57\u7d20\u5305\u542b\u4e00\u4e2a\u6216\u591a\u4e2a\u5b57\u7b26\\n  - \u4e00\u4e2a\u5b57\u7b26\uff08\u6216\u8005\u8bf4\u5b83\u7684\u7801\u4f4d\uff09\u4f1a\u88ab\u7f16\u7801\u6210\u591a\u4e2a\u7801\u5143\\n    \\n    - \u4e00\u4e2a\u7801\u5143\u4f1a\u88ab\u7f16\u7801\u6210\u4e00\u4e2a\u6216\u591a\u4e2a\u5b57\u8282\\n\\n</TabItem>\\n<TabItem label=\\"\u82f1\u6587\\" value=\\"en\\">\\n\\n- one grapheme contains one or more characters\\n  - one character (or its code point) is encoded as one or more code units\\n    \\n    - one code unit is encoded as one or more bytes \\n\\n</TabItem>\\n</Tabs>\\n\\n:::warning\\n\u90a3\u4e48\uff0c\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff08length\uff09\u5230\u5e95\u662f\u5b57\u8282\u6570\uff0c\u5b57\u7b26\u6570\uff0c\u8fd8\u662f\u5b57\u7d20\u6570\u5462\uff1fJava\u3001C#\u3001JavaScript \u7b49\u8bed\u8a00\u7ed9\u51fa\u4e86\u63b7\u5730\u6709\u58f0\u7684\u56de\u7b54\uff1a\u90fd\u4e0d\u662f\uff01\u8fd9\u4e9b\u8bed\u8a00\u5b57\u7b26\u4e32\u7684 length \u90fd\u662f UTF-16 \u7684\u7801\u5143\u6570\u3002\u8fd9\u662f\u552f\u4e00\u6ca1\u51fa\u73b0\u5728\u6807\u9898\u91cc\u7684\u5c42\u7ea7\uff0c\u60f3\u4e0d\u5230\u5427\u3002\\n:::\\n\\n\u5f53\u7136\uff0c\u6700\u7b80\u5355\u7684\u60c5\u51b5\u662f\uff0c\u4e00\u4e2a\u5b57\u7d20\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u5305\u542b\u4e00\u4e2a\u7801\u5143\u5305\u542b\u4e00\u4e2a\u5b57\u8282\u3002\u5bf9\uff0c\u5c31\u662f ASCII\u3002\u53c2\u89c1\u6211\u7684[\u59ca\u59b9\u7bc7](./ascii.md)\u3002"},{"id":"/never","metadata":{"permalink":"/site/blog/never","source":"@site/blog/never.md","title":"never say never? \u2014\u2014\u7b80\u4ecb\u73b0\u4ee3\u7c7b\u578b\u7cfb\u7edf","description":"\u672c\u6587\u4e4b\u63a2\u8ba8\u73b0\u4ee3\u7c7b\u578b\u7cfb\u7edf\u4e2d\u7684\u4e00\u4e9b\u5b9e\u8df5\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\u3002\u591a\u6709\u4e0d\u4e25\u8c28\u4e4b\u5904\uff0c\u671b\u5b66\u672f\u5927\u4f6c\u6d77\u6db5\u3002","date":"2024-06-23T00:00:00.000Z","tags":[{"inline":true,"label":"pl","permalink":"/site/blog/tags/pl"},{"inline":true,"label":"type","permalink":"/site/blog/tags/type"}],"readingTime":16.505,"hasTruncateMarker":true,"authors":[],"frontMatter":{"date":"2024-06-23T00:00:00.000Z","tags":["pl","type"]},"unlisted":false,"prevItem":{"title":"\u5b57\u8282\u5b57\u7b26\u5b57\u7d20\u5b57\u5b57\u73e0\u7391","permalink":"/site/blog/ce"},"nextItem":{"title":"\u8868\u8fde\u63a5\u7b97\u6cd5\u6982\u89c8","permalink":"/site/blog/join"}},"content":"\x3c!--truncate--\x3e\\n\\n:::note\\n\u672c\u6587\u4e4b\u63a2\u8ba8\u73b0\u4ee3\u7c7b\u578b\u7cfb\u7edf\u4e2d\u7684\u4e00\u4e9b\u5b9e\u8df5\uff0c\u4f9b\u5927\u5bb6\u53c2\u8003\u3002\u591a\u6709\u4e0d\u4e25\u8c28\u4e4b\u5904\uff0c\u671b\u5b66\u672f\u5927\u4f6c\u6d77\u6db5\u3002\\n:::\\n\\n## \u7c7b\u578b\u4e0e\u7c7b\u578b\u7cfb\u7edf\\n\\n\u6211\u4eec\u5148\u4ecb\u7ecd\u4e00\u4e0b\u4ec0\u4e48\u662f\u7c7b\u578b\u3002\\n\\n\u8fd9\u91cc\u6211\u4eec\u7b80\u5355\u7684\u628a\u7c7b\u578b\uff08type\uff09\u5b9a\u4e49\u4e3a\u503c\uff08value\uff09\u7684\u96c6\u5408\u3002\\n\\n\u4f8b\u5982\u6709\u4e24\u4e2a\u53d6\u503c\u7684\u5e03\u5c14\u7c7b\u578b\uff1a\\n\\n```\\nbool := {false, true}\\n```\\n\\n\u4e00\u4e9b\u7c7b\u578b\u7684\u53d6\u503c\u8303\u56f4\u662f\u6709\u9650\u7684\uff08\u4f8b\u5982\u5927\u90e8\u5206\u7684\u57fa\u672c\u7c7b\u578b\uff09\uff0c\u4e00\u4e9b\u662f\u65e0\u9650\u7684\uff08\u5982\u5b57\u7b26\u4e32\uff09\\n\\n### \u5b57\u9762\u7c7b\u578b\\n\\n\u5728\u4e0d\u5f15\u8d77\u6df7\u6dc6\u7684\u60c5\u51b5\u4e0b\uff0c\u503c\u672c\u8eab\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u79cd\u7c7b\u578b\u7684\u8bb0\u53f7\uff0c\u53ea\u5305\u542b\u8fd9\u4e2a\u503c\u672c\u8eab\uff0c\u5373\\n\\n```\\nfalse := {false}\\ntrue := {true}\\n```\\n\\n\u8fd9\u6837\u7684\u7c7b\u578b\u6210\u4e3a\u5b57\u9762\u7c7b\u578b\uff08Literal Type\uff09\u3002\\n\\n### \u8054\u5408\u7c7b\u578b\\n\\n\u63a5\u7740\u6211\u4eec\u5f15\u5165\u8054\u5408\u7c7b\u578b\uff08Union Type\uff09\u6216\u548c\u7c7b\u578b\uff08Sum Type\uff09\u7684\u6982\u5ff5\uff1a\\n\\n`A` \u548c `B` \u7684\u8054\u5408\u7c7b\u578b\u8bb0\u4f5c `A | B`\uff0c\u8be5\u7c7b\u578b\u7684\u503c\u53ef\u4ee5\u53d6 `A` \u7684\u503c\uff0c\u4e5f\u53ef\u4ee5\u53d6 `B` \u7684\u503c\uff0c\u5373\u5728 $A\\\\cup B$ \u4e2d\u53d6\u503c\u3002\\n\\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u5e03\u5c14\u7c7b\u578b\u5b9a\u4e49\u4e3a\uff1a\\n\\n```\\nbool := false | true\\n```\\n\\n\u4f8b\u5982\u5728 Python \u4e2d\\n\\n```python\\nfrom typing import Literal\\n\\nMode = Literal[\'r\', \'rb\', \'w\', \'wb\']\\nTrueType = Literal[True]\\ndef open(file: str, mode: Mode) -> TrueType:\\n    return True\\n```\\n\\n\u53c2\u6570 mode \u53d6\u67d0\u51e0\u4e2a\u56fa\u5b9a\u7684\u5b57\u9762\u91cf\u53d6\u503c\uff0c\u800c\u8fd4\u56de\u503c\u4e00\u5b9a\u662f `True`\uff0c\u8fd9\u90fd\u53ef\u4ee5\u7528\u5b57\u9762\u7c7b\u578b\u5f88\u597d\u7684\u8868\u793a\u3002\u7528\u4e0a\u9762\u7684\u5199\u6cd5\uff0c\u5373\\n\\n```\\nMode := \'r\' | \'rb\' | \'w\' | \'wb\'\\n```\\n\\n### \u4ea4\u7c7b\u578b\\n\\n\u65e2\u7136\u6709 Union Type \u5c31\u6709 Intersect Type\u3002\\n\\n`A` \u548c `B` \u7684\u4ea4\u7c7b\u578b\uff08Intersect Type\uff09\u8bb0\u4f5c `A & B`\uff0c\u8be5\u7c7b\u578b\u7684\u503c\u5fc5\u987b\u5728 $A\\\\cap B$ \u4e2d\u53d6\u3002\u4f8b\u5982\\n\\n```\\nReadMode := \'r\' | \'rb\'\\nBinaryMode := \'rb\' | \'wb\'\\n```\\n\\n\u90a3\u4e48\u8fd9\u4e24\u4e2a\u7c7b\u578b\u7684\u4ea4\u7c7b\u578b\u5c31\u662f `\'rb\'`\u3002\\n\\n### \u79ef\u7c7b\u578b\\n\\n\u65e2\u7136\u6709 Sum Type \u5c31\u6709 Product Type\u3002\u6240\u8c13 Product\uff0c\u6307\u7684\u5c31\u662f\u7b1b\u5361\u5c14\u79ef\u3002\\n\\n`A` \u548c `B` \u7684\u4ea4\u7c7b\u578b\uff08Product Type\uff09\u8bb0\u4f5c `A x B`\uff0c\u8be5\u7c7b\u578b\u7684\u503c\u5fc5\u987b\u5728 $A\\\\times B$ \u4e2d\u53d6\u3002\u4f8b\u5982\\n\\n```\\nA = 1 | 2\\nB = a | b | c\\n```\\n\\n\u90a3\u4e48\\n\\n```\\nA x B = (1, a) | (1, b) | (1, c) | (2, a) | (2, b) | (2, c) \\n```\\n\\n\u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u5176\u5b9e\u5c31\u662f\u5143\u7ec4\uff08Tuple\uff09\uff0c\u56e0\u6b64\u79ef\u7c7b\u578b\u4e5f\u53ef\u4ee5\u8bb0\u4f5c `(A, B)`\\n\\n\u4e8c\u5143\u7ec4\u8fd8\u53ef\u4ee5\u88ab\u6269\u5c55\u4e3a n \u5143\u7ec4\uff0c\u8fd9\u91cc\u4e0d\u518d\u8d58\u8ff0\u3002\\n\\n\u4e00\u5143\u7ec4\u7684\u53d6\u503c\u4e0e\u539f\u7c7b\u578b\u76f8\u540c\uff0c\u6545 `(A) = A`\u3002\\n\\n\u96f6\u5143\u7ec4\u975e\u5e38\u7279\u6b8a\uff0c\u53ea\u6709 `()` \u4e00\u4e2a\u53d6\u503c\uff0c\u88ab\u79f0\u4e3a\u5355\u4f4d\u7c7b\u578b `Unit`\u3002\\n\\n## \u5b50\u7c7b\u578b\\n\\n\u5982\u679c $ B \\\\subset A $\uff0c\u5219\u79f0 `B` \u662f `A` \u7684\u5b50\u7c7b\u578b\uff08Subtyping\uff09\u3002\\n\\n\u5b50\u7c7b\u578b\u662f\u4e00\u4e2a\u504f\u5e8f\u5173\u7cfb\u3002\u5373\u6ee1\u8db3\u4e0b\u9762\u4e09\u4e2a\u6027\u8d28\uff1a\\n\\n- \u81ea\u53cd\u6027\uff1a$A \\\\subset A$\\n- \u53cd\u5bf9\u79f0\u6027\uff1a$A\\\\subset B \\\\land B \\\\subset A \\\\implies A = B$\\n- \u4f20\u9012\u6027\uff1a$A\\\\subset B \\\\land B\\\\subset C \\\\implies A\\\\subset C$\\n\\n\u4ece\u6570\u5b66\u672c\u8d28\u4e0a\u6765\u8bf4\uff0c\u5b50\u7c7b\u578b\u4f3c\u4e4e\u53ea\u662f\u5b50\u96c6\u5728\u7c7b\u578b\u7cfb\u7edf\u91cc\u7684\u65b0\u540d\u5b57\u3002\u4f46\u7531\u4e8e\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff08OOP\uff09\u7684\u53d1\u626c\u5149\u5927\uff0c\u5b50\u7c7b\u578b\u5df2\u7ecf\u6210\u4e3a\u4e86\u975e\u5e38\u91cd\u8981\u7684\u4e00\u4e2a\u6982\u5ff5\u3002\\n\\n### \u9762\u5411\u5bf9\u8c61\\n\\n\u82e5\u4e00\u4e2a\u7c7b\u578b\u7ee7\u627f\u81ea\u53e6\u5916\u4e00\u4e2a\u7c7b\u578b\uff0c\u7c7b\u56fe\u5982\u4e0b\u6240\u793a\\n\\n```mermaid\\nclassDiagram\\nclass A\\nclass B\\nA <|-- B\\n```\\n\\n\u6839\u636e OOP \u7684\u89c4\u5219\uff0c\u6240\u6709 B \u7684\u5bf9\u8c61\u90fd\u662f\u4e00\u4e2a\uff08is-a\uff09A \u7684\u5bf9\u8c61\u3002\u5373 $\\\\forall b \\\\in B, b \\\\in A$\uff0c\u4e5f\u5c31\u662f\u8bf4 $ B \\\\subset A $\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8bf4 `B` \u662f `A` \u7684\u5b50\u7c7b\u578b\u3002\\n\\n\u4e00\u822c\u6765\u8bf4\uff0c\u5b50\u7c7b\u578b\u7684\u5bf9\u8c61\u53ef\u4ee5\u9690\u5f0f\u8f6c\u6362\u4e3a\u7236\u7c7b\u578b\uff0c\u6bd5\u7adf\u5b50\u7c7b\u578b\u7684\u53d6\u503c\u8303\u56f4\u66f4\u5c0f\uff0c\u8fd9\u6837\u7684\u8f6c\u6362\u5929\u7ecf\u5730\u4e49\u3002\u8fd9\u4e2a\u6982\u5ff5\u53ef\u4ee5\u63a8\u5e7f\u5230\u4e00\u822c\u7684\u7c7b\u578b\u7cfb\u7edf\u4e2d\uff0c\u5982\u6211\u4eec\u4e0a\u9762\u63d0\u5230\u7684 `bool` \u7c7b\u578b\uff0c\u7c7b\u56fe\u5982\u4e0b\u6240\u793a\\n\\n```mermaid\\nclassDiagram\\nclass bool\\nclass false\\nclass true\\nbool <|-- false\\nbool <|-- true\\n```\\n\\n\u56e0\u6b64\uff0c\u5f53\u4e00\u4e2a\u7c7b\u7684\u6240\u6709\u5b50\u7c7b\u786e\u5b9a\uff0c\u4e14\u672c\u8eab\u4e0d\u4f1a\u6709\u989d\u5916\u7684\u5bf9\u8c61\uff08\u5728\u9762\u5411\u5bf9\u8c61\u91cc\uff0c\u5c31\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\u6216\u662f\u63a5\u53e3\uff09\uff0c\u90a3\u4e48\u5b83\u7684\u6d3e\u751f\u5173\u7cfb\u5b9e\u9645\u4e0a\u53ef\u4ee5\u5199\u4f5c\u6240\u6709\u5b50\u7c7b\u578b\u7684\u8054\u5408\u7c7b\u578b\u3002\\n\\n\u663e\u7136\uff0c\u6839\u636e\u5b9a\u4e49\uff0c\u4efb\u610f\u4e24\u4e2a\u7c7b\u578b `A` `B` \u90fd\u6709\u516c\u5171\u7236\u7c7b\u578b `A | B`\uff0c\u540c\u65f6\u6709\u516c\u5171\u5b50\u7c7b\u578b `A & B`\uff0c\u7c7b\u56fe\u5982\u4e0b\u6240\u793a\\n\\n```mermaid\\nclassDiagram\\nclass Super[\\"<code>A | B</code>\\"]\\nclass A\\nclass B\\nclass Sub[\\"<code>A & B</code>\\"]\\nSuper <|-- A\\nSuper <|-- B\\nA <|-- Sub\\nB <|-- Sub\\n```\\n\\n`A & B` \u5e38\u7528\u4e8e\u8868\u793a\u540c\u65f6\u5b9e\u73b0\u4e24\u4e2a\u63a5\u53e3\u7c7b\u578b\u3002\u6839\u636e\u5b9a\u4e49\uff0c\u5b83\u80fd\u4f5c\u4e3a\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u7c7b\u578b\u7684\u5bf9\u8c61\u88ab\u4f7f\u7528\u3002\\n\\n\u5982\u679c\u6211\u4eec\u8981\u5c1d\u8bd5\u628a\u6240\u6709\u7c7b\u578b\u7684\u56fe\u753b\u51fa\u6765\uff0c\u4f60\u53ef\u80fd\u4f1a\u672c\u80fd\u7684\u8ffd\u95ee\u4e24\u4e2a\u95ee\u9898\uff1a\u8fd9\u4e2a\u56fe\u7684\u9876\u7aef\u662f\u8c01\uff1f\u8fd9\u4e2a\u56fe\u7684\u5e95\u7aef\u662f\u8c01\uff1f\\n\\n\u5176\u5b9e\u5f88\u591a OOP \u8bed\u8a00\u90fd\u5b9e\u73b0\u6210\u4e86\u201c\u5355\u6839\u6a21\u578b\u201d\uff0c\u5373\u6240\u6709\u7684\u7c7b\u90fd\u6709\u4e00\u4e2a\u5171\u540c\u7684\u7236\u7c7b\u3002\u5982 `java.lang.Object` `kotlin.Any` `System.Object` \u7b49\u7b49\u3002\u57fa\u4e8e\u8fd9\u6837\u7684\u6a21\u578b\uff0c\u7c7b\u56fe\u7684\u9876\u7aef\u81ea\u7136\u5c31\u662f\u8fd9\u4e2a\u5355\u6839\u3002\u5728\u4e4b\u540e\u7684\u53d9\u8ff0\u4e2d\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u7c7b\u578b\u8bb0\u4f5c `any`\uff0c\u8868\u793a\u6240\u6709\u7c7b\u578b\u7684\u8054\u5408\u3001\u6240\u6709\u7c7b\u578b\u7684\u7236\u7c7b\u578b\u3002\\n\\n### `null`\\n\\n\u73b0\u5728\u6211\u4eec\u6765\u63a2\u7a76\u4e00\u4e2a\u95ee\u9898\uff0c\u7a7a\u6307\u9488 `null` \u662f\u4ec0\u4e48\u7c7b\u578b\uff1f\\n\\n\u4f60\u53ef\u80fd\u4f1a\u4e0b\u610f\u8bc6\u7684\u8ba4\u4e3a\uff0c\u65e2\u7136\u6240\u6709\u7c7b\u578b\u90fd\u53ef\u4ee5\u8d4b\u503c\u4e3a `null`\uff0c\u90a3\u5b83\u7406\u6240\u5e94\u5f53\u662f `any` \u7c7b\u578b\u7684\u3002\u8fd9\u5ffd\u7565\u4e86\u4e00\u4e2a\u4e8b\u5b9e\uff1a\u53ea\u6709\u5b50\u7c7b\u578b\u624d\u53ef\u4ee5\u76f4\u63a5\u8f6c\u6362\u4e3a\u7236\u7c7b\u578b\u3002`any` \u4e0d\u662f\u9664\u4e86\u672c\u8eab\u4e4b\u5916\u4efb\u4f55\u7c7b\u578b\u7684\u7236\u7c7b\u578b\uff0c\u6240\u4ee5 `null` \u82e5\u662f `any` \u5219\u51e0\u4e4e\u4e0d\u80fd\u8d4b\u503c\u7ed9\u4efb\u4f55\u7c7b\u578b\u3002\u8fd9\u663e\u7136\u662f\u77db\u76fe\u7684\u3002\\n\\n\u7a0d\u52a0\u601d\u7d22\u4f60\u4f1a\u6ce8\u610f\u5230\uff0c\u7531\u4e8e `null` \u53ef\u4ee5\u8d4b\u503c\u7ed9\u4efb\u4f55\u7c7b\u578b\uff0c\u6240\u4ee5\u5b83\u5b9e\u9645\u4e0a\u662f\u4efb\u4f55\u7c7b\u578b\u7684\u5b50\u7c7b\u3002\u5373\\n\\n\\n```mermaid\\nclassDiagram\\nclass Super[\\"any\\"]\\nclass A\\nclass B\\nclass C[\\"...\\"]\\nclass Z\\nclass Sub[\\"null\\"]\\nSuper <|-- A\\nSuper <|-- B\\nSuper <|-- C\\nSuper <|-- Z\\nA <|-- Sub\\nB <|-- Sub\\nC <|-- Sub\\nZ <|-- Sub\\n```\\n\\n\u5b9e\u9645\u4e0a\uff0c\u8fd8\u6709\u4e00\u79cd\u975e\u5e38\u5bb9\u6613\u601d\u8003\u7684\u65b9\u6cd5\u5f97\u51fa\u8fd9\u4e2a\u7ed3\u8bba\uff1a\u65e2\u7136 `null` \u53ef\u4ee5\u8d4b\u503c\u7ed9\u4efb\u4f55\u7c7b\u578b\uff0c\u90a3\u4e48\u6240\u6709\u7c7b\u578b\u7684\u4ea4\u96c6\uff0c\u81ea\u7136\u800c\u7136\u6709\u4e14\u4ec5\u6709\u8fd9\u4e00\u4e2a `null` \u7684\u53d6\u503c\u3002\\n\\n\u201c\u4e00\u5207\u7c7b\u578b\u7684\u5b50\u7c7b\u578b\u201d\uff0c\u8fd9\u4e00\u70b9\u53ef\u80fd\u76f8\u5f53\u7684\u53cd\u76f4\u89c9\uff0c\u4f46\u5374\u7b26\u5408\u903b\u8f91\u4e0e\u5b9e\u8df5\u3002\u8bb8\u591a\u5e26 `null` \u8bed\u8a00\u7684\u7c7b\u578b\u7cfb\u7edf\u5c31\u662f\u8fd9\u6837\u5b9e\u73b0\u7684\u3002\\n\\n\u6839\u636e\u7c7b\u56fe\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u628a `any` \u79f0\u4e3a Top Type\uff0c`null` \u79f0\u4e3a Bottom Type\u3002\u7528 `null` \u4f5c\u4e3a Bottom Type \u5e76\u975e\u662f\u552f\u4e00\u7684\u9009\u62e9\uff0c\u6211\u4eec\u5728\u540e\u9762\u8fd8\u4f1a\u63d0\u5230\u522b\u7684\u8003\u8651\u3002\\n\\n## \u51fd\u6570\u7c7b\u578b\\n\\n\u6211\u4eec\u5148\u6765\u8003\u8651\u4e00\u79cd\u7279\u6b8a\u7684\u7c7b\u578b\u2014\u2014\u51fd\u6570\u7c7b\u578b\u3002\\n\\n\u6240\u8c13\u51fd\u6570\u7c7b\u578b\uff0c\u5373\u7528\u4e8e\u63cf\u8ff0\u63a5\u53d7\u67d0\u4e9b\u53c2\u6570 `A`\uff0c\u8fd4\u56de\u67d0\u4e9b\u8fd4\u56de\u503c `B` \u7684\u7c7b\u578b\uff0c\u8bb0\u4f5c `A -> B`\u3002\\n\\n\u8fd9\u91cc\u53ea\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u6709\u591a\u4e2a\u53c2\u6570\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u7528\u5404\u4e2a\u53c2\u6570\u7c7b\u578b\u7684\u7b1b\u5361\u5c14\u79ef\u6765\u8868\u793a\u3002\u540c\u7406\uff0c\u591a\u4e2a\u8fd4\u56de\u503c\u7684\u60c5\u51b5\u4e5f\u53ef\u4ee5\u8f7b\u677e\u8868\u793a\u3002\u5373 `(A1, A2, ..., An) -> (B1, B2, ..., Bn)`\u3002\\n\\n\u90a3\u4e48 `void` \u600e\u4e48\u529e\uff1f\u8003\u8651\u5230\u5b83\u4ec0\u4e48\u4e5f\u6ca1\u6709\u63a5\u53d7/\u8fd4\u56de\uff0c\u53ef\u4ee5\u7528 `()` \u5373 `Unit` \u6765\u8868\u793a\u3002\u8fd9\u4e2a\u65b9\u6848\u628a\u591a\u4e2a\u53c2\u6570\u548c\u8fd4\u56de\u503c\u7528\u5143\u7ec4\u8868\u793a\u7684\u89c4\u5f8b\u76f8\u7edf\u4e00\uff0c\u6210\u4e3a\u4e86\u5f88\u591a\u73b0\u4ee3\u7f16\u7a0b\u8bed\u8a00\u7684\u5b9e\u8df5\u3002\\n\\n### \u51fd\u6570\u578b\u53d8\\n\\n\u4e0b\u9762\u6211\u4eec\u6765\u8ba8\u8bba\u51fd\u6570\u7c7b\u578b\u4e4b\u95f4\u7684\u7c7b\u578b\u5173\u7cfb\uff0c\u5c24\u5176\u662f\u5176\u5f62\u53d8\uff08variance\uff09\u3002\u5047\u8bbe `B` \u662f `A` \u7684\u5b50\u7c7b\u578b\u3002\\n\\n#### \u534f\u53d8\\n\\n\u8003\u8651\u4e0b\u9762\u4e24\u4e2a\u51fd\u6570\u53ca\u5176\u7c7b\u578b\\n\\n```\\nf: () -> A\\ng: () -> B\\n```\\n\\n\u7531\u4e8e `B` \u662f `A` \u7684\u5b50\u7c7b\u578b\uff0c\u6240\u4ee5 `g()` \u7684\u7ed3\u679c\u662f `B` \u4e5f\u662f `A`\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u80fd\u8bf4\uff0c`g` \u7684\u7c7b\u578b\u540c\u65f6\u4e5f\u53ef\u4ee5\u662f `() -> A`\u3002\u65e2\u7136\u6240\u6709 `() -> B` \u90fd\u662f `() -> A`\uff0c\u90a3\u4e48\u524d\u8005\u5c31\u662f\u540e\u8005\u7684\u5b50\u7c7b\u578b\uff0c\u5373\\n\\n\\n```mermaid\\nclassDiagram\\nclass A\\nclass B\\nA <|-- B\\nclass toA[\\"<code>() -> A</code>\\"]\\nclass toB[\\"<code>() -> B</code>\\"]\\ntoA <|-- toB\\n```\\n\\n\u8fd9\u6837\u51fd\u6570\u6d3e\u751f\u5173\u7cfb\u4e0e\u7c7b\u578b\u6d3e\u751f\u5173\u7cfb\u65b9\u5411\u76f8\u540c\u7684\u578b\u53d8\u6210\u4e3a\u534f\u53d8\uff08covariance\uff09\\n\\n#### \u9006\u53d8\\n\\n\\n\u8003\u8651\u4e0b\u9762\u4e24\u4e2a\u51fd\u6570\u548c\u4e24\u4e2a\u5bf9\u8c61\uff0c\u53ca\u5176\u7c7b\u578b\\n\\n```\\nf: A -> ()\\ng: B -> ()\\na: A\\nb: B\\n```\\n\\n\u7531\u4e8e `B` \u662f `A` \u7684\u5b50\u7c7b\u578b\uff0c\u6240\u4ee5\u4e0d\u4ec5 `f(a)` \u8c03\u7528\u662f\u5408\u6cd5\u7684\uff0c\u800c\u4e14 `f(b)` \u8c03\u7528\u4e5f\u662f\u5408\u6cd5\u7684\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u80fd\u8bf4\uff0c`f` \u7684\u7c7b\u578b\u540c\u65f6\u4e5f\u53ef\u4ee5\u662f `B -> ()`\u3002\u65e2\u7136\u6240\u6709 `A -> ()` \u90fd\u662f `B -> ()`\uff0c\u90a3\u4e48\u524d\u8005\u5c31\u662f\u540e\u8005\u7684\u5b50\u7c7b\u578b\uff0c\u5373\\n\\n\\n```mermaid\\nclassDiagram\\nclass A\\nclass B\\nA <|-- B\\nclass fromA[\\"<code>A -> ()</code>\\"]\\nclass fromB[\\"<code>B -> ()</code>\\"]\\nfromA --|> fromB\\n```\\n\\n\u8fd9\u6837\u51fd\u6570\u6d3e\u751f\u5173\u7cfb\u4e0e\u7c7b\u578b\u6d3e\u751f\u5173\u7cfb\u65b9\u5411\u76f8\u53cd\u7684\u578b\u53d8\u6210\u4e3a\u9006\u53d8\uff08contravariance\uff09\\n\\n#### \u4e0d\u53d8\\n\\n\u8003\u8651\u4e0b\u9762\u4e24\u4e2a\u51fd\u6570\u53ca\u5176\u7c7b\u578b\\n\\n```\\nf: A -> A\\ng: B -> B\\n```\\n\\n\u663e\u7136\u5bf9\u4e8e\u53c2\u6570\u800c\u8a00\uff0c\u53ef\u4ee5\u6784\u6210\u9006\u53d8\uff0c\u5bf9\u4e8e\u8fd4\u56de\u503c\u800c\u8a00\uff0c\u53ef\u4ee5\u6784\u6210\u534f\u53d8\u3002\u4f46\u662f\u5408\u5728\u4e00\u8d77\uff0c\u6d3e\u751f\u5173\u7cfb\u7684\u65b9\u5411\u5c31\u76f8\u4e92\u77db\u76fe\u4e86\u3002\u56e0\u6b64\u8fd9\u6837\u7684\u51fd\u6570\u7c7b\u578b\u79f0\u4e3a\u4e0d\u53d8\uff08invariance\uff09\u3002\u800c\\n\\n```\\nf: A -> B\\ng: B -> A\\n```\\n\\n\u5219\u4e0d\u540c\uff0c\u867d\u7136\u540c\u65f6\u6784\u6210\u534f\u53d8\u548c\u9006\u53d8\uff0c\u4f46\u662f\u4e24\u8005\u7684\u6d3e\u751f\u5173\u7cfb\u662f\u76f8\u4e92\u5e73\u884c\u7684\u3002\u6545\u6700\u7ec8\u53ef\u4ee5\u5f97\u51fa `A -> B` \u662f `B -> A` \u7684\u5b50\u7c7b\u578b\u3002\\n\\n## `never`\\n\\n### \u6c38\u4e0d\u8fd4\u56de\\n\\n\u5f53\u6211\u4eec\u8bf4\uff0c\u4e00\u4e2a\u51fd\u6570\u4e0d\u8fd4\u56de\u4efb\u4f55\u4e1c\u897f\uff0c\u548c\u4e00\u4e2a\u51fd\u6570\u4e0d\u8fd4\u56de\u7684\u65f6\u5019\uff0c\u5b9e\u9645\u4e0a\u542b\u4e49\u662f\u4e0d\u4e00\u6837\u7684\u3002\u524d\u8005\u4f1a\u8fd4\u56de\uff0c\u53ea\u662f\u6ca1\u6709\u8fd4\u56de\u503c\uff0c\u540e\u8005\u5219\u662f\u4e0d\u4f1a\u56de\u5230\u8c03\u7528\u51fd\u6570\u7684\u5730\u65b9\u3002\u4e00\u4e2a\u5178\u578b\u7684\u4f8b\u5b50\u4fbf\u662f C/C++ \u7684 `exit` \u51fd\u6570\uff0c\u58f0\u660e\u5982\u4e0b\u6240\u793a\uff1a\\n\\n```cpp\\n[[noreturn]] void exit(int status);\\n```\\n\\n\u5728\u8fd9\u91cc\uff0c`[[noreturn]]` \u7528\u6765\u6807\u6ce8\u51fd\u6570\u6c38\u8fdc\u4e0d\u4f1a\u8fd4\u56de\u3002\u4f60\u53ef\u80fd\u5df2\u7ecf\u53d1\u89c9\uff0c`[[noreturn]] void` \u8fd9\u4e24\u4e2a\u5728\u4e00\u8d77\u4f3c\u4e4e\u6709\u4e9b\u591a\u4f59\u3002\u96be\u9053\u4e0d\u4f1a\u8fd4\u56de\u7684\u51fd\u6570\u8fd8\u80fd\u58f0\u660e\u4e3a\u975e `void` \u7684\u60c5\u51b5\u5417\uff1f\u8bb8\u591a\u73b0\u4ee3\u8bed\u8a00\u5f15\u5165\u4e86 `never` \u7c7b\u578b\uff08\u4e00\u4e9b\u8bed\u8a00\u79f0\u4e3a `nothing`\uff09\uff0c\u4e13\u95e8\u7528\u4e8e\u8868\u793a\u8fd9\u79cd\u4e0d\u4f1a\u8fd4\u56de\u7684\u51fd\u6570\u7c7b\u578b\u3002\u4f8b\u5982\u4e0a\u9762\u7684\u51fd\u6570\u5c31\u53ef\u4ee5\u8868\u793a\u4e3a\\n\\n```\\nexit: int -> never\\n```\\n\\n\u5982\u679c\u6211\u4eec\u60f3\u8981\u8ba4\u4e3a\u6784\u9020\u51fa\u4e00\u4e2a\u8fd4\u56de `never` \u7684\u51fd\u6570\uff0c\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u83ab\u8fc7\u4e8e\\n\\n- \u8c03\u7528\u5176\u5b83\u8fd4\u56de `never` \u7684\u51fd\u6570\\n- \u6b7b\u5faa\u73af\\n- \u629b\u51fa\u5f02\u5e38\\n\\n\u629b\u51fa\u5f02\u5e38\u770b\u4f3c\u4f1a\u8fd4\u56de\u5230\u4e0a\u4e00\u5c42\u6808\u5e27\uff0c\u4f46\u5b9e\u9645\u4e0a\u4e0d\u4f1a\u8fd4\u56de\u5230\u51fd\u6570\u7684\u8c03\u7528\u70b9\uff0c\u6545\u540c\u6837\u662f\u6c38\u4e0d\u8fd4\u56de\u3002\\n\\n### \u5206\u652f\u8bed\u53e5\\n\\n\u8003\u8651\u4e0b\u9762\u7684\u8bed\u53e5\uff1a\\n\\n```\\na: A\\nb: B\\nvalue = cond ? a : b;\\n```\\n\\n`value` \u662f\u4ec0\u4e48\u7c7b\u578b\uff1f\u4e3a\u4e86\u4fdd\u8bc1\u53ef\u4ee5\u63a5\u53d7\u4e24\u4e2a\u5206\u652f\u7684\u503c\uff0c\u663e\u7136\u5e94\u8be5\u662f `A | B`\u3002\\n\\n\u5047\u5982\u628a\u4ee3\u7801\u6539\u4e3a\\n\\n```\\nvalue = cond ? a : throw Exception();\\n```\\n\\n\u663e\u7136\u4e24\u4e2a\u5206\u652f\u7684\u7c7b\u578b\u5206\u522b\u662f `A` \u548c `never`\u3002\u7531\u4e8e\u7b2c\u4e8c\u4e2a\u5206\u652f\u4e0d\u53ef\u80fd\u8fd4\u56de\uff0c\u6240\u4ee5 `value` \u7684\u7c7b\u578b\u5fc5\u7136\u53d6\u4e00\u4e2a\u5206\u652f\u7684\u7c7b\u578b `A`\u3002\u6839\u636e\u524d\u9762\u7684\u516c\u5f0f\uff0c\u5373 `A | never = A`\u3002\u8fd9\u4e2a\u6052\u7b49\u5f0f\u5b9e\u9645\u4e0a\u5c31\u8bf4\u660e $\\\\text{never} \\\\subset A$\u3002\\n\\n\u7a0d\u52a0\u601d\u7d22\u4f60\u4f1a\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4efb\u4f55\u7c7b\u578b\uff0c\u8fd9\u4e2a\u7ed3\u679c\u90fd\u6ee1\u8db3\u3002\u6362\u53e5\u8bdd\uff0c\u4efb\u4f55\u7c7b\u578b\u90fd\u662f `never` \u7684\u7236\u7c7b\u578b\u3002\u8fd9\u4e5f\u4e0e\u5b9e\u8df5\u76f8\u543b\u5408\uff1a\u65e2\u7136\u4e0d\u4f1a\u8fd4\u56de\uff0c\u90a3\u4e48\u5b9e\u9645\u4e0a\u53ef\u4ee5 `never` \u5f53\u505a\u4efb\u610f\u7c7b\u578b\u7684\u503c\u6765\u770b\u5f85\u3002\u8fd9\u6216\u8bb8\u4e5f\u8bf4\u660e\uff0c\u524d\u9762\u7684 ``[[noreturn]] void`` \u5e76\u5217\uff0c\u5e76\u975e\u662f\u5b8c\u5168\u591a\u4f59\u7684\u3002\u5982\u679c\u4f60\u5e0c\u671b\u5b83\u53c2\u4e0e\u8fd0\u7b97\uff0c\u6216\u8bb8\u6362\u6210\u5176\u5b83\u7c7b\u578b\u4e5f\u662f\u5408\u7406\u7684\u3002\\n\\n\u7531\u4e8e `never` \u5b9e\u9645\u4e0a\u4e0d\u53ef\u80fd\u6709\u4efb\u4f55\u7684\u53d6\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa $\\\\text{never} = \\\\varnothing$\uff0c\u8fd9\u4e5f\u7b26\u5408\u4e0a\u9762\u7684\u6570\u5b66\u903b\u8f91\u3002\\n\\n\u5f88\u663e\u7136\uff0c\u6211\u4eec\u5f97\u51fa\u4e86\u4e00\u79cd\u65b0\u7684 Bottom Type \u7684\u65b9\u6848\uff0c\u90a3\u5c31\u662f `never`\u3002\\n\\n```mermaid\\nclassDiagram\\nclass Super[\\"any\\"]\\nclass A\\nclass B\\nclass C[\\"...\\"]\\nclass Z\\nclass Sub[\\"never\\"]\\nSuper <|-- A\\nSuper <|-- B\\nSuper <|-- C\\nSuper <|-- Z\\nA <|-- Sub\\nB <|-- Sub\\nC <|-- Sub\\nZ <|-- Sub\\n```\\n\\n\u73b0\u5728\u8fd8\u6709\u4e2a\u5c0f\u95ee\u9898\u6ca1\u6709\u89e3\u51b3\uff1a\u5982\u679c\u4e00\u4e2a\u7c7b\u578b\u7cfb\u7edf\u91cc\u9762\u540c\u65f6\u6709 `never` \u548c `null`\uff0c\u600e\u4e48\u4f1a\u51fa\u73b0\u4e24\u4e2a Bottom Type \u5462\uff1f\u96be\u9053\u5b83\u4eec\u4e24\u4e2a\u90fd\u662f\u6240\u6709\u7c7b\u578b\u7684\u5b50\u7c7b\u578b\uff1f\\n\\n## `never?`\\n\\n### \u7a7a\u8bed\u4e49\\n\\n\u8981\u5148\u56de\u7b54\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u4eec\u4e0d\u59a8\u6765\u770b\u770b `null` \u7a76\u7adf\u662f\u4ec0\u4e48\u610f\u601d\u3002\\n\\n`null` \u6700\u521d\u7528\u6765\u8868\u793a\u7a7a\u6307\u9488\uff0c\u5f15\u7533\u4e3a\uff0c\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684\u5bf9\u8c61\u3002\u7531\u4e8e\u4eba\u4eec\u5e38\u5e38\u5fd8\u8bb0\u68c0\u67e5\u5b83\u7684\u5b58\u5728\uff0c\u6240\u4ee5\u5e26\u6765\u7684\u95ee\u9898\u6bd4\u8f83\u591a\u3002\u73b0\u4ee3\u7684\u7f16\u7a0b\u8bed\u8a00\u6709\u4e24\u4e2a\u5b9e\u9645\u4e0a\u7b49\u4ef7\u7684\u89e3\u51b3\u65b9\u6848\uff1a`Option<T>` \u548c Nullability\u3002\\n\\n\u4e00\u79cd\u65b9\u6cd5\uff0c`Option<T> = T | ()`\uff0c\u5373\u8981\u4e48\u6709\u503c\uff0c\u8981\u4e48\u662f `()`\u3002\u8fd9\u6837\u5728\u4f7f\u7528\u7684\u65f6\u5019\u5c31\u5fc5\u987b\u5148\u6392\u9664\u662f `()` \u7684\u60c5\u5f62\u3002\\n\\n\u53e6\u4e00\u79cd\u65b9\u6cd5\u79f0\u4e3a Nullability\uff0c\u5373\u9ed8\u8ba4\u666e\u901a\u7684\u7c7b\u578b `T` \u4e0d\u80fd\u5305\u542b `null`\uff0c\u53ea\u6709\u663e\u5f0f\u6dfb\u52a0\u4e00\u4e2a\u95ee\u53f7 `T?` \u7684\u65f6\u5019\uff0c\u624d\u53ef\u4ee5\u662f\u63a5\u53d7 `null`\u3002\u663e\u7136 `T? = T | null`\uff0c\u662f `T` \u7684\u7236\u7c7b\u578b\uff0c\u4e0d\u80fd\u76f4\u63a5\u8f6c\u6362\u4e3a `T`\uff0c\u8fdb\u800c\u5c31\u9700\u8981\u989d\u5916\u7684\u68c0\u67e5\u624d\u80fd\u4f7f\u7528\u3002\\n\\n\u524d\u4e00\u79cd\u65b9\u6848\u5f80\u5f80\u7528\u4e8e\u6ca1\u6709 `null` \u7684\u60c5\u51b5\u3002\u800c\u6211\u4eec\u5982\u679c\u8981\u8ba8\u8bba `never` \u4e0e `null` \u5e76\u5b58\uff0c\u6545\u8ba8\u8bba\u540e\u4e00\u79cd\u65b9\u6848\u66f4\u4e3a\u5408\u7406\u3002\\n\\n### \u7ed3\u8bba\\n\\n\u8bb2\u5230\u8fd9\u91cc\u5176\u5b9e\u7b54\u6848\u5df2\u7ecf\u547c\u4e4b\u6b32\u51fa\uff0c\u6839\u636e `T? = T | null`\uff1a\\n\\n\u4ee4 $T = \\\\varnothing = \\\\text{never}$\uff0c\u90a3\u4e48 $\\\\text{never}? = \\\\varnothing | \\\\text{null} = \\\\text{null}$\u3002\\n\\n\u4e5f\u5c31\u662f\u8bf4\uff0c`never? = null`\u3002\\n\\n\u6839\u636e\u5b9a\u4e49\uff0c`T` \u662f `T?` \u7684\u5b50\u7c7b\u578b\uff0c\u6240\u4ee5\u6700\u7ec8\u6211\u4eec\u5f97\u51fa\u4e86\u7ed3\u8bba\uff1a`never` \u624d\u662f\u771f\u6b63\u7684 Bottom Type\u3002\\n\\n\u6211\u4eec\u4e5f\u53ef\u4ee5\u753b\u51fa\u4e00\u4e2a\u5b8c\u6574\u7684\uff0c\u5e26 Nullability \u7684\u7c7b\u56fe\uff1a\\n\\n```mermaid\\nclassDiagram\\nclass SuperQ[\\"any?\\"]\\nclass Super[\\"any\\"]\\nclass AQ[\\"A?\\"]\\nclass BQ[\\"B?\\"]\\nclass CQ[\\"...\\"]\\nclass ZQ[\\"Z?\\"]\\nclass A\\nclass B\\nclass C[\\"...\\"]\\nclass Z\\nclass SubQ[\\"never?\\"]\\nclass Sub[\\"never\\"]\\nSuperQ <|-- Super\\nSuper <|-- AQ\\nSuper <|-- BQ\\nSuper <|-- CQ\\nSuper <|-- ZQ\\nAQ <|-- A\\nBQ <|-- B\\nCQ <|-- C\\nZQ <|-- Z\\nA <|-- SubQ\\nB <|-- SubQ\\nC <|-- SubQ\\nZ <|-- SubQ\\nSubQ <|-- Sub\\n```\\n\\n:::tip\\n\u63a8\u8350 BGM\uff1a[Never Enough](https://www.bilibili.com/video/BV1sP411p7Hm/)\\n:::"},{"id":"/join","metadata":{"permalink":"/site/blog/join","source":"@site/blog/join.md","title":"\u8868\u8fde\u63a5\u7b97\u6cd5\u6982\u89c8","description":"\u4e00\u822c\u8fde\u63a5","date":"2023-11-06T00:00:00.000Z","tags":[{"inline":true,"label":"db","permalink":"/site/blog/tags/db"},{"inline":true,"label":"algo","permalink":"/site/blog/tags/algo"}],"readingTime":4.495,"hasTruncateMarker":true,"authors":[],"frontMatter":{"date":"2023-11-06T00:00:00.000Z","tags":["db","algo"]},"unlisted":false,"prevItem":{"title":"never say never? \u2014\u2014\u7b80\u4ecb\u73b0\u4ee3\u7c7b\u578b\u7cfb\u7edf","permalink":"/site/blog/never"},"nextItem":{"title":"\u5149\u7ebf\u2014\u4e09\u89d2\u5f62\u76f8\u4ea4\u7b97\u6cd5","permalink":"/site/blog/ray-intersect"}},"content":"\x3c!--truncate--\x3e\\n\\n## \u4e00\u822c\u8fde\u63a5\\n\\n### \u5f62\u5f0f\u8bed\u8a00\u4e0e SQL\\n\\n\u8fde\u63a5\u4e24\u4e2a\u8868\\n\\n$$\\nR \\\\bowtie_\\\\theta S\\n$$\\n\\n```sql\\nselect *\\nfrom R, S\\nwhere theta\\n```\\n\\n```sql\\nselect *\\nfrom R\\njoin S on theta\\n```\\n\\n\u8fde\u63a5\u591a\u4e2a\u8868\\n\\n$$\\n\\\\Large \\\\bowtie_\\\\theta \\\\normalsize(R_1, R_2, \\\\cdots, R_n)\\n$$\\n\\n```sql\\nselect *\\nfrom R1, R2, ... Rn\\nwhere theta\\n```\\n\\n$$\\nR_1 \\\\bowtie_{\\\\theta_2} R_2 \\\\cdots  \\\\bowtie_{\\\\theta_{n}} R_n\\n$$\\n\\n\\n```sql\\nselect *\\nfrom R1\\njoin R2 on theta2\\n...\\njoin Rn on thetan\\n```\\n\\n$$\\n\\\\theta=\\\\bigwedge_{i=2}^n\\\\theta_i\\n$$\\n\\n### Nested Loop Join\\n\\n\u5bf9\u4e8e\u4e00\u822c\u60c5\u51b5\uff0c\u591a\u91cd\u5faa\u73af\u662f\u6700\u6734\u7d20\u7684\u7b97\u6cd5\\n\\n```python\\nfor r in R.tuples():\\n    for s in S.tuples():\\n        if predicate(r, s):\\n            yield join(r, s)\\n```\\n\\n## \u7b49\u503c\u8fde\u63a5\\n\\n### \u5f62\u5f0f\u8bed\u8a00\u4e0e SQL\\n\\n\u4e00\u79cd\u5e38\u89c1\u7684\u8fde\u63a5\u662f\u7b49\u503c\u8fde\u63a5\\n\\n\u5173\u4e8e\u4e00\u4e2a\u5c5e\u6027\u7684\u7b49\u503c\u8fde\u63a5\\n\\n$$\\nR(id, \\\\cdots), S(id, \\\\cdots)\\\\\\\\\\nR \\\\bowtie_{R.id=S.id} S\\n$$\\n\\n```sql\\nselect *\\nfrom R, S\\nwhere R.id = S.id\\n```\\n\\n```sql\\nselect *\\nfrom R\\njoin S on R.id = S.id\\n```\\n\\n```sql\\nselect *\\nfrom R\\njoin S using (id)\\n```\\n\\n```sql\\nselect *\\nfrom R\\nnatural join S\\n```\\n\\n\u5173\u4e8e\u591a\u4e2a\u5c5e\u6027\u7684\u7b49\u503c\u8fde\u63a5\\n\\n$$\\nR(id1, id2, \\\\cdots), S(id1, id2, \\\\cdots)\\\\\\\\\\nR \\\\bowtie_{R.id1=S.id1 \\\\land R.id2=S.id2 \\\\land \\\\cdots} S\\n$$\\n\\n```sql\\nselect *\\nfrom R, S\\nwhere R.id1 = S.id1 and R.id2 = S.id2 and ...\\n```\\n\\n```sql\\nselect *\\nfrom R\\njoin S on R.id1 = S.id1 and R.id2 = S.id2 and ...\\n```\\n\\n```sql\\nselect *\\nfrom R\\njoin S using (id1, id2, ...)\\n```\\n\\n```sql\\nselect *\\nfrom R\\nnatural join S\\n```\\n\\n\u6d89\u53ca\u7b49\u503c\u67e5\u8be2\u95ee\u9898\uff0c\u547c\u4e4b\u6b32\u51fa\u7684\u5c31\u662f\u4e24\u79cd\u65b9\u6cd5\uff1a\\n\\n- \u6392\u5e8f\u65b9\u6cd5\\n- \u54c8\u5e0c\u65b9\u6cd5\\n\\n\u8fd9\u4e24\u79cd\u65b9\u6cd5\u5728\u5173\u8054\u5bb9\u5668\uff08\u5373\u6709\u5e8f\u548c\u65e0\u5e8f\u7684 `set` \u548c `dict`\uff09\u7684\u6784\u9020\u4e2d\u76f8\u5f53\u6709\u7528\uff0c\u5728\u8868\u8fde\u63a5\u4e2d\u4e5f\u662f\u5982\u6b64\u3002\\n\\n\u5982\u679c\u5176\u4e2d\u4e00\u4e2a\u5173\u7cfb\u5728\u8fde\u63a5\u952e\u4e0a\u6709\u7d22\u5f15\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u91c7\u53d6 Index Nested Loop Join\uff0c\u5426\u5219\u5219\u9700\u8981\u8fdb\u884c\u4e0b\u9762\u4e24\u79cd\u989d\u5916\u7684\u5de5\u4f5c\u3002\\n\\n### Sort-Merge Join\\n\\n\u5bf9 $R$ \u548c $S$ \u6309\u7167\u7b49\u503c\u8fde\u63a5\u6240\u9700\u952e\u6392\u5e8f\uff0c\u968f\u540e\u5206\u522b\u904d\u5386\u4e24\u4e2a\u5173\u7cfb\uff1b\u5f53\u9047\u5230\u5de6\u53f3\u7b49\u503c\u65f6\uff0c\u5c06\u7b49\u503c\u7684\u533a\u95f4\u53d6\u51fa\u6c42\u7b1b\u5361\u5c14\u79ef\u3002\\n\\n```python\\nimport functools\\nimport itertools\\n\\n\\ndef join(p):\\n    r, s = p\\n    return *r, *s\\n\\n\\ndef smj(R, S, cmp):\\n    R.sort(key=functools.cmp_to_key(cmp))\\n    S.sort(key=functools.cmp_to_key(cmp))\\n    ri = iter(R)\\n    si = iter(S)\\n    r = next(ri, None)\\n    s = next(si, None)\\n    while True:\\n        if r is None or s is None:\\n            return\\n        while (c := cmp(r, s)) != 0:\\n            if c < 0:\\n                if (r := next(ri, None)) is None:\\n                    return\\n            else:\\n                if (s := next(si, None)) is None:\\n                    return\\n\\n        rc = [r]\\n        sc = [s]\\n\\n        while (r := next(ri, None)) is not None and cmp(rc[0], r) == 0:\\n            rc.append(r)\\n\\n        while (s := next(si, None)) is not None and cmp(sc[0], s) == 0:\\n            sc.append(s)\\n\\n        yield from map(join, itertools.product(rc, sc))\\n```\\n\\n\u5982\u679c\u8fde\u63a5\u7684\u952e\u662f\u552f\u4e00\u7684\uff0c\u5219\u53ef\u4ee5\u66f4\u8fdb\u4e00\u6b65\u7701\u53bb\u7b1b\u5361\u5c14\u79ef\u7684\u90e8\u5206\uff1a\\n\\n```python\\ndef join(r, s):\\n    return *r, *s\\n\\n\\ndef smj(R, S, cmp):\\n    ri = iter(R)\\n    si = iter(S)\\n    while True:\\n        if (r := next(ri, None)) is None or (s := next(si, None)) is None:\\n            return\\n        while (c := cmp(r, s)) != 0:\\n            if c < 0:\\n                if (r := next(ri, None)) is None:\\n                    return\\n            else:\\n                if (s := next(si, None)) is None:\\n                    return\\n\\n        yield join(r, s)\\n```\\n\\n\u5982\u679c\u4e0d\u60f3\u7f16\u5199\u7b1b\u5361\u5c14\u79ef\u7684\u4ee3\u7801\uff0c\u53c8\u9700\u8981\u8003\u8651\u5230\u952e\u4e0d\u552f\u4e00\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u8fed\u4ee3\u5668\u6807\u8bb0\u6062\u590d\u4e4b\u524d\u7684\u8fc7\u7a0b\uff0c\u4f46\u9700\u8981\u8c28\u614e\u5904\u7406\u5176\u4e2d\u7684\u8fb9\u754c\u6761\u4ef6\uff1a\\n\\n```cpp\\nstruct iterator {\\n    int *p = nullptr, *q = nullptr;\\n    operator bool() const {\\n        return p < q;\\n    }\\n    int operator*() const {\\n        return *p;\\n    }\\n    iterator& operator++() {\\n        ++p;\\n        return *this;\\n    }\\n};\\n\\nvoid smj(iterator r, iterator s) {\\n    iterator mark;\\n    while (r and s) {\\n        if (!mark) {\\n            while (*r != *s) {\\n                if (*r < *s) {\\n                    ++r; \\n                    if (!r) return;\\n                } else {\\n                    ++s;\\n                    if (!s) return;\\n                }\\n            }\\n            mark = s;\\n        }\\n        if (*r == *s) {\\n            emit(*r, *s);\\n            ++s;\\n            if (s) {\\n                continue;\\n            }\\n        } \\n        s = mark;\\n        ++r;\\n        mark = {};\\n    }\\n}\\n```\\n\\n### Hash Join\\n\\n\u7528\u7b49\u503c\u8fde\u63a5\u6240\u9700\u7684\u952e\u7684\u54c8\u5e0c\u503c\u5efa\u7acb $R$ \u7684\u54c8\u5e0c\u8868\uff0c\u518d\u7528 $S$ \u7b49\u503c\u8fde\u63a5\u7684\u952e\u53bb\u67e5\u8be2\u8fd9\u4e2a\u54c8\u5e0c\u8868\uff0c\u5f97\u5230\u7684\u76f8\u540c\u7684\u884c\u8fdb\u884c\u8fde\u63a5\u3002 \\n\\n```python\\ndef join(r, s):\\n    return *r, *s\\n\\n\\ndef hj(R, S, hsh, eq):\\n    build = {}\\n    for s in S:\\n        build.setdefault(hsh(s), []).append(s)\\n    for r in R:\\n        for s in build.get(hsh(r), []):\\n            if eq(r, s):\\n                yield join(r, s)\\n```"},{"id":"/ray-intersect","metadata":{"permalink":"/site/blog/ray-intersect","source":"@site/blog/ray-intersect/index.md","title":"\u5149\u7ebf\u2014\u4e09\u89d2\u5f62\u76f8\u4ea4\u7b97\u6cd5","description":"\u5728\u56fe\u5f62\u5b66\u7f16\u7a0b\u4e2d\uff0c\u7ecf\u5e38\u9700\u8981\u6c42\u73a9\u5bb6\u51c6\u5fc3\u5bf9\u51c6\u7684\u7269\u4f53\u3002\u8be5\u95ee\u9898\u53ef\u8f6c\u5316\u4e3a\u6c42\u4e0e\u73a9\u5bb6\u89c6\u7ebf\u76f8\u4ea4\u4e14\u79bb\u73a9\u5bb6\u6700\u8fd1\u7684\u4e09\u89d2\u5f62\u9762\u7247\u6240\u5bf9\u5e94\u7684\u7269\u4f53\u3002\u56e0\u6b64\u9700\u8981\u4e00\u79cd\u5149\u7ebf-\u4e09\u89d2\u5f62\u76f8\u4ea4\u7b97\u6cd5\u6765\u6c42\u51fa\u89c6\u7ebf\u662f\u5426\u4e0e\u67d0\u4e09\u89d2\u5f62\u76f8\u4ea4\u3001\u82e5\u76f8\u4ea4\uff0c\u8ddd\u79bb\u53c8\u662f\u591a\u5c11\u3002\u4e0b\u9762\u4ecb\u7ecd\u4e00\u79cd\u7b80\u5355\u7684\u57fa\u4e8e\u53c2\u6570\u548c\u77e9\u9635\u6c42\u89e3\u7684\u7b97\u6cd5\u3002","date":"2023-07-03T00:00:00.000Z","tags":[{"inline":true,"label":"math","permalink":"/site/blog/tags/math"},{"inline":true,"label":"cg","permalink":"/site/blog/tags/cg"},{"inline":true,"label":"algo","permalink":"/site/blog/tags/algo"}],"readingTime":2.87,"hasTruncateMarker":true,"authors":[],"frontMatter":{"date":"2023-07-03T00:00:00.000Z","tags":["math","cg","algo"]},"unlisted":false,"prevItem":{"title":"\u8868\u8fde\u63a5\u7b97\u6cd5\u6982\u89c8","permalink":"/site/blog/join"},"nextItem":{"title":"<experimental/simd> \u521d\u4f53\u9a8c","permalink":"/site/blog/simd"}},"content":"\u5728\u56fe\u5f62\u5b66\u7f16\u7a0b\u4e2d\uff0c\u7ecf\u5e38\u9700\u8981\u6c42\u73a9\u5bb6\u51c6\u5fc3\u5bf9\u51c6\u7684\u7269\u4f53\u3002\u8be5\u95ee\u9898\u53ef\u8f6c\u5316\u4e3a\u6c42\u4e0e\u73a9\u5bb6\u89c6\u7ebf\u76f8\u4ea4\u4e14\u79bb\u73a9\u5bb6\u6700\u8fd1\u7684\u4e09\u89d2\u5f62\u9762\u7247\u6240\u5bf9\u5e94\u7684\u7269\u4f53\u3002\u56e0\u6b64\u9700\u8981\u4e00\u79cd\u5149\u7ebf-\u4e09\u89d2\u5f62\u76f8\u4ea4\u7b97\u6cd5\u6765\u6c42\u51fa\u89c6\u7ebf\u662f\u5426\u4e0e\u67d0\u4e09\u89d2\u5f62\u76f8\u4ea4\u3001\u82e5\u76f8\u4ea4\uff0c\u8ddd\u79bb\u53c8\u662f\u591a\u5c11\u3002\u4e0b\u9762\u4ecb\u7ecd\u4e00\u79cd\u7b80\u5355\u7684\u57fa\u4e8e\u53c2\u6570\u548c\u77e9\u9635\u6c42\u89e3\u7684\u7b97\u6cd5\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n## \u539f\u7406\\n\\n\u5df2\u77e5\u4e09\u89d2\u5f62\u7684\u4e09\u4e2a\u9876\u70b9 $\\\\pmb v_0,\\\\pmb v_1,\\\\pmb v_2$\uff0c\u53ef\u4ee5\u7ed9\u51fa\u4e09\u89d2\u5f62\u5185\u70b9\u7684\u53c2\u6570\u65b9\u7a0b\uff1a\\n$$\\n\\\\pmb h=\\\\pmb v_0+\\\\alpha(\\\\pmb v_1- \\\\pmb v_0)+\\\\beta(\\\\pmb v_2- \\\\pmb v_0)\\n$$\\n\\n\u5176\u4e2d\u53c2\u6570 $\\\\alpha,\\\\beta$ \u6ee1\u8db3\u4e0b\u9762\u7684\u6761\u4ef6\uff1a\\n\\n$$\\n\\\\alpha\\\\ge0,\\\\beta\\\\ge0,\\\\alpha+\\\\beta\\\\le1\\n$$\\n\\n\u4ee4\\n\\n$$\\n\\\\pmb e_1=\\\\pmb v_1-\\\\pmb v_0\\\\\\\\\\n\\\\pmb e_2=\\\\pmb v_2-\\\\pmb v_0\\\\\\\\\\n$$\\n\\n\u5219\u53ef\u7b80\u8bb0\u4e3a\uff1a\\n\\n$$\\n\\\\pmb h=\\\\pmb v_0+\\\\alpha\\\\pmb e_1+\\\\beta\\\\pmb e_2\\n$$\\n\\n\u73a9\u5bb6\u4ece $\\\\pmb p$ \u70b9\u5f80 $\\\\pmb r$ \u65b9\u5411\u770b\u53bb\uff0c\u4e0e\u4e09\u89d2\u5f62\u6240\u5728\u5e73\u9762\u7684\u4ea4\u70b9\u4e3a $\\\\pmb h$ \u7684\u53c2\u6570\u65b9\u7a0b\uff1a\\n\\n$$\\n\\\\pmb h=\\\\pmb p+t\\\\pmb r\\n$$\\n\\n\u5176\u4e2d\u53c2\u6570 $t$ \u6ee1\u8db3\uff1a\\n\\n$$\\nt\\\\ge0\\n$$\\n\\n\u5982\u56fe\u6240\u793a\uff1a\\n\\n![](diagram.png)\\n\\n\u8054\u7acb\u4e24\u4e2a\u65b9\u7a0b\\n$$\\n\\\\pmb v_0+\\\\alpha\\\\pmb e_1+\\\\beta\\\\pmb e_2=\\\\pmb p+t\\\\pmb r\\n$$\\n\u79fb\u9879\\n$$\\n\\\\alpha\\\\pmb e_1+\\\\beta\\\\pmb e_2-t\\\\pmb r=\\\\pmb p-\\\\pmb v_0\\n$$\\n\u5373\\n$$\\n(\\\\pmb e_1,\\\\pmb e_2,-\\\\pmb r)\\n\\\\left(\\\\begin{array}{r}\\n\\\\alpha\\\\\\\\\\n\\\\beta\\\\\\\\\\nt\\\\\\\\\\n\\\\end{array}\\\\right)=\\\\pmb p-\\\\pmb v_0\\n$$\\n\u8bb0\\n$$\\n\\\\pmb A=(\\\\pmb e_1,\\\\pmb e_2,-\\\\pmb r)\\\\\\\\\\n\\\\pmb x=\\\\left(\\\\begin{array}{r}\\n\\\\alpha\\\\\\\\\\n\\\\beta\\\\\\\\\\nt\\\\\\\\\\n\\\\end{array}\\\\right)\\\\\\\\\\n\\\\pmb b=\\\\pmb p-\\\\pmb v_0\\n$$\\n\u4e5f\u5c31\u662f\u8bf4\\n$$\\n\\\\pmb A\\\\pmb x=\\\\pmb b\\n$$\\n\u6839\u636e\u514b\u62c9\u9ed8\u6cd5\u5219\\n$$\\nx_j=\\\\dfrac{\\\\det \\\\pmb A_j(\\\\pmb b)}{\\\\det \\\\pmb A}\\n$$\\n\u5f97\\n$$\\n\\\\begin{array}{lll}\\n\\\\alpha&=&\\\\dfrac{\\\\det(\\\\pmb b,\\\\pmb e_2,-\\\\pmb r)}{\\\\det(\\\\pmb e_1,\\\\pmb e_2,-\\\\pmb r)}\\\\\\\\\\n\\\\beta&=&\\\\dfrac{\\\\det(\\\\pmb e_1,\\\\pmb b,-\\\\pmb r)}{\\\\det(\\\\pmb e_1,\\\\pmb e_2,-\\\\pmb r)}\\\\\\\\\\nt&=&\\\\dfrac{\\\\det(\\\\pmb e_1,\\\\pmb e_2,\\\\pmb b)}{\\\\det(\\\\pmb e_1,\\\\pmb e_2,-\\\\pmb r)}\\n\\\\end{array}\\n$$\\n\u5982\u679c\u8ba1\u7b97\u5f97\u51fa\u7684\u53c2\u6570\u5728\u5176\u9650\u5236\u8303\u56f4\u5185\uff0c\u5219\u53ef\u4ee5\u8ba4\u4e3a\u73a9\u5bb6\u7684\u89c6\u7ebf\u4e0e\u4e09\u89d2\u5f62\u76f8\u4ea4\u3002\u89e3\u51fa\u7684\u53c2\u6570 $t$ \u5373\u4e3a\u4e09\u89d2\u5f62\u9762\u7247\u4e0e\u73a9\u5bb6\u7684\u8ddd\u79bb\u3002\\n\\n## \u5b9e\u73b0\\n\\n\u8be5\u5b9e\u73b0\u4f7f\u7528\u4e86 GLM \u5e93\u3002\u8fd9\u91cc\u6784\u9020\u7684\u77e9\u9635\u5b9e\u9645\u4e0a\u662f\u6240\u9700\u77e9\u9635\u7684\u8f6c\u7f6e\uff0c\u4f46\u7531\u4e8e $\\\\det A^T=\\\\det A$\uff0c\u56e0\u6b64\u4e0d\u5f71\u54cd\u7ed3\u679c\u3002\\n\\n\u51fd\u6570\u8fd4\u56de `-1` \u8868\u793a\u5149\u7ebf\u4e0e\u4e09\u89d2\u5f62\u4e0d\u76f8\u4ea4\uff0c\u8fd4\u56de\u975e\u8d1f\u6570\u8868\u793a\u4e09\u89d2\u5f62\u9762\u7247\u4e0e\u73a9\u5bb6\u7684\u8ddd\u79bb\u3002\\n\\n```cpp\\n#include <glm/glm.hpp>\\n\\nfloat raytrace(glm::vec3 v0, glm::vec3 v1, glm::vec3 v2, glm::vec3 p, glm::vec3 r) {\\n    glm::vec3 e1 = v1 - v0;\\n    glm::vec3 e2 = v2 - v0;\\n    glm::vec3 b = p - v0;\\n    float den = glm::determinant(glm::mat3(e1, e2, -r));\\n    if (den == 0) return -1;\\n    float nom_u = glm::determinant(glm::mat3(b, e2, -r));\\n    float nom_v = glm::determinant(glm::mat3(e1, b, -r));\\n    float nom_t = glm::determinant(glm::mat3(e1, e2, b));\\n    float u = nom_u / den;\\n    float v = nom_v / den;\\n    float t = nom_t / den;\\n    if (u >= 0.0 && v >= 0.0 && u + v <= 1.0 && t >= 0) {\\n        return t;\\n    }\\n    return -1;\\n}\\n```"},{"id":"/simd","metadata":{"permalink":"/site/blog/simd","source":"@site/blog/simd.md","title":"<experimental/simd> \u521d\u4f53\u9a8c","description":"\u4e4b\u524d\u7528\u975e\u6807\u51c6\u7684 simd \u5199\u8fc7\u77e9\u9635\u4e58\u6cd5\u52a0\u901f\uff0c\u8fd1\u671f\u6ce8\u610f\u5230 C++ \u65b0\u7684 Technical specifications\u2014\u2014Parallelism library extensions v2 \u52a0\u5165\u4e86 ``\u3002\u4e8e\u662f\u6211\u5c1d\u8bd5\u7528\u5b83\u91cd\u5199\u4e86\u4e00\u4e0b\u3002","date":"2023-05-09T00:00:00.000Z","tags":[{"inline":true,"label":"cpp","permalink":"/site/blog/tags/cpp"},{"inline":true,"label":"type","permalink":"/site/blog/tags/type"}],"readingTime":2.525,"hasTruncateMarker":true,"authors":[],"frontMatter":{"date":"2023-05-09T00:00:00.000Z","tags":["cpp","type"]},"unlisted":false,"prevItem":{"title":"\u5149\u7ebf\u2014\u4e09\u89d2\u5f62\u76f8\u4ea4\u7b97\u6cd5","permalink":"/site/blog/ray-intersect"},"nextItem":{"title":"\u901f\u901a\u7edf\u8ba1\u5b66","permalink":"/site/blog/statistics"}},"content":"[\u4e4b\u524d\u7528\u975e\u6807\u51c6\u7684 simd \u5199\u8fc7\u77e9\u9635\u4e58\u6cd5\u52a0\u901f](https://yaossg.com/site/docs/cnss/2#\u5411\u91cf\u5316)\uff0c\u8fd1\u671f\u6ce8\u610f\u5230 C++ \u65b0\u7684 Technical specifications\u2014\u2014[Parallelism library extensions v2](https://en.cppreference.com/w/cpp/experimental/parallelism_2) \u52a0\u5165\u4e86 [`<experimental/simd>`](https://en.cppreference.com/w/cpp/experimental/simd)\u3002\u4e8e\u662f\u6211\u5c1d\u8bd5\u7528\u5b83\u91cd\u5199\u4e86\u4e00\u4e0b\u3002\\n\\n\\n\x3c!--truncate--\x3e\\n\\n```cpp\\n#include <iostream>\\n#include <string>\\n#include <functional>\\n#include <chrono>\\n#include <vector>\\n#include <cstring>\\nusing namespace std;\\n\\n\\ndouble timeit(std::function<void()> test) {\\n    auto start = std::chrono::system_clock::now();\\n    test();\\n    auto stop = std::chrono::system_clock::now();\\n    std::chrono::duration<double, std::milli> time = stop - start;\\n    return time.count();\\n}\\n\\n#include <experimental/simd>\\nnamespace stdx = std::experimental;\\n\\nstruct vec {\\n    constexpr static int N = 256;\\n\\n    stdx::fixed_size_simd<double, 4> a[N];\\n    double& operator[](int x) {\\n        return ((double*) a)[x];\\n    }\\n    const double& operator[](int x) const {\\n        return ((double*) a)[x];\\n    }\\n    double dot(const vec& x) const {\\n        stdx::fixed_size_simd<double, 4> sum = 0;\\n        for (int i = 0; i < N; i++)\\n            sum += a[i] * x.a[i];\\n        return stdx::reduce(sum);\\n    }\\n};\\n\\nclass matrix {\\n    constexpr static size_t m = 1024, n = 1024;\\n    vector<double> e;\\npublic:\\n    explicit matrix(): e(m * n) {}\\n    void random() {\\n        for (size_t i = 0; i < m; ++i)\\n            for (size_t j = 0; j < n; ++j)\\n                at(i, j) = rand();\\n    }\\n    matrix(matrix const& that) = default;\\n    matrix(matrix&&) = default;\\n    matrix& operator=(matrix const& that) = default;\\n    matrix& operator=(matrix&& that) = default;\\n    double& at(size_t i, size_t j) { return e[i * m + j]; }\\n    double const& at(size_t i, size_t j) const { return e[i * m + j]; }\\n\\n    matrix mul_plain(matrix const& that) const {\\n        size_t p = that.m;\\n        matrix product;\\n        for (size_t i = 0; i < m; ++i)\\n            for (size_t j = 0; j < n; ++j) {\\n                for (size_t k = 0; k < p; ++k)\\n                    product.at(i, j) += at(i, k) * that.at(k, j);\\n            }\\n        return product;\\n    }\\n\\n    matrix mul_simd(matrix const& that) const {\\n        vector<vec> lines(m), columns(n);\\n        for (int i = 0; i < m; ++i) {\\n            for (int j = 0; j < n; ++j) {\\n                lines[i][j] = at(i, j);\\n                columns[j][i] = that.at(i, j);\\n            }\\n        }\\n        matrix r;\\n        for (int i = 0; i < m; ++i) {\\n            for (int j = 0; j < n; ++j) {\\n                r.at(i, j) = lines[i].dot(columns[j]);\\n            }\\n        }\\n        return r;\\n    }\\n};\\n\\ndouble timeit(matrix (matrix::* test)(matrix const&) const, int times, const char* impl, double base = 0) {\\n    double time = timeit([=] {\\n        srand(1);\\n        for (int i = 0; i < times; ++i) {\\n            matrix m1, m2;\\n            m1.random(); m2.random();\\n            (m1.*test)(m2);\\n        }\\n    });\\n    printf(\\"\'%5s\' took %.2f ms to complete %d times 1024 x 1024 matrices multiplication\\", impl, time, times);\\n    if (base && base != time) {\\n        printf(\\", %.2f%% \\", abs(base - time) / base * 100);\\n        if (base > time) printf(\\"faster\\");\\n        else printf(\\"slower\\");\\n    }\\n    puts(\\"\\");\\n    return time;\\n}\\n\\n\\nint main() {\\n    double base = timeit(&matrix::mul_plain, 1, \\"plain\\");\\n    timeit(&matrix::mul_simd, 1, \\"simd\\", base);\\n}\\n```\\n\\n\u8f93\u51fa\uff1a\\n\\n```text\\n\'plain\' took 5458.48 ms to complete 1 times 1024 x 1024 matrices multiplication\\n\' simd\' took 232.27 ms to complete 1 times 1024 x 1024 matrices multiplication, 95.74% faster\\n```"},{"id":"/statistics","metadata":{"permalink":"/site/blog/statistics","source":"@site/blog/statistics.md","title":"\u901f\u901a\u7edf\u8ba1\u5b66","description":"\u672c\u6587\u4e3a UESTC \u300a\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1\u300b\u8bfe\u7a0b\u7edf\u8ba1\u5b66\u90e8\u5206\uff086-10\u7ae0\uff09\u671f\u672b\u8003\u8bd5\u590d\u4e60\u901f\u901a\u7b14\u8bb0\uff0c\u65e8\u5728\u80cc\u591a\u5206\u3002","date":"2023-02-06T00:00:00.000Z","tags":[{"inline":true,"label":"math","permalink":"/site/blog/tags/math"}],"readingTime":1.315,"hasTruncateMarker":true,"authors":[],"frontMatter":{"date":"2023-02-06T00:00:00.000Z","tags":["math"]},"unlisted":false,"prevItem":{"title":"<experimental/simd> \u521d\u4f53\u9a8c","permalink":"/site/blog/simd"},"nextItem":{"title":"SSO? SOS!","permalink":"/site/blog/sso"}},"content":"\u672c\u6587\u4e3a UESTC \u300a\u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1\u300b\u8bfe\u7a0b\u7edf\u8ba1\u5b66\u90e8\u5206\uff086-10\u7ae0\uff09\u671f\u672b\u8003\u8bd5\u590d\u4e60\u901f\u901a\u7b14\u8bb0\uff0c\u65e8\u5728\u80cc\u591a\u5206\u3002\\n\\n\\n\x3c!--truncate--\x3e\\n\\n## \u56db\u4e2a\u7edf\u8ba1\u5b66\u5206\u5e03\\n\\n### \u6b63\u6001\u5206\u5e03\\n\\n$$\\nX\\\\sim N(\\\\mu, \\\\sigma^2)\\\\\\\\\\nE(X)=\\\\mu,D(X)=\\\\sigma^2\\n$$\\n\\n### \u5361\u65b9\u5206\u5e03\\n\\n$$\\n\\\\chi^2=\\\\sum_{i=1}^n X_i^2\\\\sim\\\\chi^2(n)\\\\\\\\\\n\\\\text{ \u5176\u4e2d } X \\\\sim N(0, 1)\\\\\\\\\\nE(\\\\chi^2)=n,D(\\\\chi^2)=2n\\n$$\\n\\n### t \u5206\u5e03\\n\\n\u53c8\u53eb\u5b66\u751f\u5206\u5e03\\n$$\\nT=\\\\dfrac{X}{\\\\sqrt{Y/n}} \\\\sim t(n)\\\\\\\\\\n\\\\text{ \u5176\u4e2d } X \\\\sim N(0, 1), Y\\\\sim\\\\chi^2(n)\\n$$\\n\\n### F \u5206\u5e03\\n\\n\u53c8\u53eb\u8d39\u5e0c\u5c14\uff08Fisher\uff09\u5206\u5e03\\n$$\\nF=\\\\dfrac{X/n_1}{Y/n_2}\\\\sim F(n_1,n_2)\\\\\\\\\\n\\\\text{ \u5176\u4e2d } X\\\\sim\\\\chi^2(n_1), Y\\\\sim\\\\chi^2(n_2)\\n$$\\n\\n## \u53c2\u6570\u4f30\u8ba1\u4e0e\u5047\u8bbe\u68c0\u9a8c\\n\\n### \u8ddd\u4f30\u8ba1\\n\\n$$\\n\\\\hat{\\\\mu}=\\\\overline{X}\\\\\\\\\\n\\\\hat{\\\\sigma}^2=\\\\dfrac{n-1}nS^2\\n$$\\n\\n### \u6781\u5927\u4f3c\u7136\u4f30\u8ba1\\n\\n\u6838\u5fc3\u601d\u60f3\u662f\u4f7f\u4f3c\u7136\u51fd\u6570 $L$ \u53d6\u6781\u5927\u503c\u3002\u5373\u6c42\u51fa\u4e00\u4e2a $\\\\theta$\uff0c\u4f7f\u53d6\u51fa\u8fd9\u4e2a\u6837\u672c\u7684\u6982\u7387\u6700\u5927\u3002\\n$$\\nL=\\\\prod_{i=1}^nP(X_i=x_i)\\\\\\\\\\n\\\\ln L=\\\\sum_{i=1}^n \\\\ln P(X_i=x_i)\\\\\\\\\\n\\\\dfrac{\\\\partial \\\\ln L}{\\\\partial\\\\theta}=0\\n$$\\n\\n### \u533a\u95f4\u4f30\u8ba1\u4e0e\u5047\u8bbe\u68c0\u9a8c\\n\\n- \u4f30\u8ba1\u6216\u68c0\u9a8c $\\\\mu$\uff0c\u5f53 $\\\\sigma$ \u5df2\u77e5\u65f6\\n\\n$$\\nU=\\\\dfrac{\\\\overline{X}-\\\\mu}{\\\\sigma/\\\\sqrt{n}}\\\\sim N(0,1)\\n$$\\n\\n- \u4f30\u8ba1\u6216\u68c0\u9a8c $\\\\mu$\uff0c\u5f53 $\\\\sigma$ \u672a\u77e5\u65f6\\n\\n$$\\nT=\\\\dfrac{\\\\overline{X}-\\\\mu}{S/\\\\sqrt{n}}\\\\sim t(n-1)\\n$$\\n\\n- \u4f30\u8ba1\u6216\u68c0\u9a8c $\\\\sigma$\uff0c\u5f53 $\\\\mu$ \u672a\u77e5\u65f6\\n\\n$$\\n\\\\chi^2=\\\\dfrac{n-1}{\\\\sigma^2}S^2\\\\sim\\\\chi^2(n-1)\\n$$\\n\\n\u7b2c\u4e00\u7c7b\u9519\u8bef\uff1a\u5f03\u771f\uff08\u72af\u9519\u6982\u7387\u4e3a $\\\\alpha$\uff09\\n\\n\u7b2c\u4e8c\u7c7b\u9519\u8bef\uff1a\u7eb3\u4f2a\\n\\n## \u7ebf\u6027\u56de\u5f52\\n\\n$$\\nl_{xy}=\\\\sum_{i=1}^nx_iy_i-n\\\\bar{x}\\\\bar{y}\\\\\\\\\\nl_{xx}=\\\\sum_{i=1}^nx_i^2-n\\\\bar{x}^2\\\\\\\\\\nl_{yy}=\\\\sum_{i=1}^ny_i^2-n\\\\bar{y}^2\\\\\\\\\\n\\\\hat{b}=\\\\dfrac{l_{xy}}{l_{xx}}, \\\\hat{a}=\\\\bar{y}-\\\\hat{b}\\\\bar{x}\\\\\\\\\\n\\\\hat{\\\\sigma}^2=\\\\dfrac{l_{yy}-\\\\hat{b}^2l_{xx}}{n-2}\\\\\\\\\\nR=\\\\dfrac{l_{xy}}{\\\\sqrt{l_{xx}l_{yy}}}>R_\\\\alpha(n-2)\\n$$"},{"id":"/sso","metadata":{"permalink":"/site/blog/sso","source":"@site/blog/sso/index.md","title":"SSO? SOS!","description":"\u8fd9\u662f\u6211\u5728\u7f16\u5199\u7f16\u8bd1\u5668\u7684\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u4e00\u4e2a\u8ba9\u4eba\u62cd\u6848\u53eb\u7edd\u7684\u9677\u9631\u3002\u7279\u6b64\u8bb0\u5f55\u4e0b\u6765\u3002","date":"2023-01-05T00:00:00.000Z","tags":[{"inline":true,"label":"cpp","permalink":"/site/blog/tags/cpp"}],"readingTime":7.86,"hasTruncateMarker":true,"authors":[],"frontMatter":{"date":"2023-01-05T00:00:00.000Z","tags":["cpp"]},"unlisted":false,"prevItem":{"title":"\u901f\u901a\u7edf\u8ba1\u5b66","permalink":"/site/blog/statistics"},"nextItem":{"title":"\u9ad8\u4e2d\u5706\u9525\u66f2\u7ebf\u7ed3\u8bba","permalink":"/site/blog/analytic-geometry"}},"content":"\u8fd9\u662f\u6211\u5728\u7f16\u5199\u7f16\u8bd1\u5668\u7684\u8fc7\u7a0b\u4e2d\u9047\u5230\u7684\u4e00\u4e2a\u8ba9\u4eba\u62cd\u6848\u53eb\u7edd\u7684\u9677\u9631\u3002\u7279\u6b64\u8bb0\u5f55\u4e0b\u6765\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n## \u95ee\u9898\\n\\n\u5047\u8bbe\u4f60\u6b63\u5728\u7f16\u5199\u6e90\u4ee3\u7801\u5904\u7406\u7cfb\u7edf\u3002\u4f60\u8bbe\u8ba1\u4e86\u8fd9\u6837\u4e00\u4e2a\u51fd\u6570\u548c\u7c7b\uff1a\\n```cpp\\nstd::vector<std::string_view> splitLines(std::string_view view) {\\n    std::vector<std::string_view> lines;\\n    const char *p = view.begin(), *q = p, *r = view.end();\\n    while (q != r) {\\n        if (*q++ == \'\\\\n\') {\\n            lines.emplace_back(p, q - 1);\\n            p = q;\\n        }\\n    }\\n    if (p != q) lines.emplace_back(p, q);\\n    return lines;\\n}\\n\\nstruct Source {\\n    std::vector<std::string> snippets;\\n    std::vector<std::string_view> lines;\\n\\n    void append(std::string code) {\\n        snippets.push_back(std::move(code));\\n        for (auto line : splitLines(snippets.back())) {\\n            lines.push_back(line);\\n        }\\n    }\\n};\\n```\\n\\n\u4e3a\u4e86\u6548\u7387\uff0c\u4f60\u6ca1\u6709\u771f\u7684\u53bb\u5206\u5272\u5b57\u7b26\u4e32\u2014\u2014\u800c\u662f\u5229\u7528 `string_view`\uff0c\u5f15\u7528\u5b57\u7b26\u4e32\u4e2d\u7684\u4e00\u6bb5\u4f5c\u4e3a\u4e00\u884c\uff0c\u5e76\u628a\u5b83\u4eec\u5b58\u5165 `lines`\u3002\u4f46\u662f `string_view` \u5e76\u6ca1\u6709\u5b57\u7b26\u4e32\u7684\u6240\u6709\u6743\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u5b83\u5f15\u7528\u7684\u5b57\u7b26\u4e32\u4e0d\u88ab\u56de\u6536\uff0c\u518d\u4f7f\u7528 `snippets` \u6765\u4fdd\u5b58\u8fd9\u4e9b\u5b57\u7b26\u4e32\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a\\n\\n![](snippets.png)\\n\\n\u4e0b\u9762\u6211\u4eec\u6765\u8bd5\u4e00\u8bd5\uff1a\\n\\n```cpp\\nint main() {\\n    Source source;\\n    source.append(\\"ab\\\\ncd\\\\nef\\");\\n    for (auto line : source.lines) {\\n        std::cout << line << std::endl;\\n    }\\n}\\n```\\n\\n\u8f93\u51fa\uff1a\\n\\n```\\nab\\ncd\\nef\\n```\\n\\n\u5f88\u597d\uff01\\n\\n\u53ef\u662f\uff0c\u5f53\u6211\u4eec\u8bd5\u56fe\u591a\u6b21\u8c03\u7528 append \u7684\u65f6\u5019\\n\\n```cpp\\nint main() {\\n    Source source;\\n    source.append(\\"line 1\\");\\n    source.append(\\"line 2\\");\\n    source.append(\\"line 3\\");\\n    for (auto line : source.lines) {\\n        std::cout << line << std::endl;\\n    }\\n}\\n```\\n\\n\u5927\u8dcc\u773c\u955c\u7684\u4e8b\u60c5\u53d1\u751f\u4e86\uff1a\u8f93\u51fa\u4e86\u4e00\u56e2\u4e71\u7801\uff01\\n\\n## \u601d\u8003\\n\\n\u8f93\u51fa\u4e71\u7801\u539f\u56e0\u6709\u54ea\u4e9b\u5462\uff1f\u4f60\u80af\u5b9a\u5df2\u7ecf\u60f3\u5230\u4e86\u4ee5\u4e0b\u4e24\u79cd\u53ef\u80fd\uff1a\\n\\n- `string` \u7ba1\u7406\u7684 `char[]` \u88ab\u8986\u5199\u6216\u88ab\u91ca\u653e\u4e86\\n- `string_view` \u88ab\u4fee\u6539\u4e86\\n\\n\u5148\u6765\u6d4b\u4e00\u4e0b\u7b2c\u4e00\u79cd\u53ef\u80fd\\n\\n```cpp\\nint main() {\\n    Source source;\\n    source.append(\\"line 1\\");\\n    source.append(\\"line 2\\");\\n    source.append(\\"line 3\\");\\n    for (auto const& snippet : source.snippets) {\\n        std::cout << snippet << std::endl;\\n    }\\n}\\n```\\n\\n\u8f93\u51fa\uff1a\\n\\n```\\nline 1\\nline 2\\nline 3\\n```\\n\\n\u770b\u4e0a\u53bb\u5b57\u7b26\u4e32\u5b8c\u597d\u65e0\u635f\u3002\\n\\n\u518d\u6765\u6d4b\u6d4b\u7b2c\u4e8c\u79cd\u53ef\u80fd\\n\\n```cpp\\nint main() {\\n    Source source;\\n    source.append(\\"line 1\\");\\n    for (auto line : source.lines) {\\n        std::cout << (void*) line.data() << \' \';\\n    }\\n    std::cout << std::endl;\\n    source.append(\\"line 2\\");\\n    for (auto line : source.lines) {\\n        std::cout << (void*) line.data() << \' \';\\n    }\\n    std::cout << std::endl;\\n    source.append(\\"line 3\\");\\n    for (auto line : source.lines) {\\n        std::cout << (void*) line.data() << \' \';\\n    }\\n}\\n```\\n\\n\u8f93\u51fa\uff1a\\n\\n```\\n0x26a40fc18e0\\n0x26a40fc18e0 0x26a40fc1c90\\n0x26a40fc18e0 0x26a40fc1c90 0x26a40fc1d00\\n```\\n\\n`string_view` \u4e5f\u6ca1\u6709\u53d8\u5316\uff01\\n\\n## \u89c4\u5f8b\\n\\n\u4f60\u53ef\u80fd\u767e\u601d\u4e0d\u5f97\u5176\u89e3\u3002\u5148\u522b\u6025\uff0c\u6211\u4eec\u518d\u6765\u505a\u4e00\u4e2a\u5b9e\u9a8c\u3002\\n\\n\u4e4b\u524d\u6211\u4eec\u5c31\u53d1\u73b0\uff0c\u5982\u679c\u53ea `append` \u4e00\u6b21\u662f\u6ca1\u95ee\u9898\u7684\u3002\u90a3\u4e48\u4e0d\u59a8\u6d4b\u8bd5\u4e00\u4e0b\u4e71\u7801\u4e0e `append` \u6b21\u6570\u6709\u6ca1\u6709\u4ec0\u4e48\u5173\u7cfb\u3002\\n\\n```cpp\\nint main() {\\n    Source source;\\n    for (int i = 0; i < 10; ++i) {\\n        source.append(\\"OOO\\");\\n        for (auto line: source.lines) {\\n            if (line == \\"OOO\\") {\\n                std::cout << line << \' \';\\n            } else {\\n                std::cout << \\"***\\" << \' \';\\n            }\\n        }\\n        std::cout << std::endl;\\n    }\\n}\\n```\\n\\n\u8f93\u51fa\uff1a\\n\\n```\\nOOO\\n*** OOO\\n*** *** OOO\\n*** *** OOO OOO\\n*** *** *** *** OOO\\n*** *** *** *** OOO OOO\\n*** *** *** *** OOO OOO OOO\\n*** *** *** *** OOO OOO OOO OOO\\n*** *** *** *** *** *** *** *** OOO\\n*** *** *** *** *** *** *** *** OOO OOO\\n```\\n\\n\u8fd9\u592a\u6709\u89c4\u5f8b\u4e86\uff01\u6bcf\u6b21 `append` \u4e71\u7801\u7684 `string_view` \u6570\u91cf\u8981\u4e48\u4fdd\u6301\u4e0d\u53d8\uff0c\u8981\u4e48\u5c31\u7ffb\u4e00\u500d\uff0c\u8fd9\u4f3c\u4e4e\u6697\u5408\u4e86\u67d0\u4e2a\u5bb9\u5668\u7684\u67d0\u4e2a\u7279\u6027\u3002\u662f\u7684\uff0c`vector`\u3002\u4e8e\u662f\u6211\u4eec\u5bf9\u524d\u9762\u7684 `Source` \u4f5c\u51fa\u4e00\u70b9\u4fee\u6539\uff1a\\n\\n```\\nstruct Source {\\n\\n-   std::vector<std::string> snippets;\\n+   std::deque<std::string> snippets;\\n    \\n};\\n```\\n\\n\u518d\u6267\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u8f93\u51fa\uff1a\\n\\n```\\nOOO\\nOOO OOO\\nOOO OOO OOO\\nOOO OOO OOO OOO\\nOOO OOO OOO OOO OOO\\nOOO OOO OOO OOO OOO OOO\\nOOO OOO OOO OOO OOO OOO OOO\\nOOO OOO OOO OOO OOO OOO OOO OOO\\nOOO OOO OOO OOO OOO OOO OOO OOO OOO\\nOOO OOO OOO OOO OOO OOO OOO OOO OOO OOO\\n```\\n\\n\u4fee\u590d\u4e86\uff01\u592a\u68d2\u4e86\uff01\\n\\n\u4f46\uff0c\u8fd9\u5e94\u8be5\u4e0d\u662f `vector` \u7684\u95ee\u9898\u5427\uff1f\\n\\n## \u7b2c\u4e09\u79cd\u53ef\u80fd\\n\\n`vector` \u5728 `size > capacity` \u7684\u65f6\u5019\uff0c\u4f1a\u91cd\u65b0\u5206\u914d\u4e24\u500d\u7684\u7a7a\u95f4\uff0c\u5e76\u628a\u539f\u6765\u7684\u5143\u7d20\u5168\u90e8\u79fb\u52a8\u8fc7\u53bb\u3002\u4f46\u662f\u79fb\u52a8\u7684\u662f `string`\uff0c\u5b83\u7ba1\u7406\u7684 `char[]` \u96be\u9053\u4e5f\u8ddf\u7740\u53d1\u751f\u4e86\u79fb\u52a8\u5417\uff1f\u8fd8\u662f\u8bf4\uff0c\u53d1\u751f\u7684\u4e0d\u662f\u79fb\u52a8\uff0c\u800c\u662f\u590d\u5236\uff1f\\n\\n\u5e26\u7740\u8fd9\u4e2a\u7591\u95ee\uff0c\u6211\u4eec\u518d\u505a\u4e00\u4e2a\u5b9e\u9a8c\uff1a\\n\\n```cpp\\nstruct Observer {\\n    int i;\\n    Observer(int i): i(i) {\\n        std::cout << \\" make \\" << i;\\n    }\\n    Observer(Observer&& other) noexcept: i(other.i) {\\n        std::cout << \\" move \\" << i;\\n    }\\n    Observer(const Observer& other): i(other.i) {\\n        std::cout << \\" copy \\" << i;\\n    }\\n};\\n\\nint main() {\\n    std::vector<Observer> observers;\\n    std::cout << \\"line 1: \\";\\n    observers.emplace_back(1);\\n    std::cout << std::endl << \\"line 2: \\";\\n    observers.emplace_back(2);\\n    std::cout << std::endl << \\"line 3: \\";\\n    observers.emplace_back(3);\\n    std::cout << std::endl << \\"line 4: \\";\\n    observers.emplace_back(4);\\n}\\n```\\n\\n\u8f93\u51fa\uff1a\\n\\n```\\nline 1:  make 1\\nline 2:  make 2 move 1\\nline 3:  make 3 move 1 move 2\\nline 4:  make 4\\n```\\n\\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c`Observer` \u79fb\u52a8\u6784\u9020\u5668\u7684 `noexcept` \u662f\u4e0d\u53ef\u4ee5\u7701\u7565\u7684\uff0c\u5426\u5219\u5b83\u4f1a\u4f18\u5148\u9009\u62e9\u590d\u5236\u6784\u9020\u5668\u800c\u4e0d\u662f\u53ef\u80fd\u629b\u51fa\u5f02\u5e38\u7684\u79fb\u52a8\u6784\u9020\u5668\u3002\\n\\n\u7ecf\u8fc7\u67e5\u8be2\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u8ba4 `string` \u7684\u79fb\u52a8\u6784\u9020\u5668\u662f `noexcept` \u7684\u3002\u53ef\u89c1\u53d1\u751f\u7684\u662f\u79fb\u52a8\u800c\u4e0d\u662f\u590d\u5236\u3002\\n\\n\u4e5f\u5c31\u662f\u8bf4\uff1a\u6211\u4eec\u79fb\u52a8\u4e86 `string`\uff0c\u800c\u5b83\u7ba1\u7406\u7684 `char[]` \u4e5f\u8ddf\u7740\u79fb\u52a8\u4e86\uff01\u4e3a\u4ec0\u4e48\uff1f\\n\\n\u5728\u5f15\u51fa\u4eca\u5929\u7684\u4e3b\u89d2\u4e4b\u524d\uff0c\u6211\u4eec\u518d\u6d4b\u8bd5\u4e00\u4e2a\u4f8b\u5b50\u3002`Source` \u56de\u9000\u5230\u672a\u4fee\u590d\u7684\u7248\u672c\uff0c\u8fd0\u884c\u4e0b\u9762\u7684\u4ee3\u7801\uff1a\\n\\n```cpp\\nint main() {\\n    Source source;\\n    source.append(\\"a very long line 1\\");\\n    source.append(\\"a very long line 2\\");\\n    source.append(\\"a very long line 3\\");\\n    for (auto line : source.lines) {\\n        std::cout << line << std::endl;\\n    }\\n}\\n```\\n\\n\u8f93\u51fa\uff1a\\n\\n```\\na very long line 1\\na very long line 2\\na very long line 3\\n```\\n\\n\u95ee\u9898\u5947\u8ff9\u822c\u7684\u6d88\u5931\u4e86\u3002\\n\\n## SSO\\n\\n\u6ca1\u9519\uff0c\u8fd9\u4e00\u5207\u7684\u7f6a\u9b41\u7978\u9996\u4fbf\u662f\uff1a\u77ed\u5b57\u7b26\u4e32\u4f18\u5316\uff08Short String Optimization\uff0cSSO\uff09\u3002\\n\\n\u8fd9\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u5b57\u7b26\u4e32\u5b9e\u73b0\uff0c\u88ab\u5927\u90e8\u5206\u7684\u6807\u51c6\u5e93\uff08\u5982 GCC libstdc++\u3001Clang libc++\u3001MSVC STL \u7b49\uff09\u91c7\u7528\u3002\u5f53\u5b57\u7b26\u4e32\u6bd4\u8f83\u957f\u7684\u65f6\u5019\uff0c\u5b57\u7b26\u4e32\u4f1a\u88ab\u5b58\u5728\u522b\u5904\uff0c\u5e76\u7528 `string` \u5bf9\u8c61\u4e2d\u7684\u6307\u9488\u5f15\u7528\uff0c\u5982\u6211\u4eec\u9884\u6599\u7684\u4e00\u6837\uff1b\u5f53\u5b57\u7b26\u4e32\u6bd4\u8f83\u77ed\u7684\u65f6\u5019\uff0c\u5b57\u7b26\u4e32\u5c06\u76f4\u63a5\u5b58\u5728 `string` \u5bf9\u8c61\u5185\u90e8\uff01\\n\\n\u4f8b\u5982 libstdc++ \u7684\u5b9e\u73b0\u5982\u4e0b\u56fe\u6240\u793a\uff1a\\n\\n```cpp\\nstd::string s1 = \\"line 1\\";\\nstd::string s2 = \\"a very long line 1\\";\\n```\\n\\n![](sso.png)\\n\\n\u5728\u8fd9\u4e2a\u5b9e\u73b0\u4e2d\uff0c\u77ed\u5b57\u7b26\u4e32\u4f18\u5316\u7684\u9608\u503c\u662f 15\u3002\u672b\u5c3e\u591a\u4f59\u7684\u4e00\u4e2a\u5b57\u7b26\u7528\u6765\u5b58 0\uff0c\u6765\u4fdd\u8bc1\u5b83\u540c\u65f6\u662f\u4e00\u4e2a C-Style String\u3002\u6b64\u65f6 `capacity()` \u6c38\u8fdc\u8fd4\u56de 15\u3002\\n\\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u5f53\u5b57\u7b26\u4e32\u8f83\u77ed\u7684\u65f6\u5019\uff0c\u7531\u5b83\u6784\u9020\u7684 `string_view` \u5b9e\u9645\u4e0a\u662f\u6307\u5411 `string` \u81ea\u5df1\uff08\u7684\u4e00\u90e8\u5206\uff09\u7684\uff01\u90a3\u4e48\u5f53 `string` \u672c\u8eab\u88ab\u79fb\u8d70\uff0c\u5b83\u6240\u5728\u7684\u4f4d\u7f6e\u88ab\u91ca\u653e\uff0c`string_view` \u81ea\u7136\u800c\u7136\u5c31\u5f15\u7528\u4e86\u4e00\u6bb5\u975e\u6cd5\u7684\u5185\u5b58\u3002`deque` \u5728\u63d2\u5165\u65b0\u5143\u7d20\u7684\u65f6\u5019\u4e0d\u4f1a\u79fb\u52a8\u65e7\u5143\u7d20\uff0c\u56e0\u6b64\u907f\u514d\u4e86\u8fd9\u4e2a\u95ee\u9898\u3002\\n\\n## \u540e\u8bb0\\n\\n\u6211\u5b9e\u9645\u4e0a\u5f88\u65e9\u5c31\u4e86\u89e3\u8fc7 SSO\uff0c\u4f46\u662f\u5b9e\u5728\u6ca1\u6599\u5230\u4f1a\u4ee5\u8fd9\u6837\u7684\u5f62\u5f0f\u906d\u9047\uff0c\u8fc7\u7a0b\u66f2\u6298\u79bb\u5947\uff0c\u53f9\u4e3a\u89c2\u6b62\u3002\u53ea\u80fd\u8bf4\u5982\u679c\u6ca1\u6709\u8fd9\u4e2a\u524d\u7f6e\u77e5\u8bc6\u6211\u53ef\u80fd\u8fd8\u5f97\u57cb\u5934\u82e6\u82e6\u5bfb\u627e\u539f\u56e0\u5f88\u957f\u65f6\u95f4\u3002"},{"id":"/analytic-geometry","metadata":{"permalink":"/site/blog/analytic-geometry","source":"@site/blog/analytic-geometry.md","title":"\u9ad8\u4e2d\u5706\u9525\u66f2\u7ebf\u7ed3\u8bba","description":"\u9ad8\u4e2d\u5706\u9525\u66f2\u7ebf\u7684\u7279\u70b9\u5c31\u662f\u8ba1\u7b97\u91cf\u5927\uff0c\u8fd9\u5bf9\u4e0d\u64c5\u957f\u8ba1\u7b97\u7684\u540c\u5b66\u975e\u5e38\u4e0d\u53cb\u597d\u3002\u6240\u4ee5\u6211\u63d0\u524d\u63a8\u51fa\u4e86\u4e00\u4e9b\u91cd\u8981\u7684\u7ed3\u8bba\uff0c\u8003\u8bd5\u65f6\u53ea\u9700\u8981\u5217\u597d\u65b9\u7a0b\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u5957\u7528\u7ed3\u8bba\u4e86\u3002","date":"2021-06-06T00:00:00.000Z","tags":[{"inline":true,"label":"math","permalink":"/site/blog/tags/math"}],"readingTime":0.595,"hasTruncateMarker":true,"authors":[],"frontMatter":{"date":"2021-06-06T00:00:00.000Z","tags":["math"]},"unlisted":false,"prevItem":{"title":"SSO? SOS!","permalink":"/site/blog/sso"}},"content":"\u9ad8\u4e2d\u5706\u9525\u66f2\u7ebf\u7684\u7279\u70b9\u5c31\u662f\u8ba1\u7b97\u91cf\u5927\uff0c\u8fd9\u5bf9\u4e0d\u64c5\u957f\u8ba1\u7b97\u7684\u540c\u5b66\u975e\u5e38\u4e0d\u53cb\u597d\u3002\u6240\u4ee5\u6211\u63d0\u524d\u63a8\u51fa\u4e86\u4e00\u4e9b\u91cd\u8981\u7684\u7ed3\u8bba\uff0c\u8003\u8bd5\u65f6\u53ea\u9700\u8981\u5217\u597d\u65b9\u7a0b\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u5957\u7528\u7ed3\u8bba\u4e86\u3002\\n\\n\x3c!--truncate--\x3e\\n\\n\u82e5\u692d\u5706\uff08$b^2>0$\uff09\u6216\u53cc\u66f2\u7ebf\uff08$b^2<0$\uff09\\n$$\\n\\\\frac{x^2}{a^2}+\\\\frac{y^2}{b^2}=1\\n$$\\n\u4e0e\u76f4\u7ebf\\n$$\\ny=kx+m\\n$$\\n\u4ea4\u4e8e$A(x_1,y_1),B(x_2,y_2)$\uff0c\u8054\u7acb\u6d88 $y$\\n$$\\n(b^2+a^2k^2)x^2+2kma^2x+a^2(m^2-b^2)=0\\n$$\\n\u5f97\\n$$\\n\\\\Delta = 4a^2b^2(b^2+a^2k^2 - m^2) \\\\geq 0\\n$$\\n$$\\nx_1+x_2=\\\\frac{-2kma^2}{b^2+a^2k^2},\\nx_1x_2=\\\\frac{a^2(m^2-b^2)}{b^2+a^2k^2}\\n$$\\n$$\\ny_1+y_2=\\\\frac{2mb^2}{b^2+a^2k^2},\\ny_1y_2=\\\\frac{b^2(m^2-a^2k^2)}{b^2+a^2k^2}\\n$$\\n$$\\nx_1y_2+x_2y_1=\\\\frac{-2ka^2b^2}{b^2+a^2k^2}\\n$$\\n$$\\n|x_1y_2-x_2y_1|=|m|\\\\frac{\\\\sqrt{\\\\Delta}}{b^2+a^2k^2}\\n$$\\n$$\\n|AB|=\\\\sqrt{1+k^2}\\\\frac{\\\\sqrt{\\\\Delta}}{b^2+a^2k^2}\\n$$"}]}}')}}]);