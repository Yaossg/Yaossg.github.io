"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[11],{3905:(n,e,t)=>{t.d(e,{Zo:()=>d,kt:()=>f});var r=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var l=r.createContext({}),c=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},d=function(n){var e=c(n.components);return r.createElement(l.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,i=n.originalType,l=n.parentName,d=s(n,["components","mdxType","originalType","parentName"]),u=c(t),f=o,m=u["".concat(l,".").concat(f)]||u[f]||p[f]||i;return t?r.createElement(m,a(a({ref:e},d),{},{components:t})):r.createElement(m,a({ref:e},d))}));function f(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var i=t.length,a=new Array(i);a[0]=u;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s.mdxType="string"==typeof n?n:o,a[1]=s;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4023:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const i={},a="\u264a \u53cc\u4eba\u6210\u884c",s={unversionedId:"cnss/6",id:"cnss/6",title:"\u264a \u53cc\u4eba\u6210\u884c",description:"\u9898\u76ee",source:"@site/docs/cnss/6.md",sourceDirName:"cnss",slug:"/cnss/6",permalink:"/site/docs/cnss/6",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udc0d \u770b\u770b\u86c7",permalink:"/site/docs/cnss/5"},next:{title:"\ud83c\udff4 \u81ea\u4e0b\u800c\u4e0a\u7684\u7a83\u542c\u653b\u51fb",permalink:"/site/docs/cnss/7"}},l={},c=[{value:"\u9898\u76ee",id:"\u9898\u76ee",level:2},{value:"\u9898\u89e3",id:"\u9898\u89e3",level:2}],d={toc:c};function p(n){let{components:e,...t}=n;return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"-\u53cc\u4eba\u6210\u884c"},"\u264a \u53cc\u4eba\u6210\u884c"),(0,o.kt)("h2",{id:"\u9898\u76ee"},"\u9898\u76ee"),(0,o.kt)("p",null,"\u8bf7\u4f60\u8fd0\u7528\u6570\u636e\u5e76\u884c\u5316\uff0c\u4f7f\u7528 PyTorch \u7684 ",(0,o.kt)("inlineCode",{parentName:"p"},"DistributedDataParallel")," \u6a21\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u591a\u673a\u6216\u591a\u5361\u7684\u5bf9 ",(0,o.kt)("inlineCode",{parentName:"p"},"CIFAR-10")," \u8fdb\u884c\u5206\u7c7b\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u6a21\u578b\u81ea\u9009\u3002"),(0,o.kt)("h2",{id:"\u9898\u89e3"},"\u9898\u89e3"),(0,o.kt)("p",null,"\u6ca1\u6709\u4e24\u4e2a GPU\uff0c\u7528 CPU \u548c GPU \u5e76\u884c\u51d1\u5408\u4e86\uff08"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import os\nimport torch\nimport torch.distributed as dist\nimport torch.nn as nn\nimport torch.multiprocessing as mp\nimport torchvision\nimport torchvision.transforms as transforms\nimport torch.optim as optim\n\nfrom torch.nn.parallel import DistributedDataParallel\n\ndevices = [torch.device('cpu'), torch.device('cuda')]\n\n\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.conv1 = nn.Sequential(\n            nn.Conv2d(in_channels=3, out_channels=6, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2, stride=2, padding=0)\n        )\n        self.conv2 = nn.Sequential(\n            nn.Conv2d(in_channels=6, out_channels=16, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2, stride=2, padding=0)\n        )\n        self.conv3 = nn.Sequential(\n            nn.Conv2d(in_channels=16, out_channels=32, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2, stride=2, padding=0)\n        )\n        self.conv4 = nn.Sequential(\n            nn.Conv2d(in_channels=32, out_channels=64, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2, stride=2, padding=0)\n        )\n        self.conv5 = nn.Sequential(\n            nn.Conv2d(in_channels=64, out_channels=128, kernel_size=3, stride=1, padding=1),\n            nn.ReLU(),\n            nn.MaxPool2d(kernel_size=2, stride=2, padding=0)\n        )\n\n        self.dense = nn.Sequential(\n            nn.Linear(128, 120),\n            nn.ReLU(),\n            nn.Linear(120, 84),\n            nn.ReLU(),\n            nn.Linear(84, 10)\n        )\n\n    def forward(self, x):\n        x = self.conv1(x)\n        x = self.conv2(x)\n        x = self.conv3(x)\n        x = self.conv4(x)\n        x = self.conv5(x)\n        x = x.view(-1, 128)\n        x = self.dense(x)\n        return x\n\n\ndef train(rank, world_size):\n    dist.init_process_group(\"gloo\", rank=rank, world_size=world_size)\n    torch.manual_seed(42)\n\n    device = devices[rank]\n    net = Net().to(device)\n    net = DistributedDataParallel(net)\n\n\n    criterion = nn.CrossEntropyLoss()\n    optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)\n\n    trainset = torchvision.datasets.CIFAR10(root='./cifar-10', train=True, download=True,\n                                            transform=transforms.ToTensor())\n    trainloader = torch.utils.data.DataLoader(trainset, batch_size=5, shuffle=True)\n\n    CHECKPOINT = \"model.checkpoint.pkl\"\n\n    if rank == 0:\n        torch.save(net.state_dict(), CHECKPOINT)\n\n    dist.barrier()\n\n    net.load_state_dict(torch.load(CHECKPOINT, map_location=device))\n\n    for index, data in enumerate(trainloader):\n\n        inputs, labels = data\n        inputs, labels = inputs.to(device), labels.to(device)\n\n        optimizer.zero_grad()\n\n        outputs = net(inputs)\n        loss = criterion(outputs, labels).to(device)\n        loss.backward()\n        optimizer.step()\n\n    dist.barrier()\n\n    if rank == 0:\n        os.remove(CHECKPOINT)\n        torch.save(net, f'./model.pkl')\n\n    dist.destroy_process_group()\n\n\nif __name__ == '__main__':\n    os.environ['MASTER_ADDR'] = 'localhost'\n    os.environ['MASTER_PORT'] = '12345'\n    mp.freeze_support()\n    mp.spawn(train,\n             args=(len(devices), ),\n             nprocs=len(devices),\n             join=True)\n\n")))}p.isMDXComponent=!0}}]);