"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[1695],{28453:(t,n,e)=>{e.d(n,{R:()=>a,x:()=>o});var i=e(96540);const s={},r=i.createContext(s);function a(t){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function o(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:a(t.components),i.createElement(r.Provider,{value:n},t.children)}},82337:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var i=e(74848),s=e(28453);const r={date:new Date("2023-05-09T00:00:00.000Z"),tags:["cpp","pl"]},a="<experimental/simd> \u521d\u4f53\u9a8c",o={permalink:"/site/blog/simd",source:"@site/blog/simd.md",title:"<experimental/simd> \u521d\u4f53\u9a8c",description:"\u4e4b\u524d\u7528\u975e\u6807\u51c6\u7684 simd \u5199\u8fc7\u77e9\u9635\u4e58\u6cd5\u52a0\u901f\uff0c\u8fd1\u671f\u6ce8\u610f\u5230 C++ \u65b0\u7684 Technical specifications\u2014\u2014Parallelism library extensions v2 \u52a0\u5165\u4e86 ``\u3002\u4e8e\u662f\u6211\u5c1d\u8bd5\u7528\u5b83\u91cd\u5199\u4e86\u4e00\u4e0b\u3002",date:"2023-05-09T00:00:00.000Z",tags:[{inline:!0,label:"cpp",permalink:"/site/blog/tags/cpp"},{inline:!0,label:"pl",permalink:"/site/blog/tags/pl"}],readingTime:2.52,hasTruncateMarker:!1,authors:[],frontMatter:{date:"2023-05-09T00:00:00.000Z",tags:["cpp","pl"]},unlisted:!1,prevItem:{title:"\u5149\u7ebf\u2014\u4e09\u89d2\u5f62\u76f8\u4ea4\u7b97\u6cd5",permalink:"/site/blog/ray-intersect"},nextItem:{title:"\u901f\u901a\u7edf\u8ba1\u5b66",permalink:"/site/blog/statistics"}},c={authorsImageUrls:[]},m=[];function l(t){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,s.R)(),...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://yaossg.com/site/docs/cnss/2#%E5%90%91%E9%87%8F%E5%8C%96",children:"\u4e4b\u524d\u7528\u975e\u6807\u51c6\u7684 simd \u5199\u8fc7\u77e9\u9635\u4e58\u6cd5\u52a0\u901f"}),"\uff0c\u8fd1\u671f\u6ce8\u610f\u5230 C++ \u65b0\u7684 Technical specifications\u2014\u2014",(0,i.jsx)(n.a,{href:"https://en.cppreference.com/w/cpp/experimental/parallelism_2",children:"Parallelism library extensions v2"})," \u52a0\u5165\u4e86 ",(0,i.jsx)(n.a,{href:"https://en.cppreference.com/w/cpp/experimental/simd",children:(0,i.jsx)(n.code,{children:"<experimental/simd>"})}),"\u3002\u4e8e\u662f\u6211\u5c1d\u8bd5\u7528\u5b83\u91cd\u5199\u4e86\u4e00\u4e0b\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\n#include <string>\n#include <functional>\n#include <chrono>\n#include <vector>\n#include <cstring>\nusing namespace std;\n\n\ndouble timeit(std::function<void()> test) {\n    auto start = std::chrono::system_clock::now();\n    test();\n    auto stop = std::chrono::system_clock::now();\n    std::chrono::duration<double, std::milli> time = stop - start;\n    return time.count();\n}\n\n#include <experimental/simd>\nnamespace stdx = std::experimental;\n\nstruct vec {\n    constexpr static int N = 256;\n\n    stdx::fixed_size_simd<double, 4> a[N];\n    double& operator[](int x) {\n        return ((double*) a)[x];\n    }\n    const double& operator[](int x) const {\n        return ((double*) a)[x];\n    }\n    double dot(const vec& x) const {\n        stdx::fixed_size_simd<double, 4> sum = 0;\n        for (int i = 0; i < N; i++)\n            sum += a[i] * x.a[i];\n        return stdx::reduce(sum);\n    }\n};\n\nclass matrix {\n    constexpr static size_t m = 1024, n = 1024;\n    vector<double> e;\npublic:\n    explicit matrix(): e(m * n) {}\n    void random() {\n        for (size_t i = 0; i < m; ++i)\n            for (size_t j = 0; j < n; ++j)\n                at(i, j) = rand();\n    }\n    matrix(matrix const& that) = default;\n    matrix(matrix&&) = default;\n    matrix& operator=(matrix const& that) = default;\n    matrix& operator=(matrix&& that) = default;\n    double& at(size_t i, size_t j) { return e[i * m + j]; }\n    double const& at(size_t i, size_t j) const { return e[i * m + j]; }\n\n    matrix mul_plain(matrix const& that) const {\n        size_t p = that.m;\n        matrix product;\n        for (size_t i = 0; i < m; ++i)\n            for (size_t j = 0; j < n; ++j) {\n                for (size_t k = 0; k < p; ++k)\n                    product.at(i, j) += at(i, k) * that.at(k, j);\n            }\n        return product;\n    }\n\n    matrix mul_simd(matrix const& that) const {\n        vector<vec> lines(m), columns(n);\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                lines[i][j] = at(i, j);\n                columns[j][i] = that.at(i, j);\n            }\n        }\n        matrix r;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                r.at(i, j) = lines[i].dot(columns[j]);\n            }\n        }\n        return r;\n    }\n};\n\ndouble timeit(matrix (matrix::* test)(matrix const&) const, int times, const char* impl, double base = 0) {\n    double time = timeit([=] {\n        srand(1);\n        for (int i = 0; i < times; ++i) {\n            matrix m1, m2;\n            m1.random(); m2.random();\n            (m1.*test)(m2);\n        }\n    });\n    printf("\'%5s\' took %.2f ms to complete %d times 1024 x 1024 matrices multiplication", impl, time, times);\n    if (base && base != time) {\n        printf(", %.2f%% ", abs(base - time) / base * 100);\n        if (base > time) printf("faster");\n        else printf("slower");\n    }\n    puts("");\n    return time;\n}\n\n\nint main() {\n    double base = timeit(&matrix::mul_plain, 1, "plain");\n    timeit(&matrix::mul_simd, 1, "simd", base);\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u8f93\u51fa\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"'plain' took 5458.48 ms to complete 1 times 1024 x 1024 matrices multiplication\n' simd' took 232.27 ms to complete 1 times 1024 x 1024 matrices multiplication, 95.74% faster\n"})})]})}function d(t={}){const{wrapper:n}={...(0,s.R)(),...t.components};return n?(0,i.jsx)(n,{...t,children:(0,i.jsx)(l,{...t})}):l(t)}}}]);